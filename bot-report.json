{
  "reportUid": "jPDcrhpvuzk",
  "labels": [
    {
      "name": "QA (Quality Assurance)",
      "color": "1D76DB"
    }
  ],
  "comment": null,
  "footnote": null,
  "findings": [
    {
      "severity": "Medium",
      "title": "`block.number` means different things on different L2s",
      "description": "On Optimism, `block.number` is the L2 block number, but on Arbitrum, it's the L1 block number, and `ArbSys(address(100)).arbBlockNumber()` must be used. Furthermore, L2 block numbers often occur much more frequently than L1 block numbers (any may even occur on a per-transaction basis), so using block numbers for timing results in inconsistencies, especially when voting is involved across multiple chains. As of version 4.9, OpenZeppelin has [modified](https://blog.openzeppelin.com/introducing-openzeppelin-contracts-v4.9#governor) their governor code to use a clock rather than block numbers, to avoid these sorts of issues, but this still requires that the project [implement](https://docs.openzeppelin.com/contracts/4.x/governance#token_2) a [clock](https://eips.ethereum.org/EIPS/eip-6372) for each L2.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n139:         mapSupplyPoints[0] = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n215:             lastPoint = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n266:                     lastPoint.blockNumber = uint64(block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L266-L266"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n313:             uNew.blockNumber = uint64(block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L313-L313"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n645:         if (blockNumber > block.number) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L645-L645"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n646:             revert WrongBlockNumber(blockNumber, block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L646-L646"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n659:             dBlock = block.number - point.blockNumber;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L659-L659"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n824:         lastDonationBlockNumber = uint32(block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L824-L824"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n892:         if (lastDonationBlockNumber == block.number) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L892-L892"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Missing checks for `address(0)` when assigning values to address state variables",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n134:         token = _token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n25:         componentRegistry = _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n16:         componentRegistry = _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n17:         agentRegistry = _agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n38:         gnosisSafe = _gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n39:         gnosisSafeProxyFactory = _gnosisSafeProxyFactory;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n315:         donatorBlacklist = _donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L315-L315"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n480:         donatorBlacklist = _donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L480-L480"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Array lengths not checked",
      "description": "If the length of the arrays are not required to be of the same length, user operations may not be fully executed due to a mismatch in the number of items iterated over, versus the number of items provided in the second array",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit , targets, values, calldatas length are not checked\n45:     function propose(\n46:         address[] memory targets,\n47:         uint256[] memory values,\n48:         bytes[] memory calldatas,\n49:         string memory description\n50:     ) public override(IGovernor, Governor, GovernorCompatibilityBravo) returns (uint256)\n51:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L45-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n//@audit , proposers, executors length are not checked\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n11:         TimelockController(minDelay, proposers, executors, msg.sender)\n12:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L12"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "For loops in public or external functions should be avoided due to high gas costs and possible DOS",
      "description": "In Solidity, for loops can potentially cause Denial of Service (DoS) attacks if not handled carefully. DoS attacks can occur when an attacker intentionally exploits the gas cost of a function, causing it to run out of gas or making it too expensive for other users to call. Below are some scenarios where for loops can lead to DoS attacks: Nested for loops can become exceptionally gas expensive and should be used sparingly",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n098:     function inflationRemainder() public view returns (uint256 remainder) {\n099:         uint256 _totalSupply = totalSupply;\n100:         // Current year\n101:         uint256 numYears = (block.timestamp - timeLaunch) / oneYear;\n102:         // Calculate maximum mint amount to date\n103:         uint256 supplyCap = tenYearSupplyCap;\n104:         // After 10 years, adjust supplyCap according to the yearly inflation % set in maxMintCapFraction\n105:         if (numYears > 9) {\n106:             // Number of years after ten years have passed (including ongoing ones)\n107:             numYears -= 9;\n108:             for (uint256 i = 0; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L98-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n107:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external override {\n108:         // Check for the Fx Child address\n109:         if(msg.sender != fxChild) {\n110:             revert FxChildOnly(msg.sender, fxChild);\n111:         }\n112: \n113:         // Check for the Root Governor address\n114:         if(rootMessageSender != rootGovernor) {\n115:             revert RootGovernorOnly(rootMessageSender, rootGovernor);\n116:         }\n117: \n118:         // Check for the correct data length\n119:         uint256 dataLength = data.length;\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n121:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n122:         }\n123: \n124:         // Unpack and process the data\n125:         for (uint256 i = 0; i < dataLength;) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L107-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n107:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external override {\n108:         // Check for the Fx Child address\n109:         if(msg.sender != fxChild) {\n110:             revert FxChildOnly(msg.sender, fxChild);\n111:         }\n112: \n113:         // Check for the Root Governor address\n114:         if(rootMessageSender != rootGovernor) {\n115:             revert RootGovernorOnly(rootMessageSender, rootGovernor);\n116:         }\n117: \n118:         // Check for the correct data length\n119:         uint256 dataLength = data.length;\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n121:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n122:         }\n123: \n124:         // Unpack and process the data\n125:         for (uint256 i = 0; i < dataLength;) {\n126:             address target;\n127:             uint96 value;\n128:             uint32 payloadLength;\n129:             // solhint-disable-next-line no-inline-assembly\n130:             assembly {\n131:                 // First 20 bytes is the address (160 bits)\n132:                 i := add(i, 20)\n133:                 target := mload(add(data, i))\n134:                 // Offset the data by 12 bytes of value (96 bits)\n135:                 i := add(i, 12)\n136:                 value := mload(add(data, i))\n137:                 // Offset the data by 4 bytes of payload length (32 bits)\n138:                 i := add(i, 4)\n139:                 payloadLength := mload(add(data, i))\n140:             }\n141: \n142:             // Check for the zero address\n143:             if (target == address(0)) {\n144:                 revert ZeroAddress();\n145:             }\n146:             // Check for the value compared to the contract's balance\n147:             if (value > address(this).balance) {\n148:                 revert InsufficientBalance(value, address(this).balance);\n149:             }\n150: \n151:             // Get the payload\n152:             bytes memory payload = new bytes(payloadLength);\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L107-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n105:     function processMessageFromForeign(bytes memory data) external {\n106:         // Check for the AMB Contract Proxy (Home) address\n107:         if (msg.sender != AMBContractProxyHome) {\n108:             revert AMBContractProxyHomeOnly(msg.sender, AMBContractProxyHome);\n109:         }\n110: \n111:         // Check for the Foreign Governor address\n112:         address governor = foreignGovernor;\n113:         address bridgeGovernor = IAMB(AMBContractProxyHome).messageSender();\n114:         if (bridgeGovernor != governor) {\n115:             revert ForeignGovernorOnly(bridgeGovernor, governor);\n116:         }\n117: \n118:         // Check for the correct data length\n119:         uint256 dataLength = data.length;\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n121:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n122:         }\n123: \n124:         // Unpack and process the data\n125:         for (uint256 i = 0; i < dataLength;) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n105:     function processMessageFromForeign(bytes memory data) external {\n106:         // Check for the AMB Contract Proxy (Home) address\n107:         if (msg.sender != AMBContractProxyHome) {\n108:             revert AMBContractProxyHomeOnly(msg.sender, AMBContractProxyHome);\n109:         }\n110: \n111:         // Check for the Foreign Governor address\n112:         address governor = foreignGovernor;\n113:         address bridgeGovernor = IAMB(AMBContractProxyHome).messageSender();\n114:         if (bridgeGovernor != governor) {\n115:             revert ForeignGovernorOnly(bridgeGovernor, governor);\n116:         }\n117: \n118:         // Check for the correct data length\n119:         uint256 dataLength = data.length;\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n121:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n122:         }\n123: \n124:         // Unpack and process the data\n125:         for (uint256 i = 0; i < dataLength;) {\n126:             address target;\n127:             uint96 value;\n128:             uint32 payloadLength;\n129:             // solhint-disable-next-line no-inline-assembly\n130:             assembly {\n131:                 // First 20 bytes is the address (160 bits)\n132:                 i := add(i, 20)\n133:                 target := mload(add(data, i))\n134:                 // Offset the data by 12 bytes of value (96 bits)\n135:                 i := add(i, 12)\n136:                 value := mload(add(data, i))\n137:                 // Offset the data by 4 bytes of payload length (32 bits)\n138:                 i := add(i, 4)\n139:                 payloadLength := mload(add(data, i))\n140:             }\n141: \n142:             // Check for the zero address\n143:             if (target == address(0)) {\n144:                 revert ZeroAddress();\n145:             }\n146:             // Check for the value compared to the contract's balance\n147:             if (value > address(this).balance) {\n148:                 revert InsufficientBalance(value, address(this).balance);\n149:             }\n150: \n151:             // Get the payload\n152:             bytes memory payload = new bytes(payloadLength);\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n441:     function setTargetSelectorChainIds(\n442:         address[] memory targets,\n443:         bytes4[] memory selectors,\n444:         uint256[] memory chainIds,\n445:         bool[] memory statuses\n446:     ) external {\n447:         // Check for the ownership\n448:         if (msg.sender != owner) {\n449:             revert OwnerOnly(msg.sender, owner);\n450:         }\n451:         \n452:         // Check array length\n453:         if (targets.length != selectors.length || targets.length != statuses.length || targets.length != chainIds.length) {\n454:             revert WrongArrayLength(targets.length, selectors.length, statuses.length, chainIds.length);\n455:         }\n456: \n457:         // Traverse all the targets and selectors to build their paired values\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L458"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n495:     function setBridgeMediatorChainIds(\n496:         address[] memory bridgeMediatorL1s,\n497:         address[] memory bridgeMediatorL2s,\n498:         uint256[] memory chainIds\n499:     ) external {\n500:         // Check for the ownership\n501:         if (msg.sender != owner) {\n502:             revert OwnerOnly(msg.sender, owner);\n503:         }\n504: \n505:         // Check for array correctness\n506:         if (bridgeMediatorL1s.length != bridgeMediatorL2s.length || bridgeMediatorL1s.length != chainIds.length) {\n507:             revert WrongArrayLength(bridgeMediatorL1s.length, bridgeMediatorL2s.length, chainIds.length, chainIds.length);\n508:         }\n509: \n510:         // Link L1 and L2 bridge mediators, set L2 chain Ids\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n49:     function create(address unitOwner, bytes32 unitHash, uint32[] memory dependencies)\n50:         external virtual returns (uint256 unitId)\n51:     {\n52:         // Reentrancy guard\n53:         if (_locked > 1) {\n54:             revert ReentrancyGuard();\n55:         }\n56:         _locked = 2;\n57: \n58:         // Check for the manager privilege for a unit creation\n59:         if (manager != msg.sender) {\n60:             revert ManagerOnly(msg.sender, manager);\n61:         }\n62: \n63:         // Checks for a non-zero owner address\n64:         if(unitOwner == address(0)) {\n65:             revert ZeroAddress();\n66:         }\n67: \n68:         // Check for the non-zero hash value\n69:         if (unitHash == 0) {\n70:             revert ZeroValue();\n71:         }\n72:         \n73:         // Check for dependencies validity: must be already allocated, must not repeat\n74:         unitId = totalSupply;\n75:         _checkDependencies(dependencies, uint32(unitId));\n76: \n77:         // Unit with Id = 0 is left empty not to do additional checks for the index zero\n78:         unitId++;\n79: \n80:         // Initialize the unit and mint its token\n81:         Unit storage unit = mapUnits[unitId];\n82:         unit.unitHash = unitHash;\n83:         unit.dependencies = dependencies;\n84: \n85:         // Update the map of subcomponents with calculated subcomponents for the new unit Id\n86:         // In order to get the correct set of subcomponents, we need to differentiate between the callers of this function\n87:         // Self contract (unit registry) can only call subcomponents calculation from the component level\n88:         uint32[] memory subComponentIds = _calculateSubComponents(UnitType.Component, dependencies);\n89:         // We need to add a current component Id to the set of subcomponents if the unit is a component\n90:         // For example, if component 3 (c3) has dependencies of [c1, c2], then the subcomponents will return [c1, c2].\n91:         // The resulting set will be [c1, c2, c3]. So we write into the map of component subcomponents: c3=>[c1, c2, c3].\n92:         // This is done such that the subcomponents start getting explored, and when the agent calls its subcomponents,\n93:         // it would have [c1, c2, c3] right away instead of adding c3 manually and then (for services) checking\n94:         // if another agent also has c3 as a component dependency. The latter will consume additional computation.\n95:         if (unitType == UnitType.Component) {\n96:             uint256 numSubComponents = subComponentIds.length;\n97:             uint32[] memory addSubComponentIds = new uint32[](numSubComponents + 1);\n98:             for (uint256 i = 0; i < numSubComponents; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L49-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n085:     function create(\n086:         address[] memory owners,\n087:         uint256 threshold,\n088:         bytes memory data\n089:     ) external returns (address multisig)\n090:     {\n091:         // Check for the correct data length\n092:         uint256 dataLength = data.length;\n093:         if (dataLength < DEFAULT_DATA_LENGTH) {\n094:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n095:         }\n096: \n097:         // Read the proxy multisig address (20 bytes) and the multisig-related data\n098:         assembly {\n099:             multisig := mload(add(data, DEFAULT_DATA_LENGTH))\n100:         }\n101: \n102:         // Check that the multisig address corresponds to the authorized multisig proxy bytecode hash\n103:         bytes32 multisigProxyHash = keccak256(multisig.code);\n104:         if (proxyHash != multisigProxyHash) {\n105:             revert UnauthorizedMultisig(multisig);\n106:         }\n107: \n108:         // If provided, read the payload that is going to change the multisig ownership and threshold\n109:         // The payload is expected to be the `execTransaction()` function call with all its arguments and signature(s)\n110:         if (dataLength > DEFAULT_DATA_LENGTH) {\n111:             uint256 payloadLength = dataLength - DEFAULT_DATA_LENGTH;\n112:             bytes memory payload = new bytes(payloadLength);\n113:             for (uint256 i = 0; i < payloadLength; ++i) {\n114:                 payload[i] = data[i + DEFAULT_DATA_LENGTH];\n115:             }\n116: \n117:             // Call the multisig with the provided payload\n118:             (bool success, ) = multisig.call(payload);\n119:             if (!success) {\n120:                 revert MultisigExecFailed(multisig);\n121:             }\n122:         }\n123: \n124:         // Get the provided proxy multisig owners and threshold\n125:         address[] memory checkOwners = IGnosisSafe(multisig).getOwners();\n126:         uint256 checkThreshold = IGnosisSafe(multisig).getThreshold();\n127: \n128:         // Verify updated multisig proxy for provided owners and threshold\n129:         if (threshold != checkThreshold) {\n130:             revert WrongThreshold(checkThreshold, threshold);\n131:         }\n132:         uint256 numOwners = owners.length;\n133:         if (numOwners != checkOwners.length) {\n134:             revert WrongNumOwners(checkOwners.length, numOwners);\n135:         }\n136:         // The owners' addresses in the multisig itself are stored in reverse order compared to how they were added:\n137:         // https://etherscan.io/address/0xd9db270c1b5e3bd161e8c8503c55ceabee709552#code#F6#L56\n138:         // Thus, the check must be carried out accordingly.\n139:         for (uint256 i = 0; i < numOwners; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n085:     function create(\n086:         address[] memory owners,\n087:         uint256 threshold,\n088:         bytes memory data\n089:     ) external returns (address multisig)\n090:     {\n091:         // Check for the correct data length\n092:         uint256 dataLength = data.length;\n093:         if (dataLength < DEFAULT_DATA_LENGTH) {\n094:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n095:         }\n096: \n097:         // Read the proxy multisig address (20 bytes) and the multisig-related data\n098:         assembly {\n099:             multisig := mload(add(data, DEFAULT_DATA_LENGTH))\n100:         }\n101: \n102:         // Check that the multisig address corresponds to the authorized multisig proxy bytecode hash\n103:         bytes32 multisigProxyHash = keccak256(multisig.code);\n104:         if (proxyHash != multisigProxyHash) {\n105:             revert UnauthorizedMultisig(multisig);\n106:         }\n107: \n108:         // If provided, read the payload that is going to change the multisig ownership and threshold\n109:         // The payload is expected to be the `execTransaction()` function call with all its arguments and signature(s)\n110:         if (dataLength > DEFAULT_DATA_LENGTH) {\n111:             uint256 payloadLength = dataLength - DEFAULT_DATA_LENGTH;\n112:             bytes memory payload = new bytes(payloadLength);\n113:             for (uint256 i = 0; i < payloadLength; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n245:         // Check for the contract ownership\n246:         if (msg.sender != owner) {\n247:             revert OwnerOnly(msg.sender, owner);\n248:         }\n249: \n250:         // Calculate the number of closed products\n251:         uint256 numProducts = productIds.length;\n252:         uint256[] memory ids = new uint256[](numProducts);\n253:         uint256 numClosedProducts;\n254:         // Traverse to close all possible products\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n245:         // Check for the contract ownership\n246:         if (msg.sender != owner) {\n247:             revert OwnerOnly(msg.sender, owner);\n248:         }\n249: \n250:         // Calculate the number of closed products\n251:         uint256 numProducts = productIds.length;\n252:         uint256[] memory ids = new uint256[](numProducts);\n253:         uint256 numClosedProducts;\n254:         // Traverse to close all possible products\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n256:             uint256 productId = productIds[i];\n257:             // Check if the product is still open by getting its supply amount\n258:             uint256 supply = mapBondProducts[productId].supply;\n259:             // The supply is greater than zero only if the product is active, otherwise it is already closed\n260:             if (supply > 0) {\n261:                 // Refund unused OLAS supply from the product if it was not used by the product completely\n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n263:                 address token = mapBondProducts[productId].token;\n264:                 delete mapBondProducts[productId];\n265: \n266:                 ids[numClosedProducts] = productIds[i];\n267:                 ++numClosedProducts;\n268:                 emit CloseProduct(token, productId, supply);\n269:             }\n270:         }\n271: \n272:         // Get the correct array size of closed product Ids\n273:         closedProductIds = new uint256[](numClosedProducts);\n274:         for (uint256 i = 0; i < numClosedProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L274"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n356:     function redeem(uint256[] memory bondIds) external returns (uint256 payout) {\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L356-L357"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n396:     function getProducts(bool active) external view returns (uint256[] memory productIds) {\n397:         // Calculate the number of existing products\n398:         uint256 numProducts = productCounter;\n399:         bool[] memory positions = new bool[](numProducts);\n400:         uint256 numSelectedProducts;\n401:         // Traverse to find requested products\n402:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L396-L402"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n396:     function getProducts(bool active) external view returns (uint256[] memory productIds) {\n397:         // Calculate the number of existing products\n398:         uint256 numProducts = productCounter;\n399:         bool[] memory positions = new bool[](numProducts);\n400:         uint256 numSelectedProducts;\n401:         // Traverse to find requested products\n402:         for (uint256 i = 0; i < numProducts; ++i) {\n403:             // Product is always active if its supply is not zero, and inactive otherwise\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n405:                 positions[i] = true;\n406:                 ++numSelectedProducts;\n407:             }\n408:         }\n409: \n410:         // Form active or inactive products index array\n411:         productIds = new uint256[](numSelectedProducts);\n412:         uint256 numPos;\n413:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L396-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n435:     function getBonds(address account, bool matured) external view\n436:         returns (uint256[] memory bondIds, uint256 payout)\n437:     {\n438:         // Check the address\n439:         if (account == address(0)) {\n440:             revert ZeroAddress();\n441:         }\n442: \n443:         uint256 numAccountBonds;\n444:         // Calculate the number of pending bonds\n445:         uint256 numBonds = bondCounter;\n446:         bool[] memory positions = new bool[](numBonds);\n447:         // Record the bond number if it belongs to the account address and was not yet redeemed\n448:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L435-L448"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n435:     function getBonds(address account, bool matured) external view\n436:         returns (uint256[] memory bondIds, uint256 payout)\n437:     {\n438:         // Check the address\n439:         if (account == address(0)) {\n440:             revert ZeroAddress();\n441:         }\n442: \n443:         uint256 numAccountBonds;\n444:         // Calculate the number of pending bonds\n445:         uint256 numBonds = bondCounter;\n446:         bool[] memory positions = new bool[](numBonds);\n447:         // Record the bond number if it belongs to the account address and was not yet redeemed\n448:         for (uint256 i = 0; i < numBonds; ++i) {\n449:             // Check if the bond belongs to the account\n450:             // If not and the address is zero, the bond was redeemed or never existed\n451:             if (mapUserBonds[i].account == account) {\n452:                 // Check if requested bond is not matured but owned by the account address\n453:                 if (!matured ||\n454:                     // Or if the requested bond is matured, i.e., the bond maturity timestamp passed\n455:                     block.timestamp >= mapUserBonds[i].maturity)\n456:                 {\n457:                     positions[i] = true;\n458:                     ++numAccountBonds;\n459:                     // The payout is always bigger than zero if the bond exists\n460:                     payout += mapUserBonds[i].payout;\n461:                 }\n462:             }\n463:         }\n464: \n465:         // Form pending bonds index array\n466:         bondIds = new uint256[](numAccountBonds);\n467:         uint256 numPos;\n468:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L435-L468"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n57:         // Check for the contract ownership\n58:         if (msg.sender != owner) {\n59:             revert OwnerOnly(msg.sender, owner);\n60:         }\n61: \n62:         // Check for the array length\n63:         if (accounts.length != statuses.length) {\n64:             revert WrongArrayLength(accounts.length, statuses.length);\n65:         }\n66: \n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n788:     function trackServiceDonations(\n789:         address donator,\n790:         uint256[] memory serviceIds,\n791:         uint256[] memory amounts,\n792:         uint256 donationETH\n793:     ) external {\n794:         // Check for the treasury access\n795:         if (treasury != msg.sender) {\n796:             revert ManagerOnly(msg.sender, treasury);\n797:         }\n798: \n799:         // Check if the donator blacklist is enabled, and the status of the donator address\n800:         address bList = donatorBlacklist;\n801:         if (bList != address(0) && IDonatorBlacklist(bList).isDonatorBlacklisted(donator)) {\n802:             revert DonatorBlacklisted(donator);\n803:         }\n804: \n805:         // Get the number of services\n806:         uint256 numServices = serviceIds.length;\n807:         // Loop over service Ids, accumulate donation value and check for the service existence\n808:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L788-L808"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n880:     function checkpoint() external returns (bool) {\n881:         // Get the implementation address that was written to the proxy contract\n882:         address implementation;\n883:         assembly {\n884:             implementation := sload(PROXY_TOKENOMICS)\n885:         }\n886:         // Check if there is any address in the PROXY_TOKENOMICS address slot\n887:         if (implementation == address(0)) {\n888:             revert DelegatecallOnly();\n889:         }\n890: \n891:         // Check the last donation block number to avoid the possibility of a flash loan attack\n892:         if (lastDonationBlockNumber == block.number) {\n893:             revert SameBlockNumberViolation();\n894:         }\n895: \n896:         // New point can be calculated only if we passed the number of blocks equal to the epoch length\n897:         uint256 prevEpochTime = mapEpochTokenomics[epochCounter - 1].epochPoint.endTime;\n898:         uint256 diffNumSeconds = block.timestamp - prevEpochTime;\n899:         uint256 curEpochLen = epochLen;\n900:         // Check if the time passed since the last epoch end time is bigger than the specified epoch length,\n901:         // but not bigger than a year in seconds\n902:         if (diffNumSeconds < curEpochLen || diffNumSeconds > ONE_YEAR) {\n903:             return false;\n904:         }\n905: \n906:         uint256 eCounter = epochCounter;\n907:         TokenomicsPoint storage tp = mapEpochTokenomics[eCounter];\n908: \n909:         // 0: total incentives funded with donations in ETH, that are split between:\n910:         // 1: treasuryRewards, 2: componentRewards, 3: agentRewards\n911:         // OLAS inflation is split between:\n912:         // 4: maxBond, 5: component ownerTopUps, 6: agent ownerTopUps\n913:         uint256[] memory incentives = new uint256[](7);\n914:         incentives[0] = tp.epochPoint.totalDonationsETH;\n915:         incentives[1] = (incentives[0] * tp.epochPoint.rewardTreasuryFraction) / 100;\n916:         // 0 stands for components and 1 for agents\n917:         incentives[2] = (incentives[0] * tp.unitPoints[0].rewardUnitFraction) / 100;\n918:         incentives[3] = (incentives[0] * tp.unitPoints[1].rewardUnitFraction) / 100;\n919: \n920:         // The actual inflation per epoch considering that it is settled not in the exact epochLen time, but a bit later\n921:         uint256 inflationPerEpoch;\n922:         // Record the current inflation per second\n923:         uint256 curInflationPerSecond = inflationPerSecond;\n924:         // Current year\n925:         uint256 numYears = (block.timestamp - timeLaunch) / ONE_YEAR;\n926:         // Amounts for the yearly inflation change from year to year, so if the year changes in the middle\n927:         // of the epoch, it is necessary to adjust epoch inflation numbers to account for the year change\n928:         if (numYears > currentYear) {\n929:             // Calculate remainder of inflation for the passing year\n930:             // End of the year timestamp\n931:             uint256 yearEndTime = timeLaunch + numYears * ONE_YEAR;\n932:             // Initial inflation per epoch during the end of the year minus previous epoch timestamp\n933:             inflationPerEpoch = (yearEndTime - prevEpochTime) * curInflationPerSecond;\n934:             // Recalculate the inflation per second based on the new inflation for the current year\n935:             curInflationPerSecond = getInflationForYear(numYears) / ONE_YEAR;\n936:             // Add the remainder of inflation amount for this epoch based on a new inflation per second ratio\n937:             inflationPerEpoch += (block.timestamp - yearEndTime) * curInflationPerSecond;\n938:             // Updating state variables\n939:             inflationPerSecond = uint96(curInflationPerSecond);\n940:             currentYear = uint8(numYears);\n941:             // Set the tokenomics parameters flag such that the maxBond is correctly updated below (3rd bit is set to one)\n942:             tokenomicsParametersUpdated = tokenomicsParametersUpdated | 0x04;\n943:         } else {\n944:             // Inflation per epoch is equal to the inflation per second multiplied by the actual time of the epoch\n945:             inflationPerEpoch = curInflationPerSecond * diffNumSeconds;\n946:         }\n947: \n948:         // Bonding and top-ups in OLAS are recalculated based on the inflation schedule per epoch\n949:         // Actual maxBond of the epoch\n950:         tp.epochPoint.totalTopUpsOLAS = uint96(inflationPerEpoch);\n951:         incentives[4] = (inflationPerEpoch * tp.epochPoint.maxBondFraction) / 100;\n952: \n953:         // Get the maxBond that was credited to effectiveBond during this settled epoch\n954:         // If the year changes, the maxBond for the next epoch is updated in the condition below and will be used\n955:         // later when the effectiveBond is updated for the next epoch\n956:         uint256 curMaxBond = maxBond;\n957: \n958:         // Effective bond accumulates bonding leftovers from previous epochs (with the last max bond value set)\n959:         // It is given the value of the maxBond for the next epoch as a credit\n960:         // The difference between recalculated max bond per epoch and maxBond value must be reflected in effectiveBond,\n961:         // since the epoch checkpoint delay was not accounted for initially\n962:         // This has to be always true, or incentives[4] == curMaxBond if the epoch is settled exactly at the epochLen time\n963:         if (incentives[4] > curMaxBond) {\n964:             // Adjust the effectiveBond\n965:             incentives[4] = effectiveBond + incentives[4] - curMaxBond;\n966:             effectiveBond = uint96(incentives[4]);\n967:         }\n968: \n969:         // Get the tokenomics point of the next epoch\n970:         TokenomicsPoint storage nextEpochPoint = mapEpochTokenomics[eCounter + 1];\n971:         // Update incentive fractions for the next epoch if they were requested by the changeIncentiveFractions() function\n972:         // Check if the second bit is set to one\n973:         if (tokenomicsParametersUpdated & 0x02 == 0x02) {\n974:             // Confirm the change of incentive fractions\n975:             emit IncentiveFractionsUpdated(eCounter + 1);\n976:         } else {\n977:             // Copy current tokenomics point into the next one such that it has necessary tokenomics parameters\n978:             for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L880-L978"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n1086:         returns (uint256 reward, uint256 topUp)\n1087:     {\n1088:         // Check for the dispenser access\n1089:         if (dispenser != msg.sender) {\n1090:             revert ManagerOnly(msg.sender, dispenser);\n1091:         }\n1092: \n1093:         // Check array lengths\n1094:         if (unitTypes.length != unitIds.length) {\n1095:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1096:         }\n1097: \n1098:         // Component / agent registry addresses\n1099:         address[] memory registries = new address[](2);\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1101: \n1102:         // Component / agent total supply\n1103:         uint256[] memory registriesSupply = new uint256[](2);\n1104:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n1086:         returns (uint256 reward, uint256 topUp)\n1087:     {\n1088:         // Check for the dispenser access\n1089:         if (dispenser != msg.sender) {\n1090:             revert ManagerOnly(msg.sender, dispenser);\n1091:         }\n1092: \n1093:         // Check array lengths\n1094:         if (unitTypes.length != unitIds.length) {\n1095:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1096:         }\n1097: \n1098:         // Component / agent registry addresses\n1099:         address[] memory registries = new address[](2);\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1101: \n1102:         // Component / agent total supply\n1103:         uint256[] memory registriesSupply = new uint256[](2);\n1104:         for (uint256 i = 0; i < 2; ++i) {\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1106:         }\n1107: \n1108:         // Check the input data\n1109:         uint256[] memory lastIds = new uint256[](2);\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n1086:         returns (uint256 reward, uint256 topUp)\n1087:     {\n1088:         // Check for the dispenser access\n1089:         if (dispenser != msg.sender) {\n1090:             revert ManagerOnly(msg.sender, dispenser);\n1091:         }\n1092: \n1093:         // Check array lengths\n1094:         if (unitTypes.length != unitIds.length) {\n1095:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1096:         }\n1097: \n1098:         // Component / agent registry addresses\n1099:         address[] memory registries = new address[](2);\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1101: \n1102:         // Component / agent total supply\n1103:         uint256[] memory registriesSupply = new uint256[](2);\n1104:         for (uint256 i = 0; i < 2; ++i) {\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1106:         }\n1107: \n1108:         // Check the input data\n1109:         uint256[] memory lastIds = new uint256[](2);\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1111:             // Check for the unit type to be component / agent only\n1112:             if (unitTypes[i] > 1) {\n1113:                 revert Overflow(unitTypes[i], 1);\n1114:             }\n1115: \n1116:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1118:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1119:             }\n1120:             lastIds[unitTypes[i]] = unitIds[i];\n1121: \n1122:             // Check the component / agent Id ownership\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1124:             if (unitOwner != account) {\n1125:                 revert OwnerOnly(unitOwner, account);\n1126:             }\n1127:         }\n1128: \n1129:         // Get the current epoch counter\n1130:         uint256 curEpoch = epochCounter;\n1131: \n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n1163:         // Check array lengths\n1164:         if (unitTypes.length != unitIds.length) {\n1165:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1166:         }\n1167: \n1168:         // Component / agent registry addresses\n1169:         address[] memory registries = new address[](2);\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1171: \n1172:         // Component / agent total supply\n1173:         uint256[] memory registriesSupply = new uint256[](2);\n1174:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1174"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n1163:         // Check array lengths\n1164:         if (unitTypes.length != unitIds.length) {\n1165:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1166:         }\n1167: \n1168:         // Component / agent registry addresses\n1169:         address[] memory registries = new address[](2);\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1171: \n1172:         // Component / agent total supply\n1173:         uint256[] memory registriesSupply = new uint256[](2);\n1174:         for (uint256 i = 0; i < 2; ++i) {\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1176:         }\n1177: \n1178:         // Check the input data\n1179:         uint256[] memory lastIds = new uint256[](2);\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1180"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n1163:         // Check array lengths\n1164:         if (unitTypes.length != unitIds.length) {\n1165:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1166:         }\n1167: \n1168:         // Component / agent registry addresses\n1169:         address[] memory registries = new address[](2);\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1171: \n1172:         // Component / agent total supply\n1173:         uint256[] memory registriesSupply = new uint256[](2);\n1174:         for (uint256 i = 0; i < 2; ++i) {\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1176:         }\n1177: \n1178:         // Check the input data\n1179:         uint256[] memory lastIds = new uint256[](2);\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1181:             // Check for the unit type to be component / agent only\n1182:             if (unitTypes[i] > 1) {\n1183:                 revert Overflow(unitTypes[i], 1);\n1184:             }\n1185: \n1186:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1188:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1189:             }\n1190:             lastIds[unitTypes[i]] = unitIds[i];\n1191: \n1192:             // Check the component / agent Id ownership\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1194:             if (unitOwner != account) {\n1195:                 revert OwnerOnly(unitOwner, account);\n1196:             }\n1197:         }\n1198: \n1199:         // Get the current epoch counter\n1200:         uint256 curEpoch = epochCounter;\n1201: \n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n30:     function getSupplyCapForYear(uint256 numYears) public pure returns (uint256 supplyCap) {\n31:         // For the first 10 years the supply caps are pre-defined\n32:         if (numYears < 10) {\n33:             uint96[10] memory supplyCaps = [\n34:                 529_659_000_00e16,\n35:                 569_913_084_00e16,\n36:                 641_152_219_50e16,\n37:                 708_500_141_72e16,\n38:                 771_039_876_00e16,\n39:                 828_233_282_97e16,\n40:                 879_860_040_11e16,\n41:                 925_948_139_65e16,\n42:                 966_706_331_40e16,\n43:                 1_000_000_000e18\n44:             ];\n45:             supplyCap = supplyCaps[numYears];\n46:         } else {\n47:             // Number of years after ten years have passed (including ongoing ones)\n48:             numYears -= 9;\n49:             // Max cap for the first 10 years\n50:             supplyCap = 1_000_000_000e18;\n51:             // After that the inflation is 2% per year as defined by the OLAS contract\n52:             uint256 maxMintCapFraction = 2;\n53: \n54:             // Get the supply cap until the current year\n55:             for (uint256 i = 0; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L30-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n66:     function getInflationForYear(uint256 numYears) public pure returns (uint256 inflationAmount) {\n67:         // For the first 10 years the inflation caps are pre-defined as differences between next year cap and current year one\n68:         if (numYears < 10) {\n69:             // Initial OLAS allocation is 526_500_000_0e17\n70:             uint88[10] memory inflationAmounts = [\n71:                 3_159_000_00e16,\n72:                 40_254_084_00e16,\n73:                 71_239_135_50e16,\n74:                 67_347_922_22e16,\n75:                 62_539_734_28e16,\n76:                 57_193_406_97e16,\n77:                 51_626_757_14e16,\n78:                 46_088_099_54e16,\n79:                 40_758_191_75e16,\n80:                 33_293_668_60e16\n81:             ];\n82:             inflationAmount = inflationAmounts[numYears];\n83:         } else {\n84:             // Number of years after ten years have passed (including ongoing ones)\n85:             numYears -= 9;\n86:             // Max cap for the first 10 years\n87:             uint256 supplyCap = 1_000_000_000e18;\n88:             // After that the inflation is 2% per year as defined by the OLAS contract\n89:             uint256 maxMintCapFraction = 2;\n90: \n91:             // Get the supply cap until the year before the current year\n92:             for (uint256 i = 1; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L66-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n257:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable {\n258:         // Reentrancy guard\n259:         if (_locked > 1) {\n260:             revert ReentrancyGuard();\n261:         }\n262:         _locked = 2;\n263: \n264:         // Check that the amount donated has at least a practical minimal value\n265:         if (msg.value < minAcceptedETH) {\n266:             revert LowerThan(msg.value, minAcceptedETH);\n267:         }\n268: \n269:         // Check for the same length of arrays\n270:         uint256 numServices = serviceIds.length;\n271:         if (amounts.length != numServices) {\n272:             revert WrongArrayLength(numServices, amounts.length);\n273:         }\n274: \n275:         uint256 totalAmount;\n276:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L257-L276"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "External call `recipient` may consume all transaction gas (gas griefing)",
      "description": "There is no limit specified on the amount of gas used, so the recipient can use up all of the transaction's gas, causing it to revert. Use `addr.call{ gas: <amount>}(\"\")` or [this](https://github.com/nomad-xyz/ExcessivelySafeCall) library instead.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n118:             (bool success, ) = multisig.call(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L118-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n339:                 (success, ) = to.call{value: tokenAmount}(\"\");\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L339-L339"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n406:             (success, ) = account.call{value: accountRewards}(\"\");\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L406-L406"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Missing checks in constructor",
      "description": "There are some missing checks in these functions, and this could lead to unexpected scenarios. Consider always adding a sanity check for state variables.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit _name, _symbol,  are not checked\n132:     constructor(address _token, string memory _name, string memory _symbol)\n133:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L132-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit _baseURI,  are not checked\n20:     constructor(string memory _name, string memory _symbol, string memory _baseURI, address _componentRegistry)\n21:         UnitRegistry(UnitType.Agent)\n22:         ERC721(_name, _symbol)\n23:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L20-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit _baseURI,  are not checked\n16:     constructor(string memory _name, string memory _symbol, string memory _baseURI)\n17:         UnitRegistry(UnitType.Component)\n18:         ERC721(_name, _symbol)\n19:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L16-L19"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Division before multiplication can lead to precision errors",
      "description": "Because Solidity integer division may truncate, it is often preferable to do multiplication before division to prevent precision loss.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n231:             uint64 tStep = (lastCheckpoint / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n433:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L433-L433"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n487:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L487-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n692:         uint64 tStep = (lastPoint.ts / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L692-L692"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Double type casts create complexity within the code",
      "description": "Double type casting should be avoided in Solidity contracts to prevent unintended consequences and ensure accurate data representation. Performing multiple type casts in succession can lead to unexpected truncation, rounding errors, or loss of precision, potentially compromising the contract's functionality and reliability. Furthermore, double type casting can make the code less readable and harder to maintain, increasing the likelihood of errors and misunderstandings during development and debugging. To ensure precise and consistent data handling, developers should use appropriate data types and avoid unnecessary or excessive type casting, promoting a more robust and dependable contract execution. ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n194:         targetSelectorChainId |= uint256(uint32(bytes4(data))) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L194-L194"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L478-L478"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n586:         targetSelectorChainId |= uint256(uint32(selector)) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L586-L586"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n190:                 uOld.bias = uOld.slope * int128(uint128(oldLocked.endTime - uint64(block.timestamp)));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L190-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n194:                 uNew.bias = uNew.slope * int128(uint128(newLocked.endTime - uint64(block.timestamp)));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L194-L194"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n245:                 lastPoint.bias -= lastPoint.slope * int128(int64(tStep - lastCheckpoint));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L245-L245"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n599:                 vBalance = uint256(int256(uPoint.bias));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L599-L599"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n680:         uPoint.bias -= uPoint.slope * int128(int64(uint64(blockTime)) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L680-L680"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n682:             balance = uint256(uint128(uPoint.bias));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L682-L682"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n713:             vSupply = uint256(uint128(lastPoint.bias));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L713-L713"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "`external` calls in an un-bounded loop may result in a DOS",
      "description": "Consider limiting the number of iterations in loops that make external calls",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L708-L708"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L709-L709"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L710-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n717:                     getUnitIdsOfService(IServiceRegistry.UnitType(unitType), serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L717-L717"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L765-L765"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n810:             if (!IServiceRegistry(serviceRegistry).exists(serviceIds[i])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L810-L810"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1105-L1105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1123-L1123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1175-L1175"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1193-L1193"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Constant decimal values",
      "description": "The use of fixed decimal values such as 1e18 or 1e8 in Solidity contracts can lead to inaccuracies, bugs, and vulnerabilities, particularly when interacting with tokens having different decimal configurations.Not all ERC20 tokens follow the standard 18 decimal places, and assumptions about decimal places can lead to miscalculations.\nAlways retrieve and use the `decimals()` function from the token contract itself when performing calculations involving token amounts.This ensures that your contract correctly handles tokens with any number of decimal places, mitigating the risk of numerical errors or under / overflows that could jeopardize contract integrity and user funds. ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n258:                 lastPoint.blockNumber = initialPoint.blockNumber + uint64((block_slope * uint256(tStep - initialPoint.ts)) / 1e18);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L258-L258"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n89:                 priceLP = (reserve1 * 1e18) / totalSupply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n89:                 priceLP = (reserve1 * 1e18) / totalSupply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L89-L89"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "`image_data` should be used for raw svg",
      "description": "The metadata `image` field is for [urls](https://docs.opensea.io/docs/metadata-standards#metadata-structure). See [this](https://opensea.io/collection/neotokyo-outer-citizens) NFT project which properly uses the `image_data` key, and renders nicely on OpenSea.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n135:     function tokenURI(uint256 unitId) public view virtual override returns (string memory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L135-L135"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Initialization can be front-run",
      "description": "The `initialize()` functions are not protected by a modifier, which allow attackers to call this function once the contract is deployed through the proxy. Consider adding modifiers to protect this function or create a contract that both deploy the project and initialize it on the same transaction.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n264:     function initializeTokenomics(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L264-L264"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "`internal` Function calls within for loops",
      "description": "Making function calls or external calls within loops in Solidity can lead to inefficient gas usage, potential bottlenecks, and increased vulnerability to attacks. Each function call or external call consumes gas, and when executed within a loop, the gas cost multiplies, potentially causing the transaction to run out of gas or exceed block gas limits. This can result in transaction failure or unpredictable behavior.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n244:             _verifyData(target, payload, chainId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n373:                 _processBridgeData(callDatas[i], bridgeMediatorL2, chainId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L373-L373"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n376:                 _verifyData(targets[i], callDatas[i], block.chainid);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L376-L376"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n213:             components[i] = _getSubComponents(subcomponentsFromType, unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L213-L213"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n739:                             _finalizeIncentivesForUnitId(lastEpoch, unitType, serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L739-L739"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n739:                             _finalizeIncentivesForUnitId(lastEpoch, unitType, serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L739-L739"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n739:                             _finalizeIncentivesForUnitId(lastEpoch, unitType, serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L739-L739"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1139-L1139"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Loss of precision",
      "description": "Division by large numbers may result in the result being zero, due to solidity not supporting fractions. Consider requiring a minimum amount for the numerator to ensure that it is always larger than the denominator",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n101:         uint256 numYears = (block.timestamp - timeLaunch) / oneYear;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n189:                 uOld.slope = int128(oldLocked.amount) / IMAXTIME;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L189-L189"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n193:                 uNew.slope = int128(newLocked.amount) / IMAXTIME;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L193-L193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n231:             uint64 tStep = (lastCheckpoint / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n433:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L433-L433"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n487:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L487-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n692:         uint64 tStep = (lastPoint.ts / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L692-L692"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n329:         uint256 _inflationPerSecond = getInflationForYear(0) / zeroYearSecondsLeft;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L329-L329"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n675:             totalIncentives = mapUnitIncentives[unitType][unitId].topUp + totalIncentives / sumUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L675-L675"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1224:                     topUp += totalIncentives / sumUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1224-L1224"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Missing contract-existence checks before low-level calls",
      "description": "Low-level calls return success if there is no code present at the specified address. In addition to the zero-address checks, add a check to verify that `<address>.code.length > 0`",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n161:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L160-L161"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n161:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L160-L161"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n118:             (bool success, ) = multisig.call(payload);\n119:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L118-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n48:         (bool success, ) = tokenomics.delegatecall(tokenomicsData);\n49:         if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L48-L49"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "NFT doesn't handle hard forks",
      "description": "When there are hard forks, users often have to go through [many hoops](https://twitter.com/elerium115/status/1558471934924431363) to ensure that they control ownership on every fork. Consider adding `require(1 == chain.chainId)`, or the chain ID of whichever chain you prefer, to the functions below, or at least include the chain ID in the URI, so that there is no confusion about which chain is the owner of the NFT.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n135:     function tokenURI(uint256 unitId) public view virtual override returns (string memory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L135-L135"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Consider using OpenZeppelin’s SafeCast library to prevent unexpected overflows when casting from various type int/uint values",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `bridgeMediatorL2ChainId` is getting converted from `uint256` to `uint160`\n364:             address bridgeMediatorL2 = address(uint160(bridgeMediatorL2ChainId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L364-L364"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `bridgeMediatorL2ChainId` is getting converted from `uint256` to `uint160`\n603:         bridgeMediatorL2 = address(uint160(bridgeMediatorL2ChainId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L603-L603"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `supply` is getting converted from `uint256` to `uint128`\n321:         _checkpoint(address(0), LockedBalance(0, 0), LockedBalance(0, 0), uint128(supply));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L321-L321"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `amount` is getting converted from `uint256` to `uint128`\n350:             lockedBalance.amount += uint128(amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L350-L350"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `unlockTime` is getting converted from `uint256` to `uint64`\n353:             lockedBalance.endTime = uint64(unlockTime);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L353-L353"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `supplyAfter` is getting converted from `uint256` to `uint128`\n361:         _checkpoint(account, oldLocked, lockedBalance, uint128(supplyAfter));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L361-L361"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `supplyAfter` is getting converted from `uint256` to `uint128`\n528:         _checkpoint(msg.sender, lockedBalance, LockedBalance(0, 0), uint128(supplyAfter));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L528-L528"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `ts` is getting converted from `uint64` to `int64`\n597:             uPoint.bias -= uPoint.slope * int128(int64(ts) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L597-L597"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `blockTime` is getting converted from `uint256` to `uint64`\n680:         uPoint.bias -= uPoint.slope * int128(int64(uint64(blockTime)) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L680-L680"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `tStep` is getting converted from `uint64` to `int64`\n704:             lastPoint.bias -= lastPoint.slope * int128(int64(tStep) - int64(lastPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L704-L704"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `ts` is getting converted from `uint256` to `uint64`\n740:         return _supplyLockedAt(lastPoint, uint64(ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L740-L740"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `blockTime` is getting converted from `uint256` to `uint64`\n755:         return _supplyLockedAt(sPoint, uint64(blockTime));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L755-L755"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `unitId` is getting converted from `uint32` to `uint256`\n60:             (subComponentIds, ) = IRegistry(componentRegistry).getLocalSubComponents(uint256(unitId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L60-L60"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `unitId` is getting converted from `uint32` to `uint256`\n62:             subComponentIds = mapSubComponents[uint256(unitId)];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L62-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `componentId` is getting converted from `uint32` to `uint256`\n44:         subComponentIds = mapSubComponents[uint256(componentId)];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is getting converted from `uint256` to `uint32`\n75:         _checkDependencies(dependencies, uint32(unitId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is getting converted from `uint256` to `uint32`\n102:             addSubComponentIds[numSubComponents] = uint32(unitId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L102-L102"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is getting converted from `uint256` to `uint256`\n185:         subComponentIds = mapSubComponents[uint256(unitId)];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L185-L185"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `priceLP` is getting converted from `uint256` to `uint160`\n232:         mapBondProducts[productId] = Product(uint160(priceLP), uint32(vesting), token, uint96(supply));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `vesting` is getting converted from `uint256` to `uint32`\n232:         mapBondProducts[productId] = Product(uint160(priceLP), uint32(vesting), token, uint96(supply));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `supply` is getting converted from `uint256` to `uint96`\n232:         mapBondProducts[productId] = Product(uint160(priceLP), uint32(vesting), token, uint96(supply));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `supply` is getting converted from `uint256` to `uint96`\n329:         product.supply = uint96(supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L329-L329"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `payout` is getting converted from `uint256` to `uint96`\n333:         mapUserBonds[bondId] = Bond(msg.sender, uint96(payout), uint32(maturity), uint32(productId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L333-L333"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `maturity` is getting converted from `uint256` to `uint32`\n333:         mapUserBonds[bondId] = Bond(msg.sender, uint96(payout), uint32(maturity), uint32(productId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L333-L333"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `productId` is getting converted from `uint256` to `uint32`\n333:         mapUserBonds[bondId] = Bond(msg.sender, uint96(payout), uint32(maturity), uint32(productId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L333-L333"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n296:         if (uint32(_epochLen) < MIN_EPOCH_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L296-L296"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n301:         if (uint32(_epochLen) > ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L301-L301"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n311:         epochLen = uint32(_epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L311-L311"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_inflationPerSecond` is getting converted from `uint256` to `uint96`\n330:         inflationPerSecond = uint96(_inflationPerSecond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L330-L330"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_timeLaunch` is getting converted from `uint256` to `uint32`\n331:         timeLaunch = uint32(_timeLaunch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L331-L331"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBondFraction` is getting converted from `uint256` to `uint8`\n361:         tp.epochPoint.maxBondFraction = uint8(_maxBondFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L361-L361"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBond` is getting converted from `uint256` to `uint96`\n368:         maxBond = uint96(_maxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L368-L368"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBond` is getting converted from `uint256` to `uint96`\n369:         effectiveBond = uint96(_maxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L369-L369"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_devsPerCapital` is getting converted from `uint256` to `uint72`\n511:         if (uint72(_devsPerCapital) > MIN_PARAM_VALUE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L511-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_devsPerCapital` is getting converted from `uint256` to `uint72`\n512:             devsPerCapital = uint72(_devsPerCapital);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L512-L512"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_codePerDev` is getting converted from `uint256` to `uint72`\n519:         if (uint72(_codePerDev) > MIN_PARAM_VALUE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_codePerDev` is getting converted from `uint256` to `uint72`\n520:             codePerDev = uint72(_codePerDev);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L520-L520"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epsilonRate` is getting converted from `uint256` to `uint64`\n530:             epsilonRate = uint64(_epsilonRate);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L530-L530"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n536:         if (uint32(_epochLen) >= MIN_EPOCH_LENGTH && uint32(_epochLen) <= ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L536-L536"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n536:         if (uint32(_epochLen) >= MIN_EPOCH_LENGTH && uint32(_epochLen) <= ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L536-L536"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n537:             nextEpochLen = uint32(_epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L537-L537"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_veOLASThreshold` is getting converted from `uint256` to `uint96`\n543:         if (uint96(_veOLASThreshold) > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L543-L543"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_veOLASThreshold` is getting converted from `uint256` to `uint96`\n544:             nextVeOLASThreshold = uint96(_veOLASThreshold);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L544-L544"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_rewardComponentFraction` is getting converted from `uint256` to `uint8`\n589:         tp.unitPoints[0].rewardUnitFraction = uint8(_rewardComponentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L589-L589"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_rewardAgentFraction` is getting converted from `uint256` to `uint8`\n590:         tp.unitPoints[1].rewardUnitFraction = uint8(_rewardAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L590-L590"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBondFraction` is getting converted from `uint256` to `uint8`\n594:         tp.epochPoint.maxBondFraction = uint8(_maxBondFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L594-L594"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_topUpComponentFraction` is getting converted from `uint256` to `uint8`\n595:         tp.unitPoints[0].topUpUnitFraction = uint8(_topUpComponentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L595-L595"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_topUpAgentFraction` is getting converted from `uint256` to `uint8`\n596:         tp.unitPoints[1].topUpUnitFraction = uint8(_topUpAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L596-L596"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `eBond` is getting converted from `uint256` to `uint96`\n621:             effectiveBond = uint96(eBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L621-L621"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `eBond` is getting converted from `uint256` to `uint96`\n642:         effectiveBond = uint96(eBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L642-L642"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `totalIncentives` is getting converted from `uint256` to `uint96`\n660:             mapUnitIncentives[unitType][unitId].reward = uint96(totalIncentives);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L660-L660"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `totalIncentives` is getting converted from `uint256` to `uint96`\n676:             mapUnitIncentives[unitType][unitId].topUp = uint96(totalIncentives);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L676-L676"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curEpoch` is getting converted from `uint256` to `uint32`\n733:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L733-L733"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curEpoch` is getting converted from `uint256` to `uint32`\n741:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L741-L741"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `donationETH` is getting converted from `uint256` to `uint96`\n818:         mapEpochTokenomics[curEpoch].epochPoint.totalDonationsETH = uint96(donationETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L818-L818"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curInflationPerSecond` is getting converted from `uint256` to `uint96`\n939:             inflationPerSecond = uint96(curInflationPerSecond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L939-L939"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `numYears` is getting converted from `uint256` to `uint8`\n940:             currentYear = uint8(numYears);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L940-L940"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `inflationPerEpoch` is getting converted from `uint256` to `uint96`\n950:         tp.epochPoint.totalTopUpsOLAS = uint96(inflationPerEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L950-L950"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curEpochLen` is getting converted from `uint256` to `uint32`\n991:                 epochLen = uint32(curEpochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L991-L991"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curMaxBond` is getting converted from `uint256` to `uint96`\n1025:             maxBond = uint96(curMaxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1025-L1025"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curMaxBond` is getting converted from `uint256` to `uint96`\n1032:             maxBond = uint96(curMaxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1032-L1032"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curMaxBond` is getting converted from `uint256` to `uint96`\n1038:         effectiveBond = uint96(curMaxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1038-L1038"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `idf` is getting converted from `uint256` to `uint64`\n1044:             nextEpochPoint.epochPoint.idf = uint64(idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1044-L1044"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amount` is getting converted from `uint256` to `uint96`\n131:         ETHOwned = uint96(amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L131-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `_minAcceptedETH` is getting converted from `uint256` to `uint96`\n198:         minAcceptedETH = uint96(_minAcceptedETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L198-L198"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `donationETH` is getting converted from `uint256` to `uint96`\n294:         ETHFromServices = uint96(donationETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L294-L294"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amountOwned` is getting converted from `uint256` to `uint96`\n336:                 ETHOwned = uint96(amountOwned);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L336-L336"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amountETHFromServices` is getting converted from `uint256` to `uint96`\n404:             ETHFromServices = uint96(amountETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amountETHOwned` is getting converted from `uint256` to `uint96`\n450:                 ETHOwned = uint96(amountETHOwned);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L450-L450"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amountETHFromServices` is getting converted from `uint256` to `uint96`\n451:                 ETHFromServices = uint96(amountETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L451-L451"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Setters should have initial value check",
      "description": "Setters should have initial value check to prevent assigning wrong value to the variable. Assginment of wrong value can lead to unexpected behavior of the contract.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n170:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L171"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Int casting `block.timestamp` can reduce the lifespan of a contract",
      "description": "Consider removing casting to ensure future functionality.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n139:         mapSupplyPoints[0] = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n190:                 uOld.bias = uOld.slope * int128(uint128(oldLocked.endTime - uint64(block.timestamp)));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L190-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n194:                 uNew.bias = uNew.slope * int128(uint128(newLocked.endTime - uint64(block.timestamp)));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L194-L194"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n215:             lastPoint = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n241:                     tStep = uint64(block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L241-L241"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n312:             uNew.ts = uint64(block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L312-L312"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n634:         return _balanceOfLocked(account, uint64(block.timestamp));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L634-L634"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n334:         mapEpochTokenomics[0].epochPoint.endTime = uint32(block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L334-L334"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1005:         tp.epochPoint.endTime = uint32(block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1005-L1005"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Unsafe downcast",
      "description": "When a type is downcast to a smaller type, the higher order bits are truncated, effectively applying a modulo to the original value. Without any other checks, this wrapping will lead to unexpected behavior and bugs",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit converting from `uint256` to `uint64`\n139:         mapSupplyPoints[0] = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit converting from `uint256` to `uint64`\n215:             lastPoint = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit converting from `uint256` to `uint64`\n266:                     lastPoint.blockNumber = uint64(block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L266-L266"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit converting from `uint256` to `uint64`\n313:             uNew.blockNumber = uint64(block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L313-L313"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `supply` is getting converted from `uint256` to `uint128`\n321:         _checkpoint(address(0), LockedBalance(0, 0), LockedBalance(0, 0), uint128(supply));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L321-L321"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `supplyAfter` is getting converted from `uint256` to `uint128`\n361:         _checkpoint(account, oldLocked, lockedBalance, uint128(supplyAfter));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L361-L361"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `supplyAfter` is getting converted from `uint256` to `uint128`\n528:         _checkpoint(msg.sender, lockedBalance, LockedBalance(0, 0), uint128(supplyAfter));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L528-L528"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `blockTime` is getting converted from `uint256` to `uint64`\n680:         uPoint.bias -= uPoint.slope * int128(int64(uint64(blockTime)) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L680-L680"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `ts` is getting converted from `uint256` to `uint64`\n740:         return _supplyLockedAt(lastPoint, uint64(ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L740-L740"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `blockTime` is getting converted from `uint256` to `uint64`\n755:         return _supplyLockedAt(sPoint, uint64(blockTime));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L755-L755"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is getting converted from `uint256` to `uint32`\n75:         _checkDependencies(dependencies, uint32(unitId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is getting converted from `uint256` to `uint32`\n102:             addSubComponentIds[numSubComponents] = uint32(unitId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L102-L102"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit converting from `uint256` to `uint32`\n203:         uint32 numUnits = uint32(unitIds.length);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L203-L203"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit converting from `uint256` to `uint32`\n214:             numComponents[i] = uint32(components[i].length);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `productId` is getting converted from `uint256` to `uint32`\n333:         mapUserBonds[bondId] = Bond(msg.sender, uint96(payout), uint32(maturity), uint32(productId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L333-L333"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n296:         if (uint32(_epochLen) < MIN_EPOCH_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L296-L296"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n301:         if (uint32(_epochLen) > ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L301-L301"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n311:         epochLen = uint32(_epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L311-L311"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_inflationPerSecond` is getting converted from `uint256` to `uint96`\n330:         inflationPerSecond = uint96(_inflationPerSecond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L330-L330"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_timeLaunch` is getting converted from `uint256` to `uint32`\n331:         timeLaunch = uint32(_timeLaunch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L331-L331"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBondFraction` is getting converted from `uint256` to `uint8`\n361:         tp.epochPoint.maxBondFraction = uint8(_maxBondFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L361-L361"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBond` is getting converted from `uint256` to `uint96`\n368:         maxBond = uint96(_maxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L368-L368"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBond` is getting converted from `uint256` to `uint96`\n369:         effectiveBond = uint96(_maxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L369-L369"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_devsPerCapital` is getting converted from `uint256` to `uint72`\n511:         if (uint72(_devsPerCapital) > MIN_PARAM_VALUE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L511-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_devsPerCapital` is getting converted from `uint256` to `uint72`\n512:             devsPerCapital = uint72(_devsPerCapital);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L512-L512"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_codePerDev` is getting converted from `uint256` to `uint72`\n519:         if (uint72(_codePerDev) > MIN_PARAM_VALUE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_codePerDev` is getting converted from `uint256` to `uint72`\n520:             codePerDev = uint72(_codePerDev);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L520-L520"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n536:         if (uint32(_epochLen) >= MIN_EPOCH_LENGTH && uint32(_epochLen) <= ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L536-L536"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n536:         if (uint32(_epochLen) >= MIN_EPOCH_LENGTH && uint32(_epochLen) <= ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L536-L536"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_epochLen` is getting converted from `uint256` to `uint32`\n537:             nextEpochLen = uint32(_epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L537-L537"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_veOLASThreshold` is getting converted from `uint256` to `uint96`\n543:         if (uint96(_veOLASThreshold) > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L543-L543"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_veOLASThreshold` is getting converted from `uint256` to `uint96`\n544:             nextVeOLASThreshold = uint96(_veOLASThreshold);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L544-L544"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_rewardComponentFraction` is getting converted from `uint256` to `uint8`\n589:         tp.unitPoints[0].rewardUnitFraction = uint8(_rewardComponentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L589-L589"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_rewardAgentFraction` is getting converted from `uint256` to `uint8`\n590:         tp.unitPoints[1].rewardUnitFraction = uint8(_rewardAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L590-L590"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_maxBondFraction` is getting converted from `uint256` to `uint8`\n594:         tp.epochPoint.maxBondFraction = uint8(_maxBondFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L594-L594"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_topUpComponentFraction` is getting converted from `uint256` to `uint8`\n595:         tp.unitPoints[0].topUpUnitFraction = uint8(_topUpComponentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L595-L595"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `_topUpAgentFraction` is getting converted from `uint256` to `uint8`\n596:         tp.unitPoints[1].topUpUnitFraction = uint8(_topUpAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L596-L596"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `donationETH` is getting converted from `uint256` to `uint96`\n818:         mapEpochTokenomics[curEpoch].epochPoint.totalDonationsETH = uint96(donationETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L818-L818"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit converting from `uint256` to `uint32`\n824:         lastDonationBlockNumber = uint32(block.number);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L824-L824"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `curInflationPerSecond` is getting converted from `uint256` to `uint96`\n939:             inflationPerSecond = uint96(curInflationPerSecond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L939-L939"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `inflationPerEpoch` is getting converted from `uint256` to `uint96`\n950:         tp.epochPoint.totalTopUpsOLAS = uint96(inflationPerEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L950-L950"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `idf` is getting converted from `uint256` to `uint64`\n1044:             nextEpochPoint.epochPoint.idf = uint64(idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1044-L1044"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit converting from `uint256` to `uint96`\n112:         ETHOwned = uint96(address(this).balance);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amount` is getting converted from `uint256` to `uint96`\n131:         ETHOwned = uint96(amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L131-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `donationETH` is getting converted from `uint256` to `uint96`\n294:         ETHFromServices = uint96(donationETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L294-L294"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `amountETHOwned` is getting converted from `uint256` to `uint96`\n450:                 ETHOwned = uint96(amountETHOwned);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L450-L450"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Unsafe conversion from unsigned to signed values",
      "description": "Solidity follows [two's complement](https://en.wikipedia.org/wiki/Two%27s_complement) rules for its integers, meaning that the most significant bit for signed integers is used to denote the sign, and converting between the two requires inverting all of the bits and adding one. Because of this, casting an unsigned integer to a signed one may result in a change of the sign and or magnitude of the value. For example, `int8(type(uint8).max)` is not equal to `type(int8).max`, but is equal to `-1`. `type(uint8).max` in binary is `11111111`, which if cast to a signed value, means the first binary `1` indicates a negative value, and the binary `1`s, invert to all zeroes, and when one is added, it becomes one, but negative, and therefore the decimal value of binary `11111111` is `-1`.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `ts` is getting converted from `uint64` to `int64`\n597:             uPoint.bias -= uPoint.slope * int128(int64(ts) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L597-L597"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Consider implementing two-step procedure for updating protocol addresses",
      "description": "A copy-paste error or a typo may end up bricking protocol functionality, or sending tokens to an address with no known private key. Consider implementing a two-step procedure for updating protocol addresses, where the recipient is set as pending, and must 'accept' the assignment by making an affirmative call. A straight forward way of doing this would be to have the target contracts implement [EIP-165](https://eips.ethereum.org/EIPS/eip-165), and to have the 'set' functions ensure that the recipient is of the right interface type.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n43:     function changeOwner(address newOwner) external {\n44:         if (msg.sender != owner) {\n45:             revert ManagerOnly(msg.sender, owner);\n46:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L43-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n58:     function changeMinter(address newMinter) external {\n59:         if (msg.sender != owner) {\n60:             revert ManagerOnly(msg.sender, owner);\n61:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L58-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n30:     function changeOwner(address newOwner) external {\n31:         // Only the contract owner is allowed to change the owner\n32:         if (msg.sender != owner) {\n33:             revert OwnerOnly(msg.sender, owner);\n34:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L30-L34"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n81:     function changeRootGovernor(address newRootGovernor) external {\n82:         // Check if the change is authorized by the previous governor itself\n83:         // This is possible only if all the checks in the message process function pass and the contract calls itself\n84:         if (msg.sender != address(this)) {\n85:             revert SelfCallOnly(msg.sender, address(this));\n86:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L81-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n81:     function changeForeignGovernor(address newForeignGovernor) external {\n82:         // Check if the change is authorized by the previous governor itself\n83:         // This is possible only if all the checks in the message process function pass and the contract calls itself\n84:         if (msg.sender != address(this)) {\n85:             revert SelfCallOnly(msg.sender, address(this));\n86:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L81-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n154:     function changeGovernor(address newGovernor) external {\n155:         if (msg.sender != owner) {\n156:             revert OwnerOnly(msg.sender, owner);\n157:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L154-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n20:     function changeOwner(address newOwner) external virtual {\n21:         // Check for the ownership\n22:         if (msg.sender != owner) {\n23:             revert OwnerOnly(msg.sender, owner);\n24:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L20-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n37:     function changeOwner(address newOwner) external virtual {\n38:         // Check for the ownership\n39:         if (msg.sender != owner) {\n40:             revert OwnerOnly(msg.sender, owner);\n41:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L37-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n54:     function changeManager(address newManager) external virtual {\n55:         if (msg.sender != owner) {\n56:             revert OwnerOnly(msg.sender, owner);\n57:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L54-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n123:     function changeOwner(address newOwner) external {\n124:         // Check for the contract ownership\n125:         if (msg.sender != owner) {\n126:             revert OwnerOnly(msg.sender, owner);\n127:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L123-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n144:         // Check for the contract ownership\n145:         if (msg.sender != owner) {\n146:             revert OwnerOnly(msg.sender, owner);\n147:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n163:     function changeBondCalculator(address _bondCalculator) external {\n164:         // Check for the contract ownership\n165:         if (msg.sender != owner) {\n166:             revert OwnerOnly(msg.sender, owner);\n167:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n46:     function changeOwner(address newOwner) external {\n47:         // Check for the contract ownership\n48:         if (msg.sender != owner) {\n49:             revert OwnerOnly(msg.sender, owner);\n50:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L46-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n65:         // Check for the contract ownership\n66:         if (msg.sender != owner) {\n67:             revert OwnerOnly(msg.sender, owner);\n68:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n36:     function changeOwner(address newOwner) external {\n37:         // Check for the contract ownership\n38:         if (msg.sender != owner) {\n39:             revert OwnerOnly(msg.sender, owner);\n40:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L36-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n404:     function changeOwner(address newOwner) external {\n405:         // Check for the contract ownership\n406:         if (msg.sender != owner) {\n407:             revert OwnerOnly(msg.sender, owner);\n408:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L404-L408"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n424:         // Check for the contract ownership\n425:         if (msg.sender != owner) {\n426:             revert OwnerOnly(msg.sender, owner);\n427:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L427"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n451:         // Check for the contract ownership\n452:         if (msg.sender != owner) {\n453:             revert OwnerOnly(msg.sender, owner);\n454:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L454"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n475:         // Check for the contract ownership\n476:         if (msg.sender != owner) {\n477:             revert OwnerOnly(msg.sender, owner);\n478:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L478"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n137:     function changeOwner(address newOwner) external {\n138:         // Check for the contract ownership\n139:         if (msg.sender != owner) {\n140:             revert OwnerOnly(msg.sender, owner);\n141:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L137-L141"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n157:         // Check for the contract ownership\n158:         if (msg.sender != owner) {\n159:             revert OwnerOnly(msg.sender, owner);\n160:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L160"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Consider using descriptive `constant`s when passing zero as a function argument",
      "description": "Passing zero as a function argument can sometimes result in a security issue (e.g. passing zero as the slippage parameter). Consider using a `constant` variable with a descriptive name, so it's clear that the argument is intentionally being used, and for the right reasons.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 2 starting from left\n213:         PointVoting memory uPoint = getUserPoint(account, 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L213-L213"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 2 starting from left\n233:         PointVoting memory uPoint = getUserPoint(account, 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L233-L233"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Functions calling contracts/addresses with transfer hooks are missing reentrancy guards",
      "description": "Even if the function follows the best practice of check-effects-interaction, not using a reentrancy guard when there may be transfer hooks will open the users of this protocol up to [read-only reentrancies](https://chainsecurity.com/curve-lp-oracle-manipulation-post-mortem/) with no way to protect against it, except by block-listing the whole protocol.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit function `_processMessageFromRoot()` is not protected against reentrancy\n79:         bool success = IERC20(childToken).transfer(to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit function `_deposit()` is not protected against reentrancy\n102:         bool success = IERC20(childToken).transferFrom(msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L102-L102"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit function `_withdraw()` is not protected against reentrancy\n98:         bool success = IERC20(rootToken).transferFrom(msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit function `_depositFor()` is not protected against reentrancy\n364:             IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L364-L364"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit function `withdraw()` is not protected against reentrancy\n534:         IERC20(token).transfer(msg.sender, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L534-L534"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Code does not follow the best practice of check-effects-interaction",
      "description": "Code should follow the best-practice of [check-effects-interaction](https://blockchain-academy.hs-mittweida.de/courses/solidity-coding-beginners-to-intermediate/lessons/solidity-11-coding-patterns/topic/checks-effects-interactions/), where state variables are updated before any external calls are made. Doing so prevents a large class of reentrancy bugs.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the function `push()` is called before the following assignment\n270:                     mapSupplyPoints[curNumPoint] = lastPoint;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L270-L270"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the function `push()` is called before the following assignment\n303:                 mapSlopeChanges[oldLocked.endTime] = oldDSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L303-L303"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the function `push()` is called before the following assignment\n308:                 mapSlopeChanges[newLocked.endTime] = newDSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L308-L308"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the function `transfer()` is called before the following assignment\n523:             supply = supplyAfter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L523-L523"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit the function `refundFromBondProgram()` is called before the following assignment\n264:                 delete mapBondProducts[productId];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L264-L264"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit the function `depositTokenForOLAS()` is called before the following assignment\n341:             delete mapBondProducts[productId];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L341-L341"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit the function `transfer()` is called before the following assignment\n379:             delete mapUserBonds[bondIds[i]];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L379-L379"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit the function `trackServiceDonations()` is called before the following assignment\n300:         _locked = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L300-L300"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "prevent re-setting a state variable with the same value",
      "description": "Not only is wasteful in terms of gas, but this is especially problematic when an event is emitted and the old and new values set are the same, as listeners might not expect this kind of scenario.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n170:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n163:     function changeBondCalculator(address _bondCalculator) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L163"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L423"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L450"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L474"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L497"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n562:     function changeIncentiveFractions(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L156"
          ]
        }
      ]
    },
    {
      "severity": "Low",
      "title": "Missing contract-existence checks before yul `call()`",
      "description": "Low-level calls return success if there is no code present at the specified address. In addition to the zero-address checks, add a check to verify that `extcodesize()` is non-zero.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n56:         assembly {\n57:             let tokenomics := sload(PROXY_TOKENOMICS)\n58:             // Otherwise continue with the delegatecall to the tokenomics implementation\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L56-L58"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "State variables declarations should have NatSpec descriptions",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n24:     uint256 public constant tenYearSupplyCap = 1_000_000_000e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n26:     uint256 public constant maxMintCapFraction = 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n28:     uint256 public immutable timeLaunch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n31:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n33:     address public minter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n99:     uint64 internal constant WEEK = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n105:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n108:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n110:     uint256 public supply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L110-L110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n112:     mapping(address => LockedBalance) public mapLockedBalances;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n115:     uint256 public totalNumPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n117:     mapping(uint256 => PointVoting) public mapSupplyPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n119:     mapping(address => PointVoting[]) public mapUserPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n121:     mapping(uint64 => int128) public mapSlopeChanges;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n124:     string public name;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n126:     string public symbol;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n132:     address public immutable ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n134:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n136:     string public constant name = \"Voting Escrow OLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n138:     string public constant symbol = \"veOLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L138-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n140:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n103:     bytes4 public constant PROCESS_MESSAGE_FROM_FOREIGN = bytes4(keccak256(bytes(\"processMessageFromForeign(bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n105:     bytes4 public constant SEND_MESSAGE_TO_CHILD = bytes4(keccak256(bytes(\"sendMessageToChild(address,bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n108:     uint256 public governorCheckProposalId = 88250008686885504216650933897987879122244685460173810624866685274624741477673;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n111:     uint256 public constant MIN_SCHEDULE_DATA_LENGTH = 260;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n113:     uint256 public constant SELECTOR_DATA_LENGTH = 4;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n115:     uint256 public constant MIN_GNOSIS_PAYLOAD_LENGTH = 292;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n117:     uint256 public constant MIN_POLYGON_PAYLOAD_LENGTH = 164;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n120:     address public immutable owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n122:     address public immutable multisig;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n125:     address public governor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n127:     uint8 public paused = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L127-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n130:     mapping(uint256 => bool) public mapAllowedTargetSelectorChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n132:     mapping(address => uint256) public mapBridgeMediatorL1L2ChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n55:     address public immutable fxChild;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n57:     address public rootGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L57-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n55:     address public immutable AMBContractProxyHome;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n57:     address public foreignGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L57-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n22:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n15:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n17:     address public manager;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n19:     string public baseURI;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n21:     uint256 public totalSupply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n23:     uint256 internal _locked = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L23-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n33:     string public constant CID_PREFIX = \"f01701220\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n27:     UnitType public immutable unitType;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n29:     mapping(uint256 => bytes32[]) public mapUnitIdHashes;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n31:     mapping(uint256 => uint32[]) public mapSubComponents;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n33:     mapping(uint256 => Unit) public mapUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n10:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n13:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n14:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n16:     bool public paused;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n13:     address public immutable agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n26:     bytes4 public constant GNOSIS_SAFE_SETUP_SELECTOR = 0xb63e800d;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n28:     uint256 public constant DEFAULT_DATA_LENGTH = 144;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n30:     address payable public immutable gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n32:     address public immutable gnosisSafeProxyFactory;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n56:     bytes32 public immutable proxyHash;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n75:     uint256 public constant MIN_VESTING = 1 days;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n77:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n80:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n83:     uint32 public bondCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n86:     uint32 public productCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n89:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n91:     address public tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n93:     address public treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n95:     address public bondCalculator;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n98:     mapping(uint256 => Bond) public mapUserBonds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n100:     mapping(uint256 => Product) public mapBondProducts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n18:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n20:     uint8 internal _locked;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n23:     address public tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L23-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n25:     address public treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n25:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n27:     mapping(address => bool) public mapBlacklistedDonators;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n22:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n24:     address public immutable tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n140:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n143:     uint96 public maxBond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n146:     address public olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L146-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n148:     uint96 public inflationPerSecond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L148-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n151:     address public treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L151-L151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n154:     uint96 public veOLASThreshold;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L154-L154"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n157:     address public depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L157-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n161:     uint96 public effectiveBond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L161-L161"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n164:     address public dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L164-L164"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n167:     uint72 public codePerDev;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n170:     uint8 public currentYear;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n172:     bytes1 public tokenomicsParametersUpdated;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L172-L172"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n174:     uint8 internal _locked;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L174-L174"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n177:     address public componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L177-L177"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n181:     uint64 public epsilonRate;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L181-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n184:     uint32 public epochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L184-L184"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n187:     address public agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L187-L187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n190:     uint96 public nextVeOLASThreshold;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L190-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n193:     address public serviceRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L193-L193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n196:     uint32 public epochCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L196-L196"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n199:     uint32 public timeLaunch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L199-L199"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n202:     uint32 public nextEpochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L202-L202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n205:     address public ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L205-L205"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n208:     uint72 public devsPerCapital;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L208-L208"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n211:     address public donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n214:     uint32 public lastDonationBlockNumber;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n217:     mapping(uint256 => uint256) public mapServiceAmounts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L217-L217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n219:     mapping(address => uint256) public mapOwnerRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L219-L219"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n221:     mapping(address => uint256) public mapOwnerTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L221-L221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n223:     mapping(uint256 => TokenomicsPoint) public mapEpochTokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L223-L223"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n225:     mapping(uint256 => mapping(uint256 => bool)) public mapNewUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n227:     mapping(address => bool) public mapNewOwners;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n229:     mapping(uint256 => mapping(uint256 => IncentiveBalances)) public mapUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L229-L229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n11:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n14:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n16:     uint256 public constant ONE_YEAR = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n18:     uint256 public constant MIN_EPOCH_LENGTH = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n20:     uint256 public constant MIN_PARAM_VALUE = 1e14;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n28:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n59:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L59-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n62:     uint96 public ETHFromServices;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L62-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n65:     address public olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n68:     uint96 public ETHOwned;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n71:     address public tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L71-L71"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n73:     uint96 public minAcceptedETH = 0.065 ether;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n76:     address public depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n78:     uint8 public paused = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n80:     uint8 internal _locked;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n83:     address public dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n86:     mapping(address => uint256) public mapTokenReserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n88:     mapping(address => bool) public mapEnabledTokens;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L88-L88"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Large or complicated code bases should implement invariant tests",
      "description": "Large code bases, or code with lots of inline-assembly, complicated math, or complicated interactions between multiple contracts, should implement [invariant fuzzing tests](https://medium.com/coinmonks/smart-contract-fuzzing-d9b88e0b0a05). Invariant fuzzers such as Echidna require the test writer to come up with invariants which should not be violated under any circumstances, and the fuzzer tests various inputs and function calls to ensure that the invariants always hold. Even code with 100% code coverage can still have bugs due to the order of the operations a user performs, and invariant fuzzers, with properly and extensively-written invariants, can close this testing gap significantly.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n@audit Should implement invariant tests\n1: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L1-L1"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Assembly blocks should have extensive comments",
      "description": "Assembly blocks are taking a lot more time to audit than normal Solidity code, and often have gotchas and side-effects that the Solidity versions of the same code do not. Consider adding more comments explaining what is being done in every step of the assembly code",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n216:             assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L216-L216"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n130:             assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n130:             assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n57:             assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L57-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n98:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n375:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L375-L375"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n396:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L396-L396"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n883:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L883-L883"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n44:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n56:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contract declarations should have NatSpec `@author` annotations",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n85: /// @notice This token supports the ERC20 interface specifications except for transfers and approvals.\n86: contract veOLAS is IErrors, IVotes, IERC20, IERC165 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L85-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n13: interface IVEOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n4: /// @dev Interface to process message across the bridge.\n5: interface IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n4: /// @dev Interface to the AMB Contract Proxy.\n5: interface IAMB {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n15: /// @title BridgedERC20 - Smart contract for bridged ERC20 token\n16: /// @dev Bridged token contract is owned by the bridge mediator contract, and thus the token representation from\n17: ///      another chain must be minted and burned solely by the bridge mediator contract.\n18: contract BridgedERC20 is ERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L15-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n4: /// @dev ERC20 token interface.\n5: interface IERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n4: /// @dev Errors.\n5: interface IErrors {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n5: interface IGnosisSafeProxyFactory {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n5: interface IGnosisSafe {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n4: /// @dev Errors.\n5: interface IErrorsRegistries {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n4: /// @dev Required interface for the component / agent manipulation.\n5: interface IRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n4: /// @dev DonatorBlacklist interface.\n5: interface IDonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n4: /// @dev Errors.\n5: interface IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n4: /// @dev Interface for generic bond calculator.\n5: interface IGenericBondCalculator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n4: /// @dev Required interface for the service registry.\n5: interface IServiceRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n4: /// @dev Generic token interface for IERC20 and IERC721 tokens.\n5: interface IToken {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n4: /// @dev Interface for tokenomics management.\n5: interface ITokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n4: /// @dev Interface for treasury management.\n5: interface ITreasury {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n5: interface IUniswapV2Pair {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n4: /// @dev Interface for voting escrow.\n5: interface IVotingEscrow {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L4-L5"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Avoid the use of sensitive terms",
      "description": "Use [alternative variants](https://www.zdnet.com/article/mysql-drops-master-slave-and-blacklist-whitelist-terminology/), e.g. allowlist/denylist instead of whitelist/blacklist",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n21: /// @dev Multisig proxy bytecode is not whitelisted.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n93:     /// @dev Multisig is not whitelisted.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n17: /// @title DonatorBlacklist - Smart contract for donator address blacklisting\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n20: contract DonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n22:     event DonatorBlacklistStatus(address indexed account, bool status);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n26:     // Mapping account address => blacklisting status\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n27:     mapping(address => bool) public mapBlacklistedDonators;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n29:     /// @dev DonatorBlacklist constructor.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n51:     /// @dev Controls donators blacklisting statuses.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n52:     /// @notice Donator is considered blacklisted if its status is set to true.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n54:     /// @param statuses Set blacklisting statuses.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n72:             // Set the account blacklisting status\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n73:             mapBlacklistedDonators[accounts[i]] = statuses[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n79:     /// @dev Gets account blacklisting status.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n81:     /// @return status Blacklisting status.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L81-L81"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n82:     function isDonatorBlacklisted(address account) external view returns (bool status) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L82-L82"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n83:         status = mapBlacklistedDonators[account];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n5: import \"./interfaces/IDonatorBlacklist.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n135:     event DonatorBlacklistUpdated(address indexed blacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n210:     // Blacklist contract address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L210-L210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n211:     address public donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n247:     /// @param _donatorBlacklist DonatorBlacklist address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L247-L247"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n259:     /// #if_succeeds {:msg \"donatorBlacklist assignment\"} donatorBlacklist == _donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n274:         address _donatorBlacklist\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L274-L274"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n315:         donatorBlacklist = _donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L315-L315"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n471:     /// @dev Changes donator blacklist contract address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L471-L471"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n472:     /// @notice DonatorBlacklist contract can be disabled by setting its address to zero.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L472-L472"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n473:     /// @param _donatorBlacklist DonatorBlacklist contract address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L473-L473"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L474"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n480:         donatorBlacklist = _donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L480-L480"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n481:         emit DonatorBlacklistUpdated(_donatorBlacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L481-L481"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n799:         // Check if the donator blacklist is enabled, and the status of the donator address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L799-L799"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n800:         address bList = donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L800-L800"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n801:         if (bList != address(0) && IDonatorBlacklist(bList).isDonatorBlacklisted(donator)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L801-L801"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n802:             revert DonatorBlacklisted(donator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L802-L802"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n7: /// @dev Zero master tokenomics address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n4: /// @dev DonatorBlacklist interface.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n5: interface IDonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n6:     /// @dev Gets account blacklisting status.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n8:     /// @return status Blacklisting status.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n9:     function isDonatorBlacklisted(address account) external view returns (bool status);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n43:     /// @dev Token is disabled or not whitelisted.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n114:     /// @dev The donator address is blacklisted.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L114-L114"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n116:     error DonatorBlacklisted(address account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L116-L116"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Common functions should be refactored to a common base contract",
      "description": "The functions below have the same implementation as is seen in other files. The functions should be refactored into functions of a common base contract",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit this function is already seen in `tokenomics/contracts/Dispenser.sol`\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n65:         // Check for the contract ownership\n66:         if (msg.sender != owner) {\n67:             revert OwnerOnly(msg.sender, owner);\n68:         }\n69: \n70:         // Change Tokenomics contract address\n71:         if (_tokenomics != address(0)) {\n72:             tokenomics = _tokenomics;\n73:             emit TokenomicsUpdated(_tokenomics);\n74:         }\n75:         // Change Treasury contract address\n76:         if (_treasury != address(0)) {\n77:             treasury = _treasury;\n78:             emit TreasuryUpdated(_treasury);\n79:         }\n80:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L80"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Overly complicated arithmetic",
      "description": "To maintain readability in code, particularly in Solidity which can involve complex mathematical operations, it is often recommended to limit the number of arithmetic operations to a maximum of 2-3 per line. Too many operations in a single line can make the code difficult to read and understand, increase the likelihood of mistakes, and complicate the process of debugging and reviewing the code. Consider splitting such operations over more than one line, take special care when dealing with division however. Try to limit the number of arithmetic operations to a maximum of 3 per line.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n120:         result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\n121:         uint256 (result) +\n122:             (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\n123:             0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 39);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L120-L123"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Constant redefined elsewhere",
      "description": "Consider defining in only one contract so that values cannot become out of sync when only one location is updated. A [cheap way](https://medium.com/coinmonks/gas-cost-of-solidity-library-functions-dbe0cedd4678) to store constants in a single location is to create an `internal constant` in a `library`. If the variable is a local cache of another contract's value, consider making the cache variable internal or private, which will require external users to query the contract with the source of truth, so that callers don't get out of sync.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit The same constant is already defined on file : governance/contracts/veOLAS.sol\n134:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit The same constant is already defined on file : governance/contracts/veOLAS.sol\n140:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit The same constant is already defined on file : governance/contracts/bridges/FxGovernorTunnel.sol\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit The same constant is already defined on file : governance/contracts/bridges/FxERC20ChildTunnel.sol\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit The same constant is already defined on file : governance/contracts/bridges/FxERC20ChildTunnel.sol\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit The same constant is already defined on file : registries/contracts/ComponentRegistry.sol\n13:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit The same constant is already defined on file : registries/contracts/AgentRegistry.sol\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit The same constant is already defined on file : governance/contracts/bridges/FxGovernorTunnel.sol\n28:     uint256 public constant DEFAULT_DATA_LENGTH = 144;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit The same constant is already defined on file : governance/contracts/bridges/FxGovernorTunnel.sol\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit The same constant is already defined on file : registries/contracts/ComponentRegistry.sol\n77:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit The same constant is already defined on file : tokenomics/contracts/Depository.sol\n22:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit The same constant is already defined on file : registries/contracts/ComponentRegistry.sol\n11:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit The same constant is already defined on file : tokenomics/contracts/TokenomicsConstants.sol\n28:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L28-L28"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Constants in comparisons should appear on the left side",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit `9`\n105:         if (numYears > 9) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n147:         if (lastPointNumber > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n211:         if (curNumPoint > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `255`\n232:             for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n201:             if (newLocked.endTime > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L201-L201"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n282:             if (lastPoint.slope < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L282-L282"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n285:             if (lastPoint.bias < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L285-L285"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n188:             if (oldLocked.endTime > block.timestamp && oldLocked.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L188-L188"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n192:             if (newLocked.endTime > block.timestamp && newLocked.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L192-L192"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n247:                 if (lastPoint.bias < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L247-L247"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n251:                 if (lastPoint.slope < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L251-L251"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n352:         if (unlockTime > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L352-L352"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n362:         if (amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L362-L362"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n379:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L379-L379"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n383:         if (lockedBalance.amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L383-L383"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n427:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L427-L427"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n437:         if (lockedBalance.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L437-L437"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n461:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L461-L461"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n465:         if (lockedBalance.amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L465-L465"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n490:         if (lockedBalance.amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L490-L490"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `128`\n561:         for (uint256 i = 0; i < 128; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L561-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n551:             if (maxPointNumber == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L551-L551"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n595:         if (pointNumber > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L595-L595"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n598:             if (uPoint.bias > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L598-L598"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n663:         if (dBlock > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L663-L663"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n681:         if (uPoint.bias > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L681-L681"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `255`\n693:         for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L693-L693"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `0`\n712:         if (lastPoint.bias > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L712-L712"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `0`\n196:         if (userNumPoints > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L196-L196"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `0`\n215:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `0`\n235:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L235-L235"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `0`\n176:         if (proposalId == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L176-L176"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `SELECTOR_DATA_LENGTH`\n231:             if (payloadLength < SELECTOR_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `100`\n259:         if (chainId == 100 || chainId == 10200) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `10200`\n259:         if (chainId == 100 || chainId == 10200) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `137`\n304:         if (chainId == 137 || chainId == 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `80001`\n304:         if (chainId == 137 || chainId == 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `REQUIRE_TO_PASS_MESSAGE`\n262:             if (functionSig != REQUIRE_TO_PASS_MESSAGE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `MIN_GNOSIS_PAYLOAD_LENGTH`\n267:             if (data.length < MIN_GNOSIS_PAYLOAD_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L267-L267"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `PROCESS_MESSAGE_FROM_FOREIGN`\n286:             if (functionSig != PROCESS_MESSAGE_FROM_FOREIGN) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L286-L286"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `SEND_MESSAGE_TO_CHILD`\n307:             if (functionSig != SEND_MESSAGE_TO_CHILD) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L307-L307"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `MIN_POLYGON_PAYLOAD_LENGTH`\n312:             if (data.length < MIN_POLYGON_PAYLOAD_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L312-L312"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `SCHEDULE`\n347:         if (selector == SCHEDULE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L347-L347"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `1`\n401:         if (paused == 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L401-L401"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `SELECTOR_DATA_LENGTH`\n410:                 if (data.length < SELECTOR_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L410-L410"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `SCHEDULE`\n418:                 if (functionSig == SCHEDULE || functionSig == SCHEDULE_BATCH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L418-L418"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `SCHEDULE_BATCH`\n418:                 if (functionSig == SCHEDULE || functionSig == SCHEDULE_BATCH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L418-L418"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `MIN_SCHEDULE_DATA_LENGTH`\n421:                     if (data.length < MIN_SCHEDULE_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L421-L421"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `0`\n470:             if (chainIds[i] == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L470-L470"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `80001`\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `10200`\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `100`\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `137`\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `DEFAULT_DATA_LENGTH`\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `DEFAULT_DATA_LENGTH`\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit `0`\n92:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit `0`\n88:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L88-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit `0`\n73:         return unitId > 0 && unitId < (totalSupply + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit `0`\n85:         if (bytes(bURI).length == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `1`\n53:         if (_locked > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `0`\n69:         if (unitHash == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `0`\n139:         if (unitHash == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `0`\n252:             if (numComponentsCheck > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L252-L252"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `0`\n33:         if (dependencies.length == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit `0`\n50:         if (dataLength > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit `DEFAULT_DATA_LENGTH`\n52:             if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit `DEFAULT_DATA_LENGTH`\n76:             if (dataLength > DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit `DEFAULT_DATA_LENGTH`\n93:         if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit `DEFAULT_DATA_LENGTH`\n110:         if (dataLength > DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L110-L110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n190:         if (priceLP == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L190-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n200:         if (supply == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L200-L200"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `MIN_VESTING`\n210:         if (vesting < MIN_VESTING) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L210-L210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n260:             if (supply > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L260-L260"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n295:         if (tokenAmount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L295-L295"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n304:         if (supply == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n340:         if (supply == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L340-L340"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n384:         if (payout == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L384-L384"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n363:             if (pay == 0 || !matured) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L363-L363"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n425:         status = (mapBondProducts[productId].supply > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L425-L425"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `0`\n483:         if (payout > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L483-L483"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `1`\n93:         if (_locked > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `0`\n103:         if ((reward + topUp) > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit `0`\n74:         if (totalSupply > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n543:         if (uint96(_veOLASThreshold) > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L543-L543"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n529:         if (_epsilonRate > 0 && _epsilonRate <= 17e18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L529-L529"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `17e18`\n529:         if (_epsilonRate > 0 && _epsilonRate <= 17e18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L529-L529"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `100`\n576:         if (_rewardComponentFraction + _rewardAgentFraction > 100) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L576-L576"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `100`\n581:         if (_maxBondFraction + _topUpComponentFraction + _topUpAgentFraction > 100) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L581-L581"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n656:         if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L656-L656"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n669:         if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L669-L669"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n694:         incentiveFlags[0] = (mapEpochTokenomics[curEpoch].unitPoints[0].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L694-L694"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n695:         incentiveFlags[1] = (mapEpochTokenomics[curEpoch].unitPoints[1].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L695-L695"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n696:         incentiveFlags[2] = (mapEpochTokenomics[curEpoch].unitPoints[0].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L696-L696"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n697:         incentiveFlags[3] = (mapEpochTokenomics[curEpoch].unitPoints[1].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L697-L697"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `2`\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L714-L714"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n720:                 if (numServiceUnits == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L720-L720"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n732:                         if (lastEpoch == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L732-L732"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0x02`\n973:         if (tokenomicsParametersUpdated & 0x02 == 0x02) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L973-L973"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0x01`\n987:         if (tokenomicsParametersUpdated & 0x01 == 0x01) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L987-L987"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1041:         if (incentives[0] > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1041-L1041"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1028:         } else if (tokenomicsParametersUpdated > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1028-L1028"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1063:         if (incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1063-L1063"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `2`\n978:             for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L978-L978"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n989:             if (nextEpochLen > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L989-L989"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n996:             if (nextVeOLASThreshold > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L996-L996"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `2`\n1104:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1104-L1104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `1`\n1112:             if (unitTypes[i] > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1112-L1112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1138-L1138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `2`\n1174:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1174-L1174"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `1`\n1182:             if (unitTypes[i] > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1182-L1182"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1206-L1206"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1210:                 if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1210-L1210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1217:                 if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1217-L1217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1255:         if (idf == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1255-L1255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `0`\n1265:         if (idf == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1265-L1265"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit `10`\n32:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit `10`\n68:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit `0`\n40:         if (tokenomicsData.length == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n189:         if (_minAcceptedETH == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L189-L189"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `1`\n259:         if (_locked > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n277:             if (amounts[i] == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L277-L277"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n325:         if (tokenAmount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L325-L325"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `ETH_TOKEN_ADDRESS`\n330:         if (token == ETH_TOKEN_ADDRESS) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L330-L330"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `2`\n391:         if (paused == 2) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L391-L391"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n413:         if (accountTopUps > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L413-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n402:         if (accountRewards > 0 && amountETHFromServices >= accountRewards) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L402-L402"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `2`\n430:         if (paused == 2) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L430-L430"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n441:         if (treasuryRewards > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L441-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `0`\n515:             if (mapTokenReserves[token] > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L515-L515"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`const` Variable names don\\'t follow the Solidity style guide",
      "description": "For `constant` variable names, each word should use all capital letters, with underscores separating each word (CONSTANT_CASE)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n24:     uint256 public constant tenYearSupplyCap = 1_000_000_000e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n26:     uint256 public constant maxMintCapFraction = 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n105:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n136:     string public constant name = \"Voting Escrow OLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n138:     string public constant symbol = \"veOLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L138-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n140:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L140-L140"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "NatSpec documentation for `contract` is missing",
      "description": "It is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI). It is clearly stated in the Solidity official documentation. In complex projects such as Defi, the interpretation of all functions and their arguments and returns is important for code readability and auditability.[source](https://docs.soliditylang.org/en/v0.8.15/natspec-format.html)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n13: interface IVEOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n5: interface IGnosisSafeProxyFactory {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n5: interface IGnosisSafe {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n5: interface IUniswapV2Pair {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L5-L5"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contract does not follow the Solidity style guide's suggested layout ordering",
      "description": "The [style guide](https://docs.soliditylang.org/en/v0.8.16/style-guide.html#order-of-layout) says that, within a contract, the ordering should be 1) Type declarations, 2) State variables, 3) Events, 4) Modifiers, and 5) Functions, but the contract(s) below do not follow this ordering",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit the variable definition is misplaced\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the variable definition is misplaced\n99:     uint64 internal constant WEEK = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit the variable definition is misplaced\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit the variable definition is misplaced\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit the variable definition is misplaced\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n//@audit the variable definition is misplaced\n22:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit the variable definition is misplaced\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit the variable definition is misplaced\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit the variable definition is misplaced\n15:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit the structure definition is misplaced\n18:     struct Unit {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit the variable definition is misplaced\n27:     UnitType public immutable unitType;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n//@audit the variable definition is misplaced\n14:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit the variable definition is misplaced\n75:     uint256 public constant MIN_VESTING = 1 days;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit the variable definition is misplaced\n18:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit the variable definition is misplaced\n25:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit the variable definition is misplaced\n140:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit the variable definition is misplaced\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contracts containing only utility functions should be made into libraries",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit the contract `TokenomicsConstants` contain only utility functions, it should turn to a `library`\n9: abstract contract TokenomicsConstants {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Control structures do not follow the Solidity Style Guide",
      "description": "See the [control structures](https://docs.soliditylang.org/en/latest/style-guide.html#control-structures) section of the Solidity Style Guide",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n45:     function propose(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n68:     function _execute(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n85:     function _cancel(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n173:     function _checkpoint(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L173-L173"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n330:     function _depositFor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L330-L330"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n252:     function _processBridgeData(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L252-L252"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L387"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n441:     function setTargetSelectorChainIds(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n495:     function setBridgeMediatorChainIds(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L495"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n70:     function _processMessageFromRoot(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L70-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n27:     function create(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n10:     function createProxyWithNonce(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n91:     function create(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n85:     function create(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n16:     function create(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n453:                 if (!matured ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L453-L453"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n264:     function initializeTokenomics(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L264-L264"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L497"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n562:     function changeIncentiveFractions(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n788:     function trackServiceDonations(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L788-L788"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n831:     function _calculateIDF(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L831-L831"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n19:     function trackServiceDonations(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L19-L19"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Custom error has no error details",
      "description": "Consider adding parameters to the error to indicate which user or values caused the failure",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n12: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n108: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n33: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n36: error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n55: error NoDelegateCall();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n58: error NoSelfCall();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L58-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n10: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n10: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n12: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n8: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n11: error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n8: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n11: error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n12:     error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n15:     error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n18:     error NonZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n16: error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n19: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n17:     error HashExists();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n20:     error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n64:     error Paused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n67:     error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n117:     error ReentrancyGuard();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n10: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n14: error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n5: error InitializationFailed();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n8: error ZeroTokenomicsAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n11: error ZeroTokenomicsData();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n17:     error ZeroAddress();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n29:     error ZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n32:     error NonZeroValue();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n103:     error ReentrancyGuard();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n119:     error AlreadyInitialized();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n122:     error DelegatecallOnly();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n125:     error Paused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n128:     error SameBlockNumberViolation();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L128-L128"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider using `delete` rather than assigning `zero` to clear values",
      "description": "The `delete` keyword more closely matches the semantics of what is being done, and draws more attention to the changing of state, which may lead to a more thorough audit of its associated logic",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n283:                 lastPoint.slope = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L283-L283"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n286:                 lastPoint.bias = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L286-L286"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n249:                     lastPoint.bias = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L249-L249"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n253:                     lastPoint.slope = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L253-L253"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n227:         for (counter = 0; counter < maxNumComponents; ++counter) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n662:             mapUnitIncentives[unitType][unitId].pendingRelativeReward = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L662-L662"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n678:             mapUnitIncentives[unitType][unitId].pendingRelativeTopUp = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L678-L678"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1027:             tokenomicsParametersUpdated = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1027-L1027"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1146:             mapUnitIncentives[unitTypes[i]][unitIds[i]].reward = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1146-L1146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1149:             mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1149-L1149"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1034:             tokenomicsParametersUpdated = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1034-L1034"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n992:                 nextEpochLen = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L992-L992"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n998:                 nextVeOLASThreshold = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L998-L998"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1141:                 mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1141-L1141"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Dependence on external protocols",
      "description": "External protocols should be monitored as such dependencies may introduce vulnerabilities if a vulnerability is found /introduced in the external protocol",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n6: import \"./interfaces/IUniswapV2Pair.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L6-L6"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`else`-block not required",
      "description": "One level of nesting can be removed by not having an `else` block when the `if`-block returns:",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n547:         if (account == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L547-L547"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n32:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L32-L32"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Empty Function Body - Consider commenting why",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n572:     function checkAfterExecution(bytes32, bool) external {}\n573: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L573"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Empty bytes check is missing",
      "description": "When developing smart contracts in Solidity, it's crucial to validate the inputs of your functions. This includes ensuring that the bytes parameters are not empty, especially when they represent crucial data such as addresses, identifiers, or raw data that the contract needs to process.\nMissing empty bytes checks can lead to unexpected behaviour in your contract.For instance, certain operations might fail, produce incorrect results, or consume unnecessary gas when performed with empty bytes.Moreover, missing input validation can potentially expose your contract to malicious activity, including exploitation of unhandled edge cases.\nTo mitigate these issues, always validate that bytes parameters are not empty when the logic of your contract requires it.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit  ,descriptionHash are not checked\n68:     function _execute(\n69:         uint256 proposalId,\n70:         address[] memory targets,\n71:         uint256[] memory values,\n72:         bytes[] memory calldatas,\n73:         bytes32 descriptionHash\n74:     ) internal override(Governor, GovernorTimelockControl)\n75:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L68-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit  ,descriptionHash are not checked\n85:     function _cancel(\n86:         address[] memory targets,\n87:         uint256[] memory values,\n88:         bytes[] memory calldatas,\n89:         bytes32 descriptionHash\n90:     ) internal override(Governor, GovernorTimelockControl) returns (uint256)\n91:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L85-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit  ,interfaceId are not checked\n105:     function supportsInterface(bytes4 interfaceId) public view override(IERC165, Governor, GovernorTimelockControl)\n106:         returns (bool)\n107:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L105-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit  ,r ,s are not checked\n800:     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n801:     external virtual override\n802:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L802"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit  ,interfaceId are not checked\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L98-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit  ,interfaceId are not checked\n292:     function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n293:         return IVEOLAS(ve).supportsInterface(interfaceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L292-L293"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit  ,data are not checked\n189:     function _verifyData(address target, bytes memory data, uint256 chainId) internal {\n190:         // Push a pair of key defining variables into one key\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L189-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit  ,data are not checked\n337:     function _verifySchedule(bytes memory data, bytes4 selector) internal {\n338:         // Copy the data without the selector\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L337-L338"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit  ,selector are not checked\n579:     function getTargetSelectorChainId(address target, bytes4 selector, uint256 chainId) external view\n580:         returns (bool status)\n581:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L579-L581"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit  ,data are not checked\n06:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external;\n07: }\n08: \n09: /// @dev Provided zero address.\n10: error ZeroAddress();\n11: \n12: /// @dev Only self contract is allowed to call the function.\n13: /// @param sender Sender address.\n14: /// @param instance Required contract instance address.\n15: error SelfCallOnly(address sender, address instance);\n16: \n17: /// @dev Only `fxChild` is allowed to call the function.\n18: /// @param sender Sender address.\n19: /// @param fxChild Required Fx Child address.\n20: error FxChildOnly(address sender, address fxChild);\n21: \n22: /// @dev Only on behalf of `rootGovernor` the function is allowed to process the data.\n23: /// @param sender Sender address.\n24: /// @param rootGovernor Required Root Governor address.\n25: error RootGovernorOnly(address sender, address rootGovernor);\n26: \n27: /// @dev Provided incorrect data length.\n28: /// @param expected Expected minimum data length.\n29: /// @param provided Provided data length.\n30: error IncorrectDataLength(uint256 expected, uint256 provided);\n31: \n32: /// @dev Provided value is bigger than the actual balance.\n33: /// @param value Provided value.\n34: /// @param balance Actual balance.\n35: error InsufficientBalance(uint256 value, uint256 balance);\n36: \n37: /// @dev Target execution failed.\n38: /// @param target Target address.\n39: /// @param value Provided value.\n40: /// @param payload Provided payload.\n41: error TargetExecFailed(address target, uint256 value, bytes payload);\n42: \n43: /// @title FxGovernorTunnel - Smart contract for the governor child tunnel bridge implementation\n44: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n45: /// @author AL\n46: contract FxGovernorTunnel is IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L6-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit  ,data are not checked\n107:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external override {\n108:         // Check for the Fx Child address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L107-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit  ,data are not checked\n105:     function processMessageFromForeign(bytes memory data) external {\n106:         // Check for the AMB Contract Proxy (Home) address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit  ,message are not checked\n70:     function _processMessageFromRoot(\n71:         uint256 /* stateId */,\n72:         address sender,\n73:         bytes memory message\n74:     ) internal override validateSender(sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L70-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit  ,message are not checked\n72:     function _processMessageFromChild(bytes memory message) internal override {\n73:         // Decode incoming message from child: (address, address, uint256)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L72-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit  ,data are not checked\n109:     function _toHex16(bytes16 data) internal pure returns (bytes32 result) {\n110:         result = bytes32 (data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L109-L110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit  ,unitHash are not checked\n27:     function create(\n28:         IRegistry.UnitType unitType,\n29:         address unitOwner,\n30:         bytes32 unitHash,\n31:         uint32[] memory dependencies\n32:     ) external returns (uint256 unitId)\n33:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L27-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit  ,unitHash are not checked\n50:     function updateHash(IRegistry.UnitType unitType, uint256 unitId, bytes32 unitHash) external returns (bool success) {\n51:         if (unitType == IRegistry.UnitType.Component) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L50-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit  ,initializer are not checked\n10:     function createProxyWithNonce(\n11:         address _singleton,\n12:         bytes memory initializer,\n13:         uint256 saltNonce\n14:     ) external returns (address proxy);\n15: }\n16: \n17: /// @dev Provided incorrect data length.\n18: /// @param expected Expected minimum data length.\n19: /// @param provided Provided data length.\n20: error IncorrectDataLength(uint256 expected, uint256 provided);\n21: \n22: /// @title Gnosis Safe - Smart contract for Gnosis Safe multisig implementation of a generic multisig interface\n23: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n24: contract GnosisSafeMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L10-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit  ,data are not checked\n45:     function _parseData(bytes memory data) internal pure\n46:         returns (address to, address fallbackHandler, address paymentToken, address payable paymentReceiver,\n47:             uint256 payment, uint256 nonce, bytes memory payload)\n48:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L45-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit  ,data are not checked\n91:     function create(\n92:         address[] memory owners,\n93:         uint256 threshold,\n94:         bytes memory data\n95:     ) external returns (address multisig)\n96:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L91-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit  ,data are not checked\n85:     function create(\n86:         address[] memory owners,\n87:         uint256 threshold,\n88:         bytes memory data\n89:     ) external returns (address multisig)\n90:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit  ,unitHash are not checked\n16:     function create(\n17:         address unitOwner,\n18:         bytes32 unitHash,\n19:         uint32[] memory dependencies\n20:     ) external returns (uint256);\n21: \n22:     /// @dev Updates the component / agent hash.\n23:     /// @param owner Owner of the component / agent.\n24:     /// @param unitId Unit Id.\n25:     /// @param unitHash Updated IPFS hash of the component / agent.\n26:     /// @return success True, if function executed successfully.\n27:     function updateHash(address owner, uint256 unitId, bytes32 unitHash) external returns (bool success);\n28: \n29:     /// @dev Gets subcomponents of a provided unit Id from a local public map.\n30:     /// @param unitId Unit Id.\n31:     /// @return subComponentIds Set of subcomponents.\n32:     /// @return numSubComponents Number of subcomponents.\n33:     function getLocalSubComponents(uint256 unitId) external view returns (uint32[] memory subComponentIds, uint256 numSubComponents);\n34: \n35:     /// @dev Calculates the set of subcomponent Ids.\n36:     /// @param unitIds Set of unit Ids.\n37:     /// @return subComponentIds Subcomponent Ids.\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n39: \n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L16-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit  ,unitHash are not checked\n27:     function updateHash(address owner, uint256 unitId, bytes32 unitHash) external returns (bool success);\n28: \n29:     /// @dev Gets subcomponents of a provided unit Id from a local public map.\n30:     /// @param unitId Unit Id.\n31:     /// @return subComponentIds Set of subcomponents.\n32:     /// @return numSubComponents Number of subcomponents.\n33:     function getLocalSubComponents(uint256 unitId) external view returns (uint32[] memory subComponentIds, uint256 numSubComponents);\n34: \n35:     /// @dev Calculates the set of subcomponent Ids.\n36:     /// @param unitIds Set of unit Ids.\n37:     /// @return subComponentIds Subcomponent Ids.\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n39: \n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L27-L50"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Events are missing sender information",
      "description": "When an action is triggered based on a user's action, not being able to filter based on who triggered the action makes event processing a lot more cumbersome. Including the `msg.sender` the events of these types of action will make events much more useful to end users, especially when `msg.sender` is not `tx.origin`.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n53:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n68:         emit MinterUpdated(newMinter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n367:         emit Deposit(account, amount, lockedBalance.endTime, depositType, block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L367-L367"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n368:         emit Supply(supplyBefore, supplyAfter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L368-L368"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n531:         emit Supply(supplyBefore, supplyAfter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L531-L531"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n165:         emit GovernorUpdated(newGovernor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L165-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n181:         emit GovernorCheckProposalIdChanged(proposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L181-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n486:         emit SetTargetSelectors(targets, selectors, chainIds, statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L486-L486"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n531:         emit SetBridgeMediators(bridgeMediatorL1s, bridgeMediatorL2s, chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L531-L531"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n568:         emit GuardUnpaused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L568-L568"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n94:         emit RootGovernorUpdated(newRootGovernor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n167:         emit MessageReceived(stateId, rootMessageSender, data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n94:         emit ForeignGovernorUpdated(newForeignGovernor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n167:         emit MessageReceived(governor, data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n42:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n84:         emit FxWithdrawERC20(rootToken, childToken, from, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L84-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n79:         emit FxDepositERC20(childToken, rootToken, from, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n49:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n65:         emit ManagerUpdated(newManager);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n90:         emit BaseURIChanged(bURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n112:         emit CreateUnit(unitId, unitType, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n146:         emit UpdateUnitHash(unitId, unitType, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L146-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n32:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n135:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n152:             emit TokenomicsUpdated(_tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L152-L152"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n157:             emit TreasuryUpdated(_treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L157-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n171:             emit BondCalculatorUpdated(_bondCalculator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n235:         emit CreateProduct(token, productId, supply, priceLP, vesting);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L235-L235"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n268:                 emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L268-L268"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n342:             emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L342-L342"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n58:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L58-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n73:             emit TokenomicsUpdated(_tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n78:             emit TreasuryUpdated(_treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n48:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n399:         emit TokenomicsImplementationUpdated(implementation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L399-L399"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n416:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L416-L416"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n432:             emit TreasuryUpdated(_treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L432-L432"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n437:             emit DepositoryUpdated(_depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L437-L437"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n442:             emit DispenserUpdated(_dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L442-L442"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n459:             emit ComponentRegistryUpdated(_componentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L459-L459"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n463:             emit AgentRegistryUpdated(_agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L463-L463"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n467:             emit ServiceRegistryUpdated(_serviceRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L467-L467"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n481:         emit DonatorBlacklistUpdated(_donatorBlacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L481-L481"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n551:         emit TokenomicsParametersUpdateRequested(epochCounter + 1, _devsPerCapital, _codePerDev, _epsilonRate, _epochLen,\n552:             _veOLASThreshold);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L551-L552"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n600:         emit IncentiveFractionsUpdateRequested(eCounter, _rewardComponentFraction, _rewardAgentFraction,\n601:             _maxBondFraction, _topUpComponentFraction, _topUpAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L600-L601"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n623:             emit EffectiveBondUpdated(eBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L623-L623"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n643:         emit EffectiveBondUpdated(eBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L643-L643"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n975:             emit IncentiveFractionsUpdated(eCounter + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L975-L975"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1002:             emit TokenomicsParametersUpdated(eCounter + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1002-L1002"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1045:             emit IDFUpdated(idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1045-L1045"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1065:             emit EpochSettled(eCounter, incentives[1], accountRewards, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1065-L1065"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n149:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L149-L149"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n165:             emit TokenomicsUpdated(_tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L165-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n170:             emit DepositoryUpdated(_depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n175:             emit DispenserUpdated(_dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L175-L175"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n199:         emit MinAcceptedETHUpdated(_minAcceptedETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L199-L199"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n244:         emit DepositTokenFromAccount(account, token, tokenAmount, olasMintAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n358:                 emit Withdraw(token, to, tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L358-L358"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n337:                 emit Withdraw(ETH_TOKEN_ADDRESS, to, tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L337-L337"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n405:             emit Withdraw(ETH_TOKEN_ADDRESS, account, accountRewards);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L405-L405"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n418:             emit Withdraw(olas, account, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L418-L418"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n452:                 emit UpdateTreasuryBalances(amountETHOwned, amountETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L452-L452"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n501:             emit EnableToken(token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L501-L501"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n519:             emit DisableToken(token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n538:         emit PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L538-L538"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n549:         emit UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L549-L549"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Events may be emitted out of order due to reentrancy",
      "description": "Ensure that events follow the best practice of check-effects-interaction, and are emitted before external calls",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n79:         emit FxDepositERC20(childToken, rootToken, from, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n106:         emit FxWithdrawERC20(rootToken, childToken, msg.sender, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L106-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n146:         emit UpdateUnitHash(unitId, unitType, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L146-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n268:                 emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L268-L268"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n345:         emit CreateBond(token, productId, msg.sender, bondId, payout, tokenAmount, maturity);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L345-L345"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n112:         emit IncentivesClaimed(msg.sender, reward, topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n244:         emit DepositTokenFromAccount(account, token, tokenAmount, olasMintAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n418:             emit Withdraw(olas, account, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L418-L418"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Defining All External/Public Functions in Contract Interfaces",
      "description": "It is preferable to have all the external and public function in an interface to make using them easier by developers. This helps ensure the whole API is extracted in a interface.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n43:     function changeOwner(address newOwner) external {\n44:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L43-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n58:     function changeMinter(address newMinter) external {\n59:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L58-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n91:     function inflationControl(uint256 amount) public view returns (bool) {\n92:         uint256 remainder = inflationRemainder();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L91-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n98:     function inflationRemainder() public view returns (uint256 remainder) {\n99:         uint256 _totalSupply = totalSupply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L98-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n128:     function decreaseAllowance(address spender, uint256 amount) external returns (bool) {\n129:         uint256 spenderAllowance = allowance[msg.sender][spender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L128-L129"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n145:     function increaseAllowance(address spender, uint256 amount) external returns (bool) {\n146:         uint256 spenderAllowance = allowance[msg.sender][spender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L145-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n376:     function depositFor(address account, uint256 amount) external {\n377:         LockedBalance memory lockedBalance = mapLockedBalances[account];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L376-L377"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n402:     function createLock(uint256 amount, uint256 unlockTime) external {\n403:         _createLockFor(msg.sender, amount, unlockTime);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L402-L403"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n411:     function createLockFor(address account, uint256 amount, uint256 unlockTime) external {\n412:         // Check if the account address is zero\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L411-L412"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n458:     function increaseAmount(uint256 amount) external {\n459:         LockedBalance memory lockedBalance = mapLockedBalances[msg.sender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L458-L459"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n483:     function increaseUnlockTime(uint256 unlockTime) external {\n484:         LockedBalance memory lockedBalance = mapLockedBalances[msg.sender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L483-L484"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n510:     function withdraw() external {\n511:         LockedBalance memory lockedBalance = mapLockedBalances[msg.sender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L510-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n154:     function changeGovernor(address newGovernor) external {\n155:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L154-L155"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n170:     function changeGovernorCheckProposalId(uint256 proposalId) external {\n171:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L170-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n388:         address to,\n389:         uint256,\n390:         bytes memory data,\n391:         Enum.Operation operation,\n392:         uint256,\n393:         uint256,\n394:         uint256,\n395:         address,\n396:         address payable,\n397:         bytes memory,\n398:         address\n399:     ) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L399"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n441:     function setTargetSelectorChainIds(\n442:         address[] memory targets,\n443:         bytes4[] memory selectors,\n444:         uint256[] memory chainIds,\n445:         bool[] memory statuses\n446:     ) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L446"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n495:     function setBridgeMediatorChainIds(\n496:         address[] memory bridgeMediatorL1s,\n497:         address[] memory bridgeMediatorL2s,\n498:         uint256[] memory chainIds\n499:     ) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L499"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n539:     function pause() external {\n540:         if (msg.sender == owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L539-L540"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n560:     function unpause() external {\n561:         // Check for the ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L560-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n572:     function checkAfterExecution(bytes32, bool) external {}\n573: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L573"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n579:     function getTargetSelectorChainId(address target, bytes4 selector, uint256 chainId) external view\n580:         returns (bool status)\n581:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L579-L581"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n597:     function getBridgeMediatorChainId(address bridgeMediatorL1) external view\n598:         returns (address bridgeMediatorL2, uint256 chainId)\n599:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L597-L599"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n81:     function changeRootGovernor(address newRootGovernor) external {\n82:         // Check if the change is authorized by the previous governor itself\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L81-L82"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n81:     function changeForeignGovernor(address newForeignGovernor) external {\n82:         // Check if the change is authorized by the previous governor itself\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L81-L82"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n105:     function processMessageFromForeign(bytes memory data) external {\n106:         // Check for the AMB Contract Proxy (Home) address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n30:     function changeOwner(address newOwner) external {\n31:         // Only the contract owner is allowed to change the owner\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L30-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n50:     function deposit(uint256 amount) external {\n51:         _deposit(msg.sender, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L50-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n57:     function depositTo(address to, uint256 amount) external {\n58:         // Check for the address to deposit tokens to\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L57-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n54:     function withdraw(uint256 amount) external {\n55:         _withdraw(msg.sender, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L54-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n61:     function withdrawTo(address to, uint256 amount) external {\n62:         // Check for the address to withdraw tokens to\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L61-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n37:     function changeOwner(address newOwner) external virtual {\n38:         // Check for the ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L37-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n54:     function changeManager(address newManager) external virtual {\n55:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L54-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n78:     function setBaseURI(string memory bURI) external virtual {\n79:         // Check for the ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L78-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n97:     function tokenByIndex(uint256 id) external view virtual returns (uint256 unitId) {\n98:         unitId = id + 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L97-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n152:     function getUnit(uint256 unitId) external view virtual returns (Unit memory unit) {\n153:         unit = mapUnits[unitId];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L152-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n160:     function getDependencies(uint256 unitId) external view virtual\n161:         returns (uint256 numDependencies, uint32[] memory dependencies)\n162:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L160-L162"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n20:     function changeOwner(address newOwner) external virtual {\n21:         // Check for the ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L20-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n36:     function pause() external virtual {\n37:         // Check for the ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L36-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n47:     function unpause() external virtual {\n48:         // Check for the ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L47-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n123:     function changeOwner(address newOwner) external {\n124:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L123-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n144:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n163:     function changeBondCalculator(address _bondCalculator) external {\n164:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L164"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n245:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L245"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n291:     function deposit(uint256 productId, uint256 tokenAmount) external\n292:         returns (uint256 payout, uint256 maturity, uint256 bondId)\n293:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L291-L293"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n356:     function redeem(uint256[] memory bondIds) external returns (uint256 payout) {\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L356-L357"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n396:     function getProducts(bool active) external view returns (uint256[] memory productIds) {\n397:         // Calculate the number of existing products\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L396-L397"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n424:     function isActiveProduct(uint256 productId) external view returns (bool status) {\n425:         status = (mapBondProducts[productId].supply > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L424-L425"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n435:     function getBonds(address account, bool matured) external view\n436:         returns (uint256[] memory bondIds, uint256 payout)\n437:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L435-L437"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n480:     function getBondStatus(uint256 bondId) external view returns (uint256 payout, bool matured) {\n481:         payout = mapUserBonds[bondId].payout;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L480-L481"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n46:     function changeOwner(address newOwner) external {\n47:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L46-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n65:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n89:     function claimOwnerIncentives(uint256[] memory unitTypes, uint256[] memory unitIds) external\n90:         returns (uint256 reward, uint256 topUp)\n91:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L89-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n36:     function changeOwner(address newOwner) external {\n37:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L36-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n57:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n264:     function initializeTokenomics(\n265:         address _olas,\n266:         address _treasury,\n267:         address _depository,\n268:         address _dispenser,\n269:         address _ve,\n270:         uint256 _epochLen,\n271:         address _componentRegistry,\n272:         address _agentRegistry,\n273:         address _serviceRegistry,\n274:         address _donatorBlacklist\n275:     ) external\n276:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L264-L276"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n374:     function tokenomicsImplementation() external view returns (address implementation) {\n375:         assembly {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L374-L375"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n384:     function changeTokenomicsImplementation(address implementation) external {\n385:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L384-L385"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n404:     function changeOwner(address newOwner) external {\n405:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L404-L405"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n424:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L424"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n451:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L451"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n475:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L475"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n498:         uint256 _devsPerCapital,\n499:         uint256 _codePerDev,\n500:         uint256 _epsilonRate,\n501:         uint256 _epochLen,\n502:         uint256 _veOLASThreshold\n503:     ) external\n504:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L504"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n562:     function changeIncentiveFractions(\n563:         uint256 _rewardComponentFraction,\n564:         uint256 _rewardAgentFraction,\n565:         uint256 _maxBondFraction,\n566:         uint256 _topUpComponentFraction,\n567:         uint256 _topUpAgentFraction\n568:     ) external\n569:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L562-L569"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1162"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1237:     function getInflationPerEpoch() external view returns (uint256 inflationPerEpoch) {\n1238:         inflationPerEpoch = inflationPerSecond * epochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1237-L1238"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1245:     function getUnitPoint(uint256 epoch, uint256 unitType) external view returns (UnitPoint memory up) {\n1246:         up = mapEpochTokenomics[epoch].unitPoints[unitType];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1245-L1246"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1252:     function getIDF(uint256 epoch) external view returns (uint256 idf)\n1253:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1252-L1253"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n30:     function getSupplyCapForYear(uint256 numYears) public pure returns (uint256 supplyCap) {\n31:         // For the first 10 years the supply caps are pre-defined\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L30-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n66:     function getInflationForYear(uint256 numYears) public pure returns (uint256 inflationAmount) {\n67:         // For the first 10 years the inflation caps are pre-defined as differences between next year cap and current year one\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L66-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n137:     function changeOwner(address newOwner) external {\n138:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L137-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n157:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n182:     function changeMinAcceptedETH(uint256 _minAcceptedETH) external {\n183:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L182-L183"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n313:     function withdraw(address to, uint256 tokenAmount, address token) external returns (bool success) {\n314:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L313-L314"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n466:     function drainServiceSlashedFunds() external returns (uint256 amount) {\n467:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L466-L467"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n487:     function enableToken(address token) external {\n488:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L487-L488"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n507:     function disableToken(address token) external {\n508:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L507-L508"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n531:     function pause() external {\n532:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L531-L532"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n542:     function unpause() external {\n543:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L542-L543"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Fixed Compiler Version Required for Non-Library/Interface Files",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit `GovernorOLAS` \n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n//@audit `Timelock` \n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit `OLAS` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `veOLAS` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `wveOLAS` \n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `GuardCM` \n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `FxGovernorTunnel` \n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `HomeMediator` \n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n//@audit `BridgedERC20` \n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit `FxERC20ChildTunnel` \n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit `FxERC20RootTunnel` \n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit `GenericRegistry` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `UnitRegistry` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `ComponentRegistry` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `AgentRegistry` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n//@audit `GenericManager` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit `RegistriesManager` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit `GnosisSafeMultisig` \n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit `GnosisSafeSameAddressMultisig` \n2: pragma solidity ^0.8.21;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `Depository` \n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `Dispenser` \n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit `DonatorBlacklist` \n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit `GenericBondCalculator` \n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `Tokenomics` \n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit `TokenomicsConstants` \n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit `TokenomicsProxy` \n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `Treasury` \n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Floating pragma should be avoided",
      "description": "If you leave a floating pragma in your code (pragma solidity 0.4>=0.6. 0. ), you won't know which version was deployed to compile your code, leading to unexpected behavior",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n2: pragma solidity ^0.8.21;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "NatSpec documentation for `function` is missing",
      "description": "It is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI). It is clearly stated in the Solidity official documentation. In complex projects such as Defi, the interpretation of all functions and their arguments and returns is important for code readability and auditability.[source](https://docs.soliditylang.org/en/v0.8.15/natspec-format.html)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n16:     constructor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n7:     function state(uint256 proposalId) external returns (ProposalState);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n6:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n6:     function messageSender() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n35:     constructor(UnitType _unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n15:     constructor(address _componentRegistry, address _agentRegistry) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n6:     function totalSupply() external view returns (uint);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n7:     function token0() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n8:     function token1() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Function ordering does not follow the Solidity style guide",
      "description": "According to the [Solidity style guide](https://docs.soliditylang.org/en/v0.8.17/style-guide.html#order-of-functions), functions should be laid out in the following order :`constructor()`, `receive()`, `fallback()`, `external`, `public`, `internal`, `private`, but the cases below do not follow this pattern",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n105:     function supportsInterface(bytes4 interfaceId) public view override(IERC165, Governor, GovernorTimelockControl)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n118:     function burn(uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L118-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n320:     function checkpoint() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L320-L320"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n203:     function getVotes(address account) external view returns (uint256 balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L203-L203"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n7:     function state(uint256 proposalId) external returns (ProposalState);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L387"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n135:     function tokenURI(uint256 unitId) public view virtual override returns (string memory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n49:     function create(address unitOwner, bytes32 unitHash, uint32[] memory dependencies)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n70:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L70-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n91:     function create(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n788:     function trackServiceDonations(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L788-L788"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`address`s shouldn't be hard-coded",
      "description": "It is often better to declare `address`es as `immutable`, and assign them via constructor arguments. This allows the code to remain the same across deployments on different networks, and avoids recompilation when addresses need to change.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit hardcoded address : 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Array indicies should be referenced via `enum`s rather than via numeric literals",
      "description": "Consider using an enum instead of hardcoding an index access to make the code easier to understand.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `mapSupplyPoints`\n139:         mapSupplyPoints[0] = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `targets`\n351:             (targets[0], , callDatas[0], , , ) =\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L351-L351"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `callDatas`\n351:             (targets[0], , callDatas[0], , , ) =\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L351-L351"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `mapEpochTokenomics`\n338:         TokenomicsPoint storage tp = mapEpochTokenomics[1];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L338-L338"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentiveFlags`\n694:         incentiveFlags[0] = (mapEpochTokenomics[curEpoch].unitPoints[0].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L694-L694"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentiveFlags`\n695:         incentiveFlags[1] = (mapEpochTokenomics[curEpoch].unitPoints[1].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L695-L695"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentiveFlags`\n696:         incentiveFlags[2] = (mapEpochTokenomics[curEpoch].unitPoints[0].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L696-L696"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentiveFlags`\n697:         incentiveFlags[3] = (mapEpochTokenomics[curEpoch].unitPoints[1].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L697-L697"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n914:         incentives[0] = tp.epochPoint.totalDonationsETH;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L914-L914"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n915:         incentives[1] = (incentives[0] * tp.epochPoint.rewardTreasuryFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L915-L915"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n917:         incentives[2] = (incentives[0] * tp.unitPoints[0].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L917-L917"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n918:         incentives[3] = (incentives[0] * tp.unitPoints[1].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L918-L918"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n951:         incentives[4] = (inflationPerEpoch * tp.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L951-L951"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n963:         if (incentives[4] > curMaxBond) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L963-L963"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1041:         if (incentives[0] > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1041-L1041"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1052:         uint256 accountRewards = incentives[2] + incentives[3];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1052-L1052"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1052:         uint256 accountRewards = incentives[2] + incentives[3];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1052-L1052"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1054:         incentives[5] = (inflationPerEpoch * tp.unitPoints[0].topUpUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1054-L1054"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1056:         incentives[6] = (inflationPerEpoch * tp.unitPoints[1].topUpUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1056-L1056"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1060:         uint256 accountTopUps = incentives[5] + incentives[6];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1060-L1060"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1060:         uint256 accountTopUps = incentives[5] + incentives[6];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1060-L1060"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `registries`\n690:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L690-L690"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `registries`\n690:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L690-L690"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1063:         if (incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1063-L1063"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1063:         if (incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1063-L1063"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `registries`\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1100-L1100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `registries`\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1100-L1100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `registries`\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1170-L1170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `registries`\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1170-L1170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `mapEpochTokenomics`\n334:         mapEpochTokenomics[0].epochPoint.endTime = uint32(block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L334-L334"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentiveFlags`\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L707-L707"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentiveFlags`\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L707-L707"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n965:             incentives[4] = effectiveBond + incentives[4] - curMaxBond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L965-L965"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1043:             uint256 idf = _calculateIDF(incentives[1], tp.epochPoint.numNewOwners);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1043-L1043"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n1065:             emit EpochSettled(eCounter, incentives[1], accountRewards, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1065-L1065"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n915:         incentives[1] = (incentives[0] * tp.epochPoint.rewardTreasuryFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L915-L915"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n917:         incentives[2] = (incentives[0] * tp.unitPoints[0].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L917-L917"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n918:         incentives[3] = (incentives[0] * tp.unitPoints[1].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L918-L918"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n966:             effectiveBond = uint96(incentives[4]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L966-L966"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `incentives`\n965:             incentives[4] = effectiveBond + incentives[4] - curMaxBond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L965-L965"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Some if-statement can be converted to a ternary",
      "description": "Improving code readability and compactness is an integral part of optimal programming practices. The use of ternary operators in place of if-else conditions is one such measure. Ternary operators allow us to write conditional statements in a more concise manner, thereby enhancing readability and simplicity. They follow the syntax `condition ? exprIfTrue : exprIfFalse`, which interprets as \"if the condition is true, evaluate to `exprIfTrue`, else evaluate to `exprIfFalse`\". By adopting this approach, we make our code more streamlined and intuitive, which could potentially aid in better understanding and maintenance of the codebase.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n147:         if (lastPointNumber > 0) {\n148:             pv = mapUserPoints[account][lastPointNumber - 1];\n149:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L147-L149"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n211:         if (curNumPoint > 0) {\n212:             lastPoint = mapSupplyPoints[curNumPoint];\n213:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L211-L213"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n222:         if (block.timestamp > lastPoint.ts) {\n223:             // This 1e18 multiplier is needed for the numerator to be bigger than the denominator\n224:             // We need to calculate this in > uint64 size (1e18 is > 2^59 multiplied by 2^64).\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n226:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L222-L226"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n352:         if (unlockTime > 0) {\n353:             lockedBalance.endTime = uint64(unlockTime);\n354:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L352-L354"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n582:         if (account == address(0)) {\n583:             point = mapSupplyPoints[minPointNumber];\n584:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L582-L584"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n626:         if (uPoint.blockNumber < (blockNumber + 1)) {\n627:             balance = uint256(uPoint.balance);\n628:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L626-L628"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n663:         if (dBlock > 0) {\n664:             blockTime += (dt * (blockNumber - point.blockNumber)) / dBlock;\n665:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L663-L665"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n681:         if (uPoint.bias > 0) {\n682:             balance = uint256(uint128(uPoint.bias));\n683:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L681-L683"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n712:         if (lastPoint.bias > 0) {\n713:             vSupply = uint256(uint128(lastPoint.bias));\n714:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L712-L714"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n730:         if (sPoint.blockNumber < (blockNumber + 1)) {\n731:             supplyAt = uint256(sPoint.balance);\n732:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L730-L732"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n282:             if (lastPoint.slope < 0) {\n283:                 lastPoint.slope = 0;\n284:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L282-L284"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n285:             if (lastPoint.bias < 0) {\n286:                 lastPoint.bias = 0;\n287:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L285-L287"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n568:             if (account == address(0)) {\n569:                 point = mapSupplyPoints[mid];\n570:             } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L568-L570"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n574:             if (point.blockNumber < (blockNumber + 1)) {\n575:                 minPointNumber = mid;\n576:             } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L574-L576"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n598:             if (uPoint.bias > 0) {\n599:                 vBalance = uint256(int256(uPoint.bias));\n600:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L598-L600"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n699:             if (tStep > ts) {\n700:                 tStep = ts;\n701:             } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L699-L701"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n240:                 if (tStep > block.timestamp) {\n241:                     tStep = uint64(block.timestamp);\n242:                 } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L240-L242"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n247:                 if (lastPoint.bias < 0) {\n248:                     // This could potentially happen, but fuzzer didn't find available \"real\" combinations\n249:                     lastPoint.bias = 0;\n250:                 }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L247-L250"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n251:                 if (lastPoint.slope < 0) {\n252:                     // This cannot happen - just in case. Again, fuzzer didn't reach this\n253:                     lastPoint.slope = 0;\n254:                 }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L251-L254"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n202:                 if (newLocked.endTime == oldLocked.endTime) {\n203:                     newDSlope = oldDSlope;\n204:                 } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L202-L204"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n300:                 if (newLocked.endTime == oldLocked.endTime) {\n301:                     oldDSlope -= uNew.slope; // It was a new deposit, not extension\n302:                 }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L300-L302"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n196:         if (userNumPoints > 0) {\n197:             uPoint = IVEOLAS(ve).getUserPoint(account, idx);\n198:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L196-L198"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n215:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n216:             balance = IVEOLAS(ve).getPastVotes(account, blockNumber);\n217:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L215-L217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n235:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n236:             balance = IVEOLAS(ve).balanceOfAt(account, blockNumber);\n237:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L235-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n59:         if (subcomponentsFromType == UnitType.Component) {\n60:             (subComponentIds, ) = IRegistry(componentRegistry).getLocalSubComponents(uint256(unitId));\n61:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L59-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n38:         if (unitType == IRegistry.UnitType.Component) {\n39:             unitId = IRegistry(componentRegistry).create(unitOwner, unitHash, dependencies);\n40:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L38-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n51:         if (unitType == IRegistry.UnitType.Component) {\n52:             success = IRegistry(componentRegistry).updateHash(msg.sender, unitId, unitHash);\n53:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L51-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n483:         if (payout > 0) {\n484:             matured = block.timestamp >= mapUserBonds[bondId].maturity;\n485:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L483-L485"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n103:         if ((reward + topUp) > 0) {\n104:             success = ITreasury(treasury).withdrawToAccount(msg.sender, reward, topUp);\n105:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L103-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n84:                 if (token0 == olas) {\n85:                     reserve1 = reserve0;\n86:                 }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L84-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n511:         if (uint72(_devsPerCapital) > MIN_PARAM_VALUE) {\n512:             devsPerCapital = uint72(_devsPerCapital);\n513:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L511-L513"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n519:         if (uint72(_codePerDev) > MIN_PARAM_VALUE) {\n520:             codePerDev = uint72(_codePerDev);\n521:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L519-L521"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n529:         if (_epsilonRate > 0 && _epsilonRate <= 17e18) {\n530:             epsilonRate = uint64(_epsilonRate);\n531:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L529-L531"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n536:         if (uint32(_epochLen) >= MIN_EPOCH_LENGTH && uint32(_epochLen) <= ONE_YEAR) {\n537:             nextEpochLen = uint32(_epochLen);\n538:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L536-L538"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n543:         if (uint96(_veOLASThreshold) > 0) {\n544:             nextVeOLASThreshold = uint96(_veOLASThreshold);\n545:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L543-L545"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n857:         if (fKD > epsilonRate) {\n858:             fKD = epsilonRate;\n859:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L857-L859"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1255:         if (idf == 0) {\n1256:             idf = 1e18;\n1257:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1255-L1257"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1265:         if (idf == 0) {\n1266:             idf = 1e18;\n1267:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1265-L1267"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n744:                         if (incentiveFlags[unitType]) {\n745:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeReward += amount;\n746:                         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L744-L746"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Imports could be organized more systematically",
      "description": "The contract used interfaces should be imported first, followed by all other files. The examples below do not follow this layout.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n5: import {IERC20} from \"../interfaces/IERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n5: import {IERC20} from \"../interfaces/IERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n5: import \"./interfaces/IErrorsRegistries.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n5: import \"./interfaces/IRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n5: import \"./interfaces/IRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n5: import \"./interfaces/IDonatorBlacklist.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L5-L5"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Import declarations should import specific identifiers, rather than the whole file",
      "description": "Using import declarations of the form `import {<identifier_name>} from \"some/ file.sol\"` avoids polluting the symbol namespace making flattened files smaller, and speeds up compilation",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n4: import \"@openzeppelin/contracts/governance/TimelockController.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n4: import \"../lib/solmate/src/tokens/ERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n4: import \"@openzeppelin/contracts/governance/utils/IVotes.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n5: import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n6: import \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n7: import \"./interfaces/IErrors.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n4: import \"../lib/solmate/src/tokens/ERC721.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n5: import \"./interfaces/IErrorsRegistries.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n4: import \"./GenericRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n4: import \"./UnitRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n4: import \"./UnitRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n5: import \"./interfaces/IRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n4: import \"./interfaces/IErrorsRegistries.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n4: import \"./GenericManager.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n5: import \"./interfaces/IRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n4: import \"./interfaces/IErrorsTokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n5: import \"./interfaces/ITokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n6: import \"./interfaces/ITreasury.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n5: import \"./interfaces/ITokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n6: import \"./interfaces/IUniswapV2Pair.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n4: import \"./TokenomicsConstants.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n5: import \"./interfaces/IDonatorBlacklist.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n6: import \"./interfaces/IErrorsTokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n7: import \"./interfaces/IOLAS.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n8: import \"./interfaces/IServiceRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n9: import \"./interfaces/IToken.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n10: import \"./interfaces/ITreasury.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n11: import \"./interfaces/IVotingEscrow.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n4: import \"@prb/math/src/UD60x18.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n4: import \"./interfaces/IErrorsTokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n5: import \"./interfaces/IOLAS.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n6: import \"./interfaces/IToken.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n7: import \"./interfaces/IServiceRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n8: import \"./interfaces/ITokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L8-L8"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Interfaces should be defined in separate files from their usage",
      "description": "The interfaces below should be defined in separate files, so that it's easier for future projects to import them, and to avoid duplication later on if they need to be used elsewhere in the project",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit the interface `IVEOLAS` is declared in this file and used in it here:\n195:         uint256 userNumPoints = IVEOLAS(ve).getNumUserPoints(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L195-L195"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit the interface `IGovernor` is declared in this file and used in it here:\n545:             ProposalState state = IGovernor(governor).state(governorCheckProposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L545-L545"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit the interface `IAMB` is declared in this file and used in it here:\n113:         address bridgeGovernor = IAMB(AMBContractProxyHome).messageSender();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit the interface `IGnosisSafeProxyFactory` is declared in this file and used in it here:\n106:         multisig = IGnosisSafeProxyFactory(gnosisSafeProxyFactory).createProxyWithNonce(gnosisSafe, safeParams, nonce);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L106-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit the interface `IGnosisSafe` is declared in this file and used in it here:\n125:         address[] memory checkOwners = IGnosisSafe(multisig).getOwners();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L125-L125"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Large numeric literals should use underscores for readability",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n108:     uint256 public governorCheckProposalId = 88250008686885504216650933897987879122244685460173810624866685274624741477673;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n259:         if (chainId == 100 || chainId == 10200) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n304:         if (chainId == 137 || chainId == 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n73:     uint96 public minAcceptedETH = 0.065 ether;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L73-L73"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Long functions should be refactored into multiple, smaller, functions",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n173:     function _checkpoint(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L173-L173"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n330:     function _depositFor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L330-L330"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n542:     function _findPointByBlock(uint256 blockNumber, address account) internal view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L542-L542"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n252:     function _processBridgeData(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L252-L252"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n337:     function _verifySchedule(bytes memory data, bytes4 selector) internal {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L337-L337"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L387"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n441:     function setTargetSelectorChainIds(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n107:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L107-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n105:     function processMessageFromForeign(bytes memory data) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n49:     function create(address unitOwner, bytes32 unitHash, uint32[] memory dependencies)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n200:     function _calculateSubComponents(UnitType subcomponentsFromType, uint32[] memory unitIds) internal view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L200-L200"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n45:     function _parseData(bytes memory data) internal pure\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n85:     function create(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n183:     function create(address token, uint256 priceLP, uint256 supply, uint256 vesting) external returns (uint256 productId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L183-L183"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n291:     function deposit(uint256 productId, uint256 tokenAmount) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L291-L291"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n435:     function getBonds(address account, bool matured) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L435-L435"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n264:     function initializeTokenomics(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L264-L264"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L497"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n562:     function changeIncentiveFractions(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n687:     function _trackServiceDonations(address donator, uint256[] memory serviceIds, uint256[] memory amounts, uint256 curEpoch) internal {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L687-L687"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n831:     function _calculateIDF(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L831-L831"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n880:     function checkpoint() external returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L880-L880"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1085"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n257:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L257-L257"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n313:     function withdraw(address to, uint256 tokenAmount, address token) external returns (bool success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L313-L313"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Long lines of code",
      "description": "Usually lines in source code are limited to [80](https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width) characters. Today's screens are much larger so it's reasonable to stretch this in some cases. The solidity style guide recommends a maximumum line length of [120 characters](https://docs.soliditylang.org/en/v0.8.17/style-guide.html#maximum-line-length), so the lines below should be split when they reach that length.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n7: import {GovernorCompatibilityBravo} from \"@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n9: import {GovernorVotesQuorumFraction} from \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n10: import {GovernorTimelockControl, TimelockController} from \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n15: contract GovernorOLAS is Governor, GovernorSettings, GovernorCompatibilityBravo, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n42:     /// @param calldatas The ordered list of data to be passed to each individual function call during proposal execution.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n72:     /// @notice If the inflation control does not pass, the revert does not take place, as well as no action is performed.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n258:                 lastPoint.blockNumber = initialPoint.blockNumber + uint64((block_slope * uint256(tStep - initialPoint.ts)) / 1e18);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L258-L258"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n279:             // If last point was in this block, the slope change has been already applied. In such case we have 0 slope(s)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L279-L279"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n90:     event SetTargetSelectors(address[] indexed targets, bytes4[] indexed selectors, uint256[] chainIds, bool[] statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n91:     event SetBridgeMediators(address[] indexed bridgeMediatorL1s, address[] indexed bridgeMediatorL2s, uint256[] chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n108:     uint256 public governorCheckProposalId = 88250008686885504216650933897987879122244685460173810624866685274624741477673;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n277:             // Decode the requireToPassMessage payload: homeMediator (L2), mediatorPayload (need decoding), requestGasLimit\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L277-L277"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n453:         if (targets.length != selectors.length || targets.length != statuses.length || targets.length != chainIds.length) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L453-L453"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n507:             revert WrongArrayLength(bridgeMediatorL1s.length, bridgeMediatorL2s.length, chainIds.length, chainIds.length);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L507-L507"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n25:     // CID = <multibase_encoding>multibase_encoding(<cid-version><multicodec><multihash-algorithm><multihash-length><multihash-hash>)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n26:     // CID prefix = <multibase_encoding>multibase_encoding(<cid-version><multicodec><multihash-algorithm><multihash-length>)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n132:     /// @notice Expected multicodec: dag-pb; hashing function: sha2-256, with base16 encoding and leading CID_PREFIX removed.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n86:         // In order to get the correct set of subcomponents, we need to differentiate between the callers of this function\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n91:         // The resulting set will be [c1, c2, c3]. So we write into the map of component subcomponents: c3=>[c1, c2, c3].\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n243:                         // If we found a minimal component Id, we increase the counter and break to start the search again\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L243-L243"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n49:     /// @notice (0) For components this means getting the linearized map of components from the componentRegistry contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n67:     /// @notice We assume that the external callers calculate subcomponents from the higher unit hierarchy level: agents.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n4: // Gnosis Safe Proxy Factory interface extracted from the mainnet: https://etherscan.io/address/0xa6b71e26c5e0845f74c812102ca7114b6a896ab2#code#F2#L61\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n9:     /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n4: // Gnosis Safe Master Copy interface extracted from the mainnet: https://etherscan.io/address/0xd9db270c1b5e3bd161e8c8503c55ceabee709552#code#F6#L126\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n48: /// @title Gnosis Safe Same Address - Smart contract for Gnosis Safe verification of an already existent multisig address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n83:     /// @param data Packed data containing address of an existent gnosis safe multisig and a payload to call the multisig with.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n33:     function getLocalSubComponents(uint256 unitId) external view returns (uint32[] memory subComponentIds, uint256 numSubComponents);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n111:         if (_olas == address(0) || _tokenomics == address(0) || _treasury == address(0) || _bondCalculator == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n162:     /// #if_succeeds {:msg \"bondCalculator changed\"} _bondCalculator != address(0) ==> bondCalculator == _bondCalculator;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L162-L162"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n182:     /// #if_succeeds {:msg \"isActive\"} mapBondProducts[productId].supply > 0 && mapBondProducts[productId].vesting == vesting;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L182-L182"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n183:     function create(address token, uint256 priceLP, uint256 supply, uint256 vesting) external returns (uint256 productId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L183-L183"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n243:     /// #if_succeeds {:msg \"success closed\"} forall (uint k in productIds) mapBondProducts[productIds[k]].vesting == 0 && mapBondProducts[productIds[k]].supply == 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L243-L243"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n286:     /// #if_succeeds {:msg \"input supply is non-zero\"} old(mapBondProducts[productId].supply) > 0 && mapBondProducts[productId].supply <= type(uint96).max;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L286-L286"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n287:     /// #if_succeeds {:msg \"vesting is non-zero\"} mapBondProducts[productId].vesting > 0 && mapBondProducts[productId].vesting + block.timestamp <= type(uint32).max;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L287-L287"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n289:     /// #if_succeeds {:msg \"payout\"} old(mapBondProducts[productId].supply) == mapBondProducts[productId].supply + payout;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L289-L289"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n290:     /// #if_succeeds {:msg \"OLAS balances\"} IToken(mapBondProducts[productId].token).balanceOf(treasury) == old(IToken(mapBondProducts[productId].token).balanceOf(treasury)) + tokenAmount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L290-L290"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n352:     /// #if_succeeds {:msg \"msg.sender is the only owner\"} old(forall (uint k in bondIds) mapUserBonds[bondIds[k]].account == msg.sender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L352-L352"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n353:     /// #if_succeeds {:msg \"accounts deleted\"} forall (uint k in bondIds) mapUserBonds[bondIds[k]].account == address(0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L353-L353"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n83:     /// @notice `msg.sender` must be the owner of components / agents they are passing, otherwise the function will revert.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n84:     /// @notice If not all `unitIds` belonging to `msg.sender` were provided, they will be untouched and keep accumulating.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L84-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n51:         // priceLP = 2 * r0/L * 10^18 = 2*r0*10^18/sqrt(r0*r1) ~= 61 + 96 - sqrt(96 * 112) ~= 53 bits (if LP is balanced)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n53:         // tokenAmount is of the order of sqrt(r0*r1) ~ 104 bits (if balanced) or sqrt(96) ~ 10 bits (if max unbalanced);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n54:         // overall: 64 + 53 + 104 = 221 < 256 - regular case if LP is balanced, and 64 + 147 + 10 = 221 < 256 if unbalanced\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n55:         // mulDiv will correctly fit the total amount up to the value of max uint256, i.e., max of priceLP and max of tokenAmount,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n63:         // At this point of time IDF is bound by the max of uint64, and totalTokenValue is no bigger than the max of uint192\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n88:                 // Inspired by: https://github.com/curvefi/curve-contract/blob/master/contracts/pool-templates/base/SwapTemplateBase.vy#L262\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L88-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n115: /// @title Tokenomics - Smart contract for tokenomics logic with incentives for unit owners and discount factor regulations for bonds.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n130:         uint256 rewardAgentFraction, uint256 maxBondFraction, uint256 topUpComponentFraction, uint256 topUpAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n136:     event EpochSettled(uint256 indexed epochCounter, uint256 treasuryRewards, uint256 accountRewards, uint256 accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n166:     // We assume this number will not be practically bigger than 4,722 of its integer-part (with 18 digits of fractional-part)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L166-L166"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n207:     // We assume this number will not be practically bigger than 4,722 of its integer-part (with 18 digits of fractional-part)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L207-L207"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n237:     /// @notice Tokenomics contract must be initialized no later than one year from the launch of the OLAS token contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n251:     /// #if_succeeds {:msg \"treasury must not be a zero address\"} old(_treasury) != address(0) ==> treasury == _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L251-L251"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n252:     /// #if_succeeds {:msg \"depository must not be a zero address\"} old(_depository) != address(0) ==> depository == _depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L252-L252"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n253:     /// #if_succeeds {:msg \"dispenser must not be a zero address\"} old(_dispenser) != address(0) ==> dispenser == _dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L253-L253"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n255:     /// #if_succeeds {:msg \"epochLen\"} old(_epochLen > MIN_EPOCH_LENGTH && _epochLen <= type(uint32).max) ==> epochLen == _epochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L255-L255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n256:     /// #if_succeeds {:msg \"componentRegistry must not be a zero address\"} old(_componentRegistry) != address(0) ==> componentRegistry == _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L256-L256"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n257:     /// #if_succeeds {:msg \"agentRegistry must not be a zero address\"} old(_agentRegistry) != address(0) ==> agentRegistry == _agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L257-L257"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n258:     /// #if_succeeds {:msg \"serviceRegistry must not be a zero address\"} old(_serviceRegistry) != address(0) ==> serviceRegistry == _serviceRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L258-L258"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n260:     /// #if_succeeds {:msg \"inflationPerSecond must not be zero\"} inflationPerSecond > 0 && inflationPerSecond <= getInflationForYear(0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L260-L260"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n262:     /// #if_succeeds {:msg \"maxBond\"} old(_epochLen > MIN_EPOCH_LENGTH && _epochLen <= type(uint32).max && inflationPerSecond > 0 && inflationPerSecond <= getInflationForYear(0))\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n324:         // This value is necessary since it is different from a precise one year time, as the OLAS contract started earlier\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L324-L324"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n326:         // Calculating initial inflation per second: (mintable OLAS from getInflationForYear(0)) / (seconds left in a year)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L326-L326"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n327:         // Note that we lose precision here dividing by the number of seconds right away, but to avoid complex calculations\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L327-L327"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n328:         // later we consider it less error-prone and sacrifice at most 6 insignificant digits (or 1e-12) of OLAS per year\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L328-L328"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n354:         // E.g. if we have 2 profitable components and 2 profitable agents, this means there are (2 x 2.0 + 2 x 1.0) / 3 = 2\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L354-L354"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n491:     /// ==> mapEpochTokenomics[epochCounter - 1].epochPoint.endTime > mapEpochTokenomics[epochCounter - 2].epochPoint.endTime;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L491-L491"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n492:     /// #if_succeeds {:msg \"epochLen\"} old(_epochLen > MIN_EPOCH_LENGTH && _epochLen <= ONE_YEAR && epochLen != _epochLen) ==> nextEpochLen == _epochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L492-L492"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n493:     /// #if_succeeds {:msg \"devsPerCapital\"} _devsPerCapital > MIN_PARAM_VALUE && _devsPerCapital <= type(uint72).max ==> devsPerCapital == _devsPerCapital;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L493-L493"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n494:     /// #if_succeeds {:msg \"codePerDev\"} _codePerDev > MIN_PARAM_VALUE && _codePerDev <= type(uint72).max ==> codePerDev == _codePerDev;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L494-L494"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n496:     /// #if_succeeds {:msg \"veOLASThreshold\"} _veOLASThreshold > 0 && _veOLASThreshold <= type(uint96).max ==> nextVeOLASThreshold == _veOLASThreshold;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L496-L496"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n551:         emit TokenomicsParametersUpdateRequested(epochCounter + 1, _devsPerCapital, _codePerDev, _epsilonRate, _epochLen,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L551-L551"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n561:     /// #if_succeeds {:msg \"maxBond\"} mapEpochTokenomics[epochCounter + 1].epochPoint.maxBondFraction == _maxBondFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L561-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n608:     /// #if_succeeds {:msg \"effectiveBond\"} old(effectiveBond) > amount ==> effectiveBond == old(effectiveBond) - amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L608-L608"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n629:     /// #if_succeeds {:msg \"effectiveBond\"} old(effectiveBond + amount) <= type(uint96).max ==> effectiveBond == old(effectiveBond) + amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L629-L629"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n674:             uint256 sumUnitIncentives = uint256(mapEpochTokenomics[epochNum].unitPoints[unitType].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L674-L674"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n687:     function _trackServiceDonations(address donator, uint256[] memory serviceIds, uint256[] memory amounts, uint256 curEpoch) internal {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L687-L687"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n783:     /// #if_succeeds {:msg \"totalDonationsETH can only increase\"} old(mapEpochTokenomics[epochCounter].epochPoint.totalDonationsETH) + donationETH <= type(uint96).max\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L783-L783"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n784:     /// ==> mapEpochTokenomics[epochCounter].epochPoint.totalDonationsETH == old(mapEpochTokenomics[epochCounter].epochPoint.totalDonationsETH) + donationETH;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L784-L784"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n785:     /// #if_succeeds {:msg \"sumUnitTopUpsOLAS for components can only increase\"} mapEpochTokenomics[epochCounter].unitPoints[0].sumUnitTopUpsOLAS >= old(mapEpochTokenomics[epochCounter].unitPoints[0].sumUnitTopUpsOLAS);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L785-L785"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n786:     /// #if_succeeds {:msg \"sumUnitTopUpsOLAS for agents can only increase\"} mapEpochTokenomics[epochCounter].unitPoints[1].sumUnitTopUpsOLAS >= old(mapEpochTokenomics[epochCounter].unitPoints[1].sumUnitTopUpsOLAS);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L786-L786"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n787:     /// #if_succeeds {:msg \"numNewOwners can only increase\"} mapEpochTokenomics[epochCounter].epochPoint.numNewOwners >= old(mapEpochTokenomics[epochCounter].epochPoint.numNewOwners);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L787-L787"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n866:     ///         not valid not to call a checkpoint for longer than a year. Thus, the function will return false otherwise.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L866-L866"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n870:     /// #if_succeeds {:msg \"two events will never happen at the same time\"} $result == true && (block.timestamp - timeLaunch) / ONE_YEAR > old(currentYear) ==> currentYear == old(currentYear) + 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L870-L870"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n871:     /// #if_succeeds {:msg \"previous epoch endTime must never be zero\"} mapEpochTokenomics[epochCounter - 1].epochPoint.endTime > 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L871-L871"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n872:     /// #if_succeeds {:msg \"when the year is the same, the adjusted maxBond (incentives[4]) will never be lower than the epoch maxBond\"}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L872-L872"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n874:     /// ==> old((inflationPerSecond * (block.timestamp - mapEpochTokenomics[epochCounter - 1].epochPoint.endTime) * mapEpochTokenomics[epochCounter].epochPoint.maxBondFraction) / 100) >= old(maxBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L874-L874"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n875:     /// #if_succeeds {:msg \"idf check\"} $result == true ==> mapEpochTokenomics[epochCounter].epochPoint.idf >= 1e18 && mapEpochTokenomics[epochCounter].epochPoint.idf <= 18e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L875-L875"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n879:     /// ==> mapEpochTokenomics[epochCounter].unitPoints[0].rewardUnitFraction + mapEpochTokenomics[epochCounter].unitPoints[1].rewardUnitFraction + mapEpochTokenomics[epochCounter].epochPoint.rewardTreasuryFraction == 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L879-L879"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n941:             // Set the tokenomics parameters flag such that the maxBond is correctly updated below (3rd bit is set to one)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L941-L941"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n962:         // This has to be always true, or incentives[4] == curMaxBond if the epoch is settled exactly at the epochLen time\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L962-L962"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n971:         // Update incentive fractions for the next epoch if they were requested by the changeIncentiveFractions() function\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L971-L971"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1222-L1222"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n67:         // For the first 10 years the inflation caps are pre-defined as differences between next year cap and current year one\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n27:     // Code position in storage is keccak256(\"PROXY_TOKENOMICS\") = \"0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f\"\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n44:     event DepositTokenFromAccount(address indexed account, address indexed token, uint256 tokenAmount, uint256 olasAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n117:     /// #if_succeeds {:msg \"conservation law\"} old(ETHOwned) + msg.value + old(ETHFromServices) <= type(uint96).max && ETHOwned == old(ETHOwned) + msg.value\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n210:     /// #if_succeeds {:msg \"OLAS balances\"} IToken(olas).balanceOf(msg.sender) == old(IToken(olas).balanceOf(msg.sender)) + olasMintAmount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L210-L210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n211:     /// #if_succeeds {:msg \"OLAS supply\"} IToken(olas).totalSupply() == old(IToken(olas).totalSupply()) + olasMintAmount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n227:         // Uniswap allowance implementation does not revert with the accurate message, need to check before the transfer is engaged\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n248:     /// @notice Each provided service Id must be deployed at least once, otherwise its components and agents are undefined.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L248-L248"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n250:     ///         configuration component / agent owners until the service is re-deployed when new agent Ids are accounted for.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L250-L250"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n254:     /// #if_succeeds {:msg \"updated ETHFromServices\"} old(ETHFromServices) + msg.value + old(ETHOwned) <= type(uint96).max && ETHFromServices == old(ETHFromServices) + msg.value\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L254-L254"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n290:         // Check for the overflow values, specifically when fuzzing, since realistically these amounts are assumed to be not possible\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L290-L290"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n310:     /// #if_succeeds {:msg \"ETH balance\"} token == ETH_TOKEN_ADDRESS ==> address(this).balance == old(address(this).balance) - tokenAmount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L310-L310"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n311:     /// #if_succeeds {:msg \"updated token reserves\"} token != ETH_TOKEN_ADDRESS ==> mapTokenReserves[token] == old(mapTokenReserves[token]) - tokenAmount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L311-L311"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n382:     /// #if_succeeds {:msg \"updated ETHFromServices\"} accountRewards > 0 && ETHFromServices >= accountRewards ==> ETHFromServices == old(ETHFromServices) - accountRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L382-L382"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n383:     /// #if_succeeds {:msg \"ETH balance\"} accountRewards > 0 && ETHFromServices >= accountRewards ==> address(this).balance == old(address(this).balance) - accountRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L383-L383"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n384:     /// #if_succeeds {:msg \"updated OLAS balances\"} accountTopUps > 0 ==> IToken(olas).balanceOf(account) == old(IToken(olas).balanceOf(account)) + accountTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L384-L384"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n462:     /// #if_succeeds {:msg \"correct update total eth balance\"} address(this).balance == old(address(this).balance) + amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L462-L462"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n464:     ///if_succeeds {:msg \"slashed funds check\"} IServiceRegistry(ITokenomics(tokenomics).serviceRegistry()).slashedFunds() >= minAcceptedETH\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L464-L464"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n31:     function withdrawToAccount(address account, uint256 accountRewards, uint256 accountTopUps) external returns (bool success);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L31-L31"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing event and or timelock for critical parameter change",
      "description": "Events help non-contract tools to track changes, and events prevent users from being surprised by changes",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n26:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n172:         returns (uint256 numHashes, bytes32[] memory unitHashes)\n173:     {\n174:         unitHashes = mapUnitIdHashes[unitId];\n175:         return (unitHashes.length, unitHashes);\n176:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L176"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n27:     function updateHash(address owner, uint256 unitId, bytes32 unitHash) external returns (bool success);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n16:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L16-L16"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "File is missing NatSpec",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n0: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L0-L0"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Mixed usage of `int`/`uint` with `int256`/`uint256`",
      "description": "`int256`/`uint256` are the preferred type names (they're what are used for function signatures), so they should be used consistently",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n360:         for (uint i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n6:     function totalSupply() external view returns (uint);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L6-L6"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider using named mappings",
      "description": "Consider using [named mappings](https://ethereum.stackexchange.com/a/145555) to make it easier to understand the purpose of each mapping",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n112:     mapping(address => LockedBalance) public mapLockedBalances;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n117:     mapping(uint256 => PointVoting) public mapSupplyPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n119:     mapping(address => PointVoting[]) public mapUserPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n121:     mapping(uint64 => int128) public mapSlopeChanges;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n130:     mapping(uint256 => bool) public mapAllowedTargetSelectorChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n132:     mapping(address => uint256) public mapBridgeMediatorL1L2ChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n29:     mapping(uint256 => bytes32[]) public mapUnitIdHashes;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n31:     mapping(uint256 => uint32[]) public mapSubComponents;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n33:     mapping(uint256 => Unit) public mapUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n98:     mapping(uint256 => Bond) public mapUserBonds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n100:     mapping(uint256 => Product) public mapBondProducts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n27:     mapping(address => bool) public mapBlacklistedDonators;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n93:     mapping(uint256 => UnitPoint) unitPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n217:     mapping(uint256 => uint256) public mapServiceAmounts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L217-L217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n219:     mapping(address => uint256) public mapOwnerRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L219-L219"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n221:     mapping(address => uint256) public mapOwnerTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L221-L221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n223:     mapping(uint256 => TokenomicsPoint) public mapEpochTokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L223-L223"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n225:     mapping(uint256 => mapping(uint256 => bool)) public mapNewUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n225:     mapping(uint256 => mapping(uint256 => bool)) public mapNewUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n227:     mapping(address => bool) public mapNewOwners;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n229:     mapping(uint256 => mapping(uint256 => IncentiveBalances)) public mapUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L229-L229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n229:     mapping(uint256 => mapping(uint256 => IncentiveBalances)) public mapUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L229-L229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n86:     mapping(address => uint256) public mapTokenReserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n88:     mapping(address => bool) public mapEnabledTokens;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L88-L88"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider using later versions of solidity for more cappabilities",
      "description": "Consider using solidity 0.8.18 or later to benefit from multiple things including the named mappings [named mappings](https://ethereum.stackexchange.com/a/145555) to make it easier to understand the purpose of each mapping",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Events that mark critical parameter changes should contain both the old and the new value",
      "description": "This should especially be done if the new value is not required to be different from the old value",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n18:     event MinterUpdated(address indexed minter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n89:     event GovernorUpdated(address indexed governor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n90:     event SetTargetSelectors(address[] indexed targets, bytes4[] indexed selectors, uint256[] chainIds, bool[] statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n91:     event SetBridgeMediators(address[] indexed bridgeMediatorL1s, address[] indexed bridgeMediatorL2s, uint256[] chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n92:     event GovernorCheckProposalIdChanged(uint256 indexed proposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n48:     event RootGovernorUpdated(address indexed rootMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n48:     event ForeignGovernorUpdated(address indexed foreignMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n10:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n11:     event ManagerUpdated(address indexed manager);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n12:     event BaseURIChanged(string baseURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n10:     event UpdateUnitHash(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n9:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n63:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n64:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n65:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n66:     event BondCalculatorUpdated(address indexed bondCalculator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L66-L66"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n12:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n13:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n14:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n15:     event IncentivesClaimed(address indexed owner, uint256 reward, uint256 topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n21:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n119:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n120:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n121:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n122:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n123:     event EpochLengthUpdated(uint256 epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n124:     event EffectiveBondUpdated(uint256 effectiveBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n125:     event IDFUpdated(uint256 idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n128:     event TokenomicsParametersUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n129:     event IncentiveFractionsUpdateRequested(uint256 indexed epochNumber, uint256 rewardComponentFraction,\n130:         uint256 rewardAgentFraction, uint256 maxBondFraction, uint256 topUpComponentFraction, uint256 topUpAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L129-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n131:     event IncentiveFractionsUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L131-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n132:     event ComponentRegistryUpdated(address indexed componentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n133:     event AgentRegistryUpdated(address indexed agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L133-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n134:     event ServiceRegistryUpdated(address indexed serviceRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n135:     event DonatorBlacklistUpdated(address indexed blacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n136:     event EpochSettled(uint256 indexed epochCounter, uint256 treasuryRewards, uint256 accountRewards, uint256 accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n137:     event TokenomicsImplementationUpdated(address indexed implementation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L137-L137"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n40:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n41:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n42:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n43:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n45:     event DonateToServicesETH(address indexed sender, uint256[] serviceIds, uint256[] amounts, uint256 donation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n50:     event UpdateTreasuryBalances(uint256 ETHOwned, uint256 ETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n51:     event PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n52:     event UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n53:     event MinAcceptedETHUpdated(uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L53-L53"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`override` function arguments that are unused should have the variable name removed or commented out to avoid compiler warnings",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit to is not used\n//@audit amount is not used\n767:     function transfer(address to, uint256 amount) external virtual override returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L767-L767"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit spender is not used\n//@audit amount is not used\n772:     function approve(address spender, uint256 amount) external virtual override returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L772-L772"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit from is not used\n//@audit to is not used\n//@audit amount is not used\n777:     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L777-L777"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit owner is not used\n//@audit spender is not used\n782:     function allowance(address owner, address spender) external view virtual override returns (uint256)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L782-L782"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit account is not used\n788:     function delegates(address account) external view virtual override returns (address)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L788-L788"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit delegatee is not used\n794:     function delegate(address delegatee) external virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L794-L794"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit delegatee is not used\n//@audit nonce is not used\n//@audit expiry is not used\n//@audit v is not used\n//@audit r is not used\n//@audit s is not used\n800:     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L800"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use of `override` is unnecessary",
      "description": "Starting with Solidity version [0.8.8](https://docs.soliditylang.org/en/v0.8.20/contracts.html#function-overriding), using the `override` keyword when the function solely overrides an interface function, and the function doesn't exist in multiple base contracts, is unnecessary.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n633:     function getVotes(address account) public view override returns (uint256) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L633-L633"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n672:     function getPastVotes(address account, uint256 blockNumber) public view override returns (uint256 balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L672-L672"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n752:     function getPastTotalSupply(uint256 blockNumber) public view override returns (uint256) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L752-L752"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n761:     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L761-L761"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n788:     function delegates(address account) external view virtual override returns (address)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L788-L788"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n794:     function delegate(address delegatee) external virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L794-L794"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n800:     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n801:     external virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L801"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n70:     function _processMessageFromRoot(\n71:         uint256 /* stateId */,\n72:         address sender,\n73:         bytes memory message\n74:     ) internal override validateSender(sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L70-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n72:     function _processMessageFromChild(bytes memory message) internal override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n135:     function tokenURI(uint256 unitId) public view virtual override returns (string memory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n270:     function _getUnitHash(uint256 unitId) internal view override returns (bytes32) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L270-L270"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n27:     function _checkDependencies(uint32[] memory dependencies, uint32 maxComponentId) internal virtual override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n41:     function _getSubComponents(UnitType, uint32 componentId) internal view virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n31:     function _checkDependencies(uint32[] memory dependencies, uint32) internal virtual override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n54:     function _getSubComponents(UnitType subcomponentsFromType, uint32 unitId) internal view virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L54-L54"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "NatSpec `@param` is missing",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param to is missing\n// @audit the @param amount is missing\n\n@dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L767-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param spender is missing\n// @audit the @param amount is missing\n\n@dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L772-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param from is missing\n// @audit the @param to is missing\n// @audit the @param amount is missing\n\n@dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L777-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param owner is missing\n// @audit the @param spender is missing\n\n@dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L782-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param account is missing\n\n@dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L788-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param delegatee is missing\n\n@dev Reverts delegate for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L794-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @param delegatee is missing\n// @audit the @param nonce is missing\n// @audit the @param expiry is missing\n// @audit the @param v is missing\n// @audit the @param r is missing\n// @audit the @param s is missing\n\n@dev Reverts delegateBySig for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param owner is missing\n// @audit the @param spender is missing\n\n@dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L101-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param account is missing\n\n@dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L104-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n// @audit the @param  is missing\n\n@dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L297-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n// @audit the @param  is missing\n\n@dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L302-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n// @audit the @param  is missing\n// @audit the @param  is missing\n\n@dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L307-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n// @audit the @param  is missing\n\n@dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L312-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n\n@dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L317-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n\n@dev Reverts delegate for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L322-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @param  is missing\n// @audit the @param  is missing\n// @audit the @param  is missing\n// @audit the @param  is missing\n// @audit the @param  is missing\n// @audit the @param  is missing\n\n@dev Reverts delegateBySig for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L328-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n// @audit the @param  is missing\n// @audit the @param  is missing\n\n@dev Guards the multisig call after its execution.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit the @param _bondCalculator is missing\n\n@dev Depository constructor.\n @param _olas OLAS token address.\n @param _treasury Treasury address.\n @param _tokenomics Tokenomics address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L106-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit the @param _bondCalculator is missing\n\n@dev Changes Bond Calculator contract address\n #if_succeeds {:msg \"bondCalculator changed\"} _bondCalculator != address(0) ==> bondCalculator == _bondCalculator;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n// @audit the @param _veOLASThreshold is missing\n\n@dev Changes tokenomics parameters.\n @notice Parameter values are not updated for those that are passed as zero or out of defined bounds.\n @param _devsPerCapital Number of valuable devs can be paid per units of capital per epoch.\n @param _codePerDev Number of units of useful code that can be built by a developer during one epoch.\n @param _epsilonRate Epsilon rate that contributes to the interest rate value.\n @param _epochLen New epoch length.\n #if_succeeds {:msg \"ep is correct endTime\"} epochCounter > 1\n ==> mapEpochTokenomics[epochCounter - 1].epochPoint.endTime > mapEpochTokenomics[epochCounter - 2].epochPoint.endTime;\n #if_succeeds {:msg \"epochLen\"} old(_epochLen > MIN_EPOCH_LENGTH && _epochLen <= ONE_YEAR && epochLen != _epochLen) ==> nextEpochLen == _epochLen;\n #if_succeeds {:msg \"devsPerCapital\"} _devsPerCapital > MIN_PARAM_VALUE && _devsPerCapital <= type(uint72).max ==> devsPerCapital == _devsPerCapital;\n #if_succeeds {:msg \"codePerDev\"} _codePerDev > MIN_PARAM_VALUE && _codePerDev <= type(uint72).max ==> codePerDev == _codePerDev;\n #if_succeeds {:msg \"epsilonRate\"} _epsilonRate > 0 && _epsilonRate < 17e18 ==> epsilonRate == _epsilonRate;\n #if_succeeds {:msg \"veOLASThreshold\"} _veOLASThreshold > 0 && _veOLASThreshold <= type(uint96).max ==> nextVeOLASThreshold == _veOLASThreshold;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n// @audit the @param unitType is missing\n\n@dev Gets the full set of linearized components / canonical agent Ids for a specified service.\n @notice The service must be / have been deployed in order to get the actual data.\n @param serviceId Service Id.\n @return numUnitIds Number of component / agent Ids.\n @return unitIds Set of component / agent Ids.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L21-L1"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Functions which are either private or internal should have a preceding _ in their name",
      "description": "Add a preceding underscore to the function name, take care to refactor where there functions are called ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n35:     constructor(UnitType _unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L35"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`public` functions not called by the contract should be declared `external` instead",
      "description": "Contracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n745:     function totalSupplyLocked() public view returns (uint256) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L745-L745"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n30:     function getSupplyCapForYear(uint256 numYears) public pure returns (uint256 supplyCap) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n66:     function getInflationForYear(uint256 numYears) public pure returns (uint256 inflationAmount) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L66-L66"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Adding a `return` statement when the function defines a named return variable, is redundant",
      "description": "Once the return variable has been assigned (or has its default value), there is no need to explicitly return it at the end of the function, since it's returned automatically.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n59:             return supplyCap;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L59-L59"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Redundant inheritance specifier",
      "description": "The contracts below already extend the specified contract, so there is no need to list it in the inheritance list again",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit `Governor` is already inherited by `GovernorSettings` \n15: contract GovernorOLAS is Governor, GovernorSettings, GovernorCompatibilityBravo, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit `GovernorVotes` is already inherited by `GovernorVotesQuorumFraction` \n15: contract GovernorOLAS is Governor, GovernorSettings, GovernorCompatibilityBravo, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L15-L15"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Setters should prevent re-setting of the same value",
      "description": "This especially problematic when the setter also emits the same value, which may be confusing to offline parsers",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n43:     function changeOwner(address newOwner) external {\n44:         if (msg.sender != owner) {\n45:             revert ManagerOnly(msg.sender, owner);\n46:         }\n47: \n48:         if (newOwner == address(0)) {\n49:             revert ZeroAddress();\n50:         }\n51: \n52:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L43-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit `minter` and `newMinter` are never checked for the same value setting\n58:     function changeMinter(address newMinter) external {\n59:         if (msg.sender != owner) {\n60:             revert ManagerOnly(msg.sender, owner);\n61:         }\n62: \n63:         if (newMinter == address(0)) {\n64:             revert ZeroAddress();\n65:         }\n66: \n67:         minter = newMinter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L58-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `governor` and `newGovernor` are never checked for the same value setting\n154:     function changeGovernor(address newGovernor) external {\n155:         if (msg.sender != owner) {\n156:             revert OwnerOnly(msg.sender, owner);\n157:         }\n158: \n159:         // Check for the zero address\n160:         if (newGovernor == address(0)) {\n161:             revert ZeroAddress();\n162:         }\n163: \n164:         governor = newGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L154-L164"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `governorCheckProposalId` and `proposalId` are never checked for the same value setting\n170:     function changeGovernorCheckProposalId(uint256 proposalId) external {\n171:         if (msg.sender != owner) {\n172:             revert OwnerOnly(msg.sender, owner);\n173:         }\n174: \n175:         // Check for the zero value\n176:         if (proposalId == 0) {\n177:             revert ZeroValue();\n178:         }\n179: \n180:         governorCheckProposalId = proposalId;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L170-L180"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `rootGovernor` and `newRootGovernor` are never checked for the same value setting\n81:     function changeRootGovernor(address newRootGovernor) external {\n82:         // Check if the change is authorized by the previous governor itself\n83:         // This is possible only if all the checks in the message process function pass and the contract calls itself\n84:         if (msg.sender != address(this)) {\n85:             revert SelfCallOnly(msg.sender, address(this));\n86:         }\n87: \n88:         // Check for the zero address\n89:         if (newRootGovernor == address(0)) {\n90:             revert ZeroAddress();\n91:         }\n92: \n93:         rootGovernor = newRootGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L81-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `foreignGovernor` and `newForeignGovernor` are never checked for the same value setting\n81:     function changeForeignGovernor(address newForeignGovernor) external {\n82:         // Check if the change is authorized by the previous governor itself\n83:         // This is possible only if all the checks in the message process function pass and the contract calls itself\n84:         if (msg.sender != address(this)) {\n85:             revert SelfCallOnly(msg.sender, address(this));\n86:         }\n87: \n88:         // Check for the zero address\n89:         if (newForeignGovernor == address(0)) {\n90:             revert ZeroAddress();\n91:         }\n92: \n93:         foreignGovernor = newForeignGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L81-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n30:     function changeOwner(address newOwner) external {\n31:         // Only the contract owner is allowed to change the owner\n32:         if (msg.sender != owner) {\n33:             revert OwnerOnly(msg.sender, owner);\n34:         }\n35: \n36:         // Zero address check\n37:         if (newOwner == address(0)) {\n38:             revert ZeroAddress();\n39:         }\n40: \n41:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L30-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n37:     function changeOwner(address newOwner) external virtual {\n38:         // Check for the ownership\n39:         if (msg.sender != owner) {\n40:             revert OwnerOnly(msg.sender, owner);\n41:         }\n42: \n43:         // Check for the zero address\n44:         if (newOwner == address(0)) {\n45:             revert ZeroAddress();\n46:         }\n47: \n48:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L37-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit `manager` and `newManager` are never checked for the same value setting\n54:     function changeManager(address newManager) external virtual {\n55:         if (msg.sender != owner) {\n56:             revert OwnerOnly(msg.sender, owner);\n57:         }\n58: \n59:         // Check for the zero address\n60:         if (newManager == address(0)) {\n61:             revert ZeroAddress();\n62:         }\n63: \n64:         manager = newManager;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L54-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit `baseURI` and `bURI` are never checked for the same value setting\n78:     function setBaseURI(string memory bURI) external virtual {\n79:         // Check for the ownership\n80:         if (msg.sender != owner) {\n81:             revert OwnerOnly(msg.sender, owner);\n82:         }\n83: \n84:         // Check for the zero value\n85:         if (bytes(bURI).length == 0) {\n86:             revert ZeroValue();\n87:         }\n88: \n89:         baseURI = bURI;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L78-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n20:     function changeOwner(address newOwner) external virtual {\n21:         // Check for the ownership\n22:         if (msg.sender != owner) {\n23:             revert OwnerOnly(msg.sender, owner);\n24:         }\n25: \n26:         // Check for the zero address\n27:         if (newOwner == address(0)) {\n28:             revert ZeroAddress();\n29:         }\n30: \n31:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L20-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n123:     function changeOwner(address newOwner) external {\n124:         // Check for the contract ownership\n125:         if (msg.sender != owner) {\n126:             revert OwnerOnly(msg.sender, owner);\n127:         }\n128: \n129:         // Check for the zero address\n130:         if (newOwner == address(0)) {\n131:             revert ZeroAddress();\n132:         }\n133: \n134:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L123-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `tokenomics` and `_tokenomics` are never checked for the same value setting\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n144:         // Check for the contract ownership\n145:         if (msg.sender != owner) {\n146:             revert OwnerOnly(msg.sender, owner);\n147:         }\n148: \n149:         // Change Tokenomics contract address\n150:         if (_tokenomics != address(0)) {\n151:             tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `treasury` and `_treasury` are never checked for the same value setting\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n144:         // Check for the contract ownership\n145:         if (msg.sender != owner) {\n146:             revert OwnerOnly(msg.sender, owner);\n147:         }\n148: \n149:         // Change Tokenomics contract address\n150:         if (_tokenomics != address(0)) {\n151:             tokenomics = _tokenomics;\n152:             emit TokenomicsUpdated(_tokenomics);\n153:         }\n154:         // Change Treasury contract address\n155:         if (_treasury != address(0)) {\n156:             treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L156"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `bondCalculator` and `_bondCalculator` are never checked for the same value setting\n163:     function changeBondCalculator(address _bondCalculator) external {\n164:         // Check for the contract ownership\n165:         if (msg.sender != owner) {\n166:             revert OwnerOnly(msg.sender, owner);\n167:         }\n168: \n169:         if (_bondCalculator != address(0)) {\n170:             bondCalculator = _bondCalculator;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n46:     function changeOwner(address newOwner) external {\n47:         // Check for the contract ownership\n48:         if (msg.sender != owner) {\n49:             revert OwnerOnly(msg.sender, owner);\n50:         }\n51: \n52:         // Check for the zero address\n53:         if (newOwner == address(0)) {\n54:             revert ZeroAddress();\n55:         }\n56: \n57:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L46-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `tokenomics` and `_tokenomics` are never checked for the same value setting\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n65:         // Check for the contract ownership\n66:         if (msg.sender != owner) {\n67:             revert OwnerOnly(msg.sender, owner);\n68:         }\n69: \n70:         // Change Tokenomics contract address\n71:         if (_tokenomics != address(0)) {\n72:             tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `treasury` and `_treasury` are never checked for the same value setting\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n65:         // Check for the contract ownership\n66:         if (msg.sender != owner) {\n67:             revert OwnerOnly(msg.sender, owner);\n68:         }\n69: \n70:         // Change Tokenomics contract address\n71:         if (_tokenomics != address(0)) {\n72:             tokenomics = _tokenomics;\n73:             emit TokenomicsUpdated(_tokenomics);\n74:         }\n75:         // Change Treasury contract address\n76:         if (_treasury != address(0)) {\n77:             treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n36:     function changeOwner(address newOwner) external {\n37:         // Check for the contract ownership\n38:         if (msg.sender != owner) {\n39:             revert OwnerOnly(msg.sender, owner);\n40:         }\n41: \n42:         // Check for the zero address\n43:         if (newOwner == address(0)) {\n44:             revert ZeroAddress();\n45:         }\n46: \n47:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L36-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n404:     function changeOwner(address newOwner) external {\n405:         // Check for the contract ownership\n406:         if (msg.sender != owner) {\n407:             revert OwnerOnly(msg.sender, owner);\n408:         }\n409: \n410:         // Check for the zero address\n411:         if (newOwner == address(0)) {\n412:             revert ZeroAddress();\n413:         }\n414: \n415:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L404-L415"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `treasury` and `_treasury` are never checked for the same value setting\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n424:         // Check for the contract ownership\n425:         if (msg.sender != owner) {\n426:             revert OwnerOnly(msg.sender, owner);\n427:         }\n428: \n429:         // Change Treasury contract address\n430:         if (_treasury != address(0)) {\n431:             treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L431"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `depository` and `_depository` are never checked for the same value setting\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n424:         // Check for the contract ownership\n425:         if (msg.sender != owner) {\n426:             revert OwnerOnly(msg.sender, owner);\n427:         }\n428: \n429:         // Change Treasury contract address\n430:         if (_treasury != address(0)) {\n431:             treasury = _treasury;\n432:             emit TreasuryUpdated(_treasury);\n433:         }\n434:         // Change Depository contract address\n435:         if (_depository != address(0)) {\n436:             depository = _depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L436"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `dispenser` and `_dispenser` are never checked for the same value setting\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n424:         // Check for the contract ownership\n425:         if (msg.sender != owner) {\n426:             revert OwnerOnly(msg.sender, owner);\n427:         }\n428: \n429:         // Change Treasury contract address\n430:         if (_treasury != address(0)) {\n431:             treasury = _treasury;\n432:             emit TreasuryUpdated(_treasury);\n433:         }\n434:         // Change Depository contract address\n435:         if (_depository != address(0)) {\n436:             depository = _depository;\n437:             emit DepositoryUpdated(_depository);\n438:         }\n439:         // Change Dispenser contract address\n440:         if (_dispenser != address(0)) {\n441:             dispenser = _dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `componentRegistry` and `_componentRegistry` are never checked for the same value setting\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n451:         // Check for the contract ownership\n452:         if (msg.sender != owner) {\n453:             revert OwnerOnly(msg.sender, owner);\n454:         }\n455: \n456:         // Check for registries addresses\n457:         if (_componentRegistry != address(0)) {\n458:             componentRegistry = _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L458"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `agentRegistry` and `_agentRegistry` are never checked for the same value setting\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n451:         // Check for the contract ownership\n452:         if (msg.sender != owner) {\n453:             revert OwnerOnly(msg.sender, owner);\n454:         }\n455: \n456:         // Check for registries addresses\n457:         if (_componentRegistry != address(0)) {\n458:             componentRegistry = _componentRegistry;\n459:             emit ComponentRegistryUpdated(_componentRegistry);\n460:         }\n461:         if (_agentRegistry != address(0)) {\n462:             agentRegistry = _agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L462"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` and `_serviceRegistry` are never checked for the same value setting\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n451:         // Check for the contract ownership\n452:         if (msg.sender != owner) {\n453:             revert OwnerOnly(msg.sender, owner);\n454:         }\n455: \n456:         // Check for registries addresses\n457:         if (_componentRegistry != address(0)) {\n458:             componentRegistry = _componentRegistry;\n459:             emit ComponentRegistryUpdated(_componentRegistry);\n460:         }\n461:         if (_agentRegistry != address(0)) {\n462:             agentRegistry = _agentRegistry;\n463:             emit AgentRegistryUpdated(_agentRegistry);\n464:         }\n465:         if (_serviceRegistry != address(0)) {\n466:             serviceRegistry = _serviceRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L466"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `donatorBlacklist` and `_donatorBlacklist` are never checked for the same value setting\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n475:         // Check for the contract ownership\n476:         if (msg.sender != owner) {\n477:             revert OwnerOnly(msg.sender, owner);\n478:         }\n479: \n480:         donatorBlacklist = _donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L480"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `owner` and `newOwner` are never checked for the same value setting\n137:     function changeOwner(address newOwner) external {\n138:         // Check for the contract ownership\n139:         if (msg.sender != owner) {\n140:             revert OwnerOnly(msg.sender, owner);\n141:         }\n142: \n143:         // Check for the zero address\n144:         if (newOwner == address(0)) {\n145:             revert ZeroAddress();\n146:         }\n147: \n148:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L137-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `tokenomics` and `_tokenomics` are never checked for the same value setting\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n157:         // Check for the contract ownership\n158:         if (msg.sender != owner) {\n159:             revert OwnerOnly(msg.sender, owner);\n160:         }\n161: \n162:         // Change Tokenomics contract address\n163:         if (_tokenomics != address(0)) {\n164:             tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L164"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `depository` and `_depository` are never checked for the same value setting\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n157:         // Check for the contract ownership\n158:         if (msg.sender != owner) {\n159:             revert OwnerOnly(msg.sender, owner);\n160:         }\n161: \n162:         // Change Tokenomics contract address\n163:         if (_tokenomics != address(0)) {\n164:             tokenomics = _tokenomics;\n165:             emit TokenomicsUpdated(_tokenomics);\n166:         }\n167:         // Change Depository contract address\n168:         if (_depository != address(0)) {\n169:             depository = _depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L169"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `dispenser` and `_dispenser` are never checked for the same value setting\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n157:         // Check for the contract ownership\n158:         if (msg.sender != owner) {\n159:             revert OwnerOnly(msg.sender, owner);\n160:         }\n161: \n162:         // Change Tokenomics contract address\n163:         if (_tokenomics != address(0)) {\n164:             tokenomics = _tokenomics;\n165:             emit TokenomicsUpdated(_tokenomics);\n166:         }\n167:         // Change Depository contract address\n168:         if (_depository != address(0)) {\n169:             depository = _depository;\n170:             emit DepositoryUpdated(_depository);\n171:         }\n172:         // Change Dispenser contract address\n173:         if (_dispenser != address(0)) {\n174:             dispenser = _dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L174"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "NatSpec `@return` argument is missing",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n// @audit the @return is missing\n@dev Current state of a proposal, following Compoundb\u0000\u0019s convention.\n @param proposalId Proposal Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L33-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @return is missing\n@dev Gets the voting power.\n @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L633-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L767-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L772-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L777-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L782-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L788-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L101-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L104-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Gets the voting power.\n @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L203-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L297-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L302-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L307-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L312-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit the @return is missing\n@dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L317-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n// @audit the @return is missing\n@dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n @param _singleton Address of singleton contract.\n @param initializer Payload for message call sent to new proxy contract.\n @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L10-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n// @audit the @return is missing\n@dev Parses (unpacks) the data to gnosis safe specific parameters.\n @notice If the provided data is not empty, its length must be at least 144 bytes to be parsed correctly.\n @param data Packed data related to the creation of a gnosis safe multisig.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L45-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n// @audit the @return is missing\n@dev Record global data to the checkpoint\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L11-L1"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n// @audit the @return is missing\n@dev Gets the voting power.\n @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L8-L1"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider using `SafeTransferLib.safeTransferETH()` or `Address.sendValue()` for clearer semantic meaning",
      "description": "These Functions indicate their purpose with their name more clearly than using low-level calls.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n118:             (bool success, ) = multisig.call(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L118-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n406:             (success, ) = account.call{value: accountRewards}(\"\");\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L406-L406"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n339:                 (success, ) = to.call{value: tokenAmount}(\"\");\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L339-L339"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Polymorphic functions make security audits more time-consuming and error-prone",
      "description": "The instances below point to one of two functions with the same name. Consider naming each function differently, in order to make code navigation and analysis easier.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n156:     function totalNumPoints() external view returns (uint256 numPoints) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L156-L156"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n163:     function mapSupplyPoints(uint256 idx) external view returns (PointVoting memory sPoint) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L163-L163"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n170:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n177:     function getLastUserPoint(address account) external view returns (PointVoting memory pv) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L177-L177"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n184:     function getNumUserPoints(address account) external view returns (uint256 userNumPoints) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L184-L184"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n193:     function getUserPoint(address account, uint256 idx) public view returns (PointVoting memory uPoint) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L193-L193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n203:     function getVotes(address account) external view returns (uint256 balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L203-L203"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n211:     function getPastVotes(address account, uint256 blockNumber) external view returns (uint256 balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n223:     function balanceOf(address account) external view returns (uint256 balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L223-L223"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n231:     function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256 balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n243:     function lockedEnd(address account) external view returns (uint256 unlockTime) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L243-L243"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n249:     function totalSupply() external view returns (uint256 supply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L249-L249"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n256:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L256-L256"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n263:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L263-L263"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n277:     function totalSupplyLocked() external view returns (uint256 vPower) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L277-L277"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n285:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L285-L285"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n292:     function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L292-L292"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n312:     function allowance(address, address) external view returns (uint256) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L312-L312"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n317:     function delegates(address) external view returns (address) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L317-L317"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n107:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L107-L107"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "State variables should have `Natspec` comments",
      "description": "Consider adding some `Natspec` comments on critical state variables to explain what they are supposed to do: this will help for future code reviews.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit oneYear need comments\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit tenYearSupplyCap need comments\n24:     uint256 public constant tenYearSupplyCap = 1_000_000_000e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit maxMintCapFraction need comments\n26:     uint256 public constant maxMintCapFraction = 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit timeLaunch need comments\n28:     uint256 public immutable timeLaunch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit owner need comments\n31:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit minter need comments\n33:     address public minter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit WEEK need comments\n99:     uint64 internal constant WEEK = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit MAXTIME need comments\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit IMAXTIME need comments\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit decimals need comments\n105:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit token need comments\n108:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit supply need comments\n110:     uint256 public supply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L110-L110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit mapLockedBalances need comments\n112:     mapping(address => LockedBalance) public mapLockedBalances;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit totalNumPoints need comments\n115:     uint256 public totalNumPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit mapSupplyPoints need comments\n117:     mapping(uint256 => PointVoting) public mapSupplyPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit mapUserPoints need comments\n119:     mapping(address => PointVoting[]) public mapUserPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit mapSlopeChanges need comments\n121:     mapping(uint64 => int128) public mapSlopeChanges;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit name need comments\n124:     string public name;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit symbol need comments\n126:     string public symbol;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit ve need comments\n132:     address public immutable ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit token need comments\n134:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit name need comments\n136:     string public constant name = \"Voting Escrow OLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit symbol need comments\n138:     string public constant symbol = \"veOLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L138-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit decimals need comments\n140:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit SCHEDULE need comments\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit SCHEDULE_BATCH need comments\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit REQUIRE_TO_PASS_MESSAGE need comments\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit PROCESS_MESSAGE_FROM_FOREIGN need comments\n103:     bytes4 public constant PROCESS_MESSAGE_FROM_FOREIGN = bytes4(keccak256(bytes(\"processMessageFromForeign(bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit SEND_MESSAGE_TO_CHILD need comments\n105:     bytes4 public constant SEND_MESSAGE_TO_CHILD = bytes4(keccak256(bytes(\"sendMessageToChild(address,bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit governorCheckProposalId need comments\n108:     uint256 public governorCheckProposalId = 88250008686885504216650933897987879122244685460173810624866685274624741477673;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit MIN_SCHEDULE_DATA_LENGTH need comments\n111:     uint256 public constant MIN_SCHEDULE_DATA_LENGTH = 260;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit SELECTOR_DATA_LENGTH need comments\n113:     uint256 public constant SELECTOR_DATA_LENGTH = 4;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit MIN_GNOSIS_PAYLOAD_LENGTH need comments\n115:     uint256 public constant MIN_GNOSIS_PAYLOAD_LENGTH = 292;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit MIN_POLYGON_PAYLOAD_LENGTH need comments\n117:     uint256 public constant MIN_POLYGON_PAYLOAD_LENGTH = 164;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit owner need comments\n120:     address public immutable owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit multisig need comments\n122:     address public immutable multisig;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit governor need comments\n125:     address public governor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit paused need comments\n127:     uint8 public paused = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L127-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit mapAllowedTargetSelectorChainIds need comments\n130:     mapping(uint256 => bool) public mapAllowedTargetSelectorChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit mapBridgeMediatorL1L2ChainIds need comments\n132:     mapping(address => uint256) public mapBridgeMediatorL1L2ChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit DEFAULT_DATA_LENGTH need comments\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit fxChild need comments\n55:     address public immutable fxChild;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit rootGovernor need comments\n57:     address public rootGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L57-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit DEFAULT_DATA_LENGTH need comments\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit AMBContractProxyHome need comments\n55:     address public immutable AMBContractProxyHome;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit foreignGovernor need comments\n57:     address public foreignGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L57-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n//@audit owner need comments\n22:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit childToken need comments\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit rootToken need comments\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit childToken need comments\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit rootToken need comments\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit owner need comments\n15:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit manager need comments\n17:     address public manager;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit baseURI need comments\n19:     string public baseURI;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit totalSupply need comments\n21:     uint256 public totalSupply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit _locked need comments\n23:     uint256 internal _locked = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L23-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit CID_PREFIX need comments\n33:     string public constant CID_PREFIX = \"f01701220\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit unitType need comments\n27:     UnitType public immutable unitType;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit mapUnitIdHashes need comments\n29:     mapping(uint256 => bytes32[]) public mapUnitIdHashes;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit mapSubComponents need comments\n31:     mapping(uint256 => uint32[]) public mapSubComponents;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit mapUnits need comments\n33:     mapping(uint256 => Unit) public mapUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit VERSION need comments\n10:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit componentRegistry need comments\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit VERSION need comments\n13:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n//@audit owner need comments\n14:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n//@audit paused need comments\n16:     bool public paused;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit componentRegistry need comments\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit agentRegistry need comments\n13:     address public immutable agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit GNOSIS_SAFE_SETUP_SELECTOR need comments\n26:     bytes4 public constant GNOSIS_SAFE_SETUP_SELECTOR = 0xb63e800d;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit DEFAULT_DATA_LENGTH need comments\n28:     uint256 public constant DEFAULT_DATA_LENGTH = 144;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit gnosisSafe need comments\n30:     address payable public immutable gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit gnosisSafeProxyFactory need comments\n32:     address public immutable gnosisSafeProxyFactory;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit DEFAULT_DATA_LENGTH need comments\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit proxyHash need comments\n56:     bytes32 public immutable proxyHash;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit MIN_VESTING need comments\n75:     uint256 public constant MIN_VESTING = 1 days;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit VERSION need comments\n77:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit owner need comments\n80:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit bondCounter need comments\n83:     uint32 public bondCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit productCounter need comments\n86:     uint32 public productCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit olas need comments\n89:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit tokenomics need comments\n91:     address public tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit treasury need comments\n93:     address public treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit bondCalculator need comments\n95:     address public bondCalculator;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit mapUserBonds need comments\n98:     mapping(uint256 => Bond) public mapUserBonds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit mapBondProducts need comments\n100:     mapping(uint256 => Product) public mapBondProducts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit owner need comments\n18:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit _locked need comments\n20:     uint8 internal _locked;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit tokenomics need comments\n23:     address public tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L23-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit treasury need comments\n25:     address public treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit owner need comments\n25:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit mapBlacklistedDonators need comments\n27:     mapping(address => bool) public mapBlacklistedDonators;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit olas need comments\n22:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit tokenomics need comments\n24:     address public immutable tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit owner need comments\n140:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit maxBond need comments\n143:     uint96 public maxBond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit olas need comments\n146:     address public olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L146-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit inflationPerSecond need comments\n148:     uint96 public inflationPerSecond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L148-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit treasury need comments\n151:     address public treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L151-L151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit veOLASThreshold need comments\n154:     uint96 public veOLASThreshold;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L154-L154"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit depository need comments\n157:     address public depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L157-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit effectiveBond need comments\n161:     uint96 public effectiveBond;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L161-L161"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit dispenser need comments\n164:     address public dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L164-L164"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit codePerDev need comments\n167:     uint72 public codePerDev;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit currentYear need comments\n170:     uint8 public currentYear;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit tokenomicsParametersUpdated need comments\n172:     bytes1 public tokenomicsParametersUpdated;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L172-L172"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit _locked need comments\n174:     uint8 internal _locked;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L174-L174"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit componentRegistry need comments\n177:     address public componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L177-L177"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit epsilonRate need comments\n181:     uint64 public epsilonRate;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L181-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit epochLen need comments\n184:     uint32 public epochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L184-L184"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit agentRegistry need comments\n187:     address public agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L187-L187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit nextVeOLASThreshold need comments\n190:     uint96 public nextVeOLASThreshold;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L190-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit serviceRegistry need comments\n193:     address public serviceRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L193-L193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit epochCounter need comments\n196:     uint32 public epochCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L196-L196"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit timeLaunch need comments\n199:     uint32 public timeLaunch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L199-L199"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit nextEpochLen need comments\n202:     uint32 public nextEpochLen;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L202-L202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit ve need comments\n205:     address public ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L205-L205"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit devsPerCapital need comments\n208:     uint72 public devsPerCapital;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L208-L208"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit donatorBlacklist need comments\n211:     address public donatorBlacklist;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit lastDonationBlockNumber need comments\n214:     uint32 public lastDonationBlockNumber;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapServiceAmounts need comments\n217:     mapping(uint256 => uint256) public mapServiceAmounts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L217-L217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapOwnerRewards need comments\n219:     mapping(address => uint256) public mapOwnerRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L219-L219"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapOwnerTopUps need comments\n221:     mapping(address => uint256) public mapOwnerTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L221-L221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapEpochTokenomics need comments\n223:     mapping(uint256 => TokenomicsPoint) public mapEpochTokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L223-L223"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapNewUnits need comments\n225:     mapping(uint256 => mapping(uint256 => bool)) public mapNewUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapNewOwners need comments\n227:     mapping(address => bool) public mapNewOwners;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit mapUnitIncentives need comments\n229:     mapping(uint256 => mapping(uint256 => IncentiveBalances)) public mapUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L229-L229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit VERSION need comments\n11:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit PROXY_TOKENOMICS need comments\n14:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit ONE_YEAR need comments\n16:     uint256 public constant ONE_YEAR = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit MIN_EPOCH_LENGTH need comments\n18:     uint256 public constant MIN_EPOCH_LENGTH = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit MIN_PARAM_VALUE need comments\n20:     uint256 public constant MIN_PARAM_VALUE = 1e14;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit PROXY_TOKENOMICS need comments\n28:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit ETH_TOKEN_ADDRESS need comments\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit owner need comments\n59:     address public owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L59-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit ETHFromServices need comments\n62:     uint96 public ETHFromServices;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L62-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit olas need comments\n65:     address public olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit ETHOwned need comments\n68:     uint96 public ETHOwned;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit tokenomics need comments\n71:     address public tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L71-L71"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit minAcceptedETH need comments\n73:     uint96 public minAcceptedETH = 0.065 ether;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit depository need comments\n76:     address public depository;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit paused need comments\n78:     uint8 public paused = 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit _locked need comments\n80:     uint8 internal _locked;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit dispenser need comments\n83:     address public dispenser;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L83-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit mapTokenReserves need comments\n86:     mapping(address => uint256) public mapTokenReserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit mapEnabledTokens need comments\n88:     mapping(address => bool) public mapEnabledTokens;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L88-L88"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Numeric values having to do with time should use time units for readability",
      "description": "There are [units](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#time-units) for seconds, minutes, hours, days, and weeks, and since they're defined, they should be use",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the value 86400,4,365, should use time units\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the value 86400,4,365, should use time units\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the value  should use time units\n433:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L433-L433"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the value  should use time units\n487:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L487-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit the value  should use time units\n664:             blockTime += (dt * (blockNumber - point.blockNumber)) / dBlock;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L664-L664"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contract declarations should have NatSpec `@title` annotations",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n85: /// @notice This token supports the ERC20 interface specifications except for transfers and approvals.\n86: contract veOLAS is IErrors, IVotes, IERC20, IERC165 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L85-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n13: interface IVEOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n4: /// @dev Interface to process message across the bridge.\n5: interface IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n4: /// @dev Interface to the AMB Contract Proxy.\n5: interface IAMB {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n4: /// @dev ERC20 token interface.\n5: interface IERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n4: /// @dev Errors.\n5: interface IErrors {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n5: interface IGnosisSafeProxyFactory {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n5: interface IGnosisSafe {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n4: /// @dev Errors.\n5: interface IErrorsRegistries {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n4: /// @dev Required interface for the component / agent manipulation.\n5: interface IRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n4: /// @dev DonatorBlacklist interface.\n5: interface IDonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n4: /// @dev Errors.\n5: interface IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n4: /// @dev Interface for generic bond calculator.\n5: interface IGenericBondCalculator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n4: /// @dev Required interface for the service registry.\n5: interface IServiceRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n4: /// @dev Generic token interface for IERC20 and IERC721 tokens.\n5: interface IToken {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n4: /// @dev Interface for tokenomics management.\n5: interface ITokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n4: /// @dev Interface for treasury management.\n5: interface ITreasury {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n5: interface IUniswapV2Pair {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n4: /// @dev Interface for voting escrow.\n5: interface IVotingEscrow {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L4-L5"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Top level pragma declarations should be separated by two blank lines",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n2: pragma solidity ^0.8.20;\n3: \n4: import {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n2: pragma solidity ^0.8.20;\n3: \n4: import \"@openzeppelin/contracts/governance/TimelockController.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"../lib/solmate/src/tokens/ERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"@openzeppelin/contracts/governance/utils/IVotes.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n2: pragma solidity ^0.8.23;\n3: \n4: import {Enum} from \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n4: import {Enum} from \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n5: \n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L4-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n2: pragma solidity ^0.8.23;\n3: \n4: import {ERC20} from \"../../lib/solmate/src/tokens/ERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n2: pragma solidity ^0.8.23;\n3: \n4: import {FxBaseChildTunnel} from \"../../lib/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n2: pragma solidity ^0.8.23;\n3: \n4: import {FxBaseRootTunnel} from \"../../lib/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"../lib/solmate/src/tokens/ERC721.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"./GenericRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"./UnitRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"./UnitRegistry.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"./interfaces/IErrorsRegistries.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n3: \n4: import \"./GenericManager.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n2: pragma solidity ^0.8.20;\n3: \n4: import {IErrorsTokenomics} from \"./interfaces/IErrorsTokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n3: \n4: import \"./interfaces/IErrorsTokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n3: \n4: import {mulDiv} from \"@prb/math/src/Common.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n2: pragma solidity ^0.8.20;\n3: \n4: import \"./TokenomicsConstants.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n2: pragma solidity ^0.8.20;\n3: \n4: import \"@prb/math/src/UD60x18.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n3: \n4: import \"./interfaces/IErrorsTokenomics.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n3: \n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L4"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "uint variables should have the bit size defined explicitly",
      "description": "Instead of using uint to declare uint258, explicitly define uint258 to ensure there is no confusion",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n//@audit ``\n6:     function totalSupply() external view returns (uint);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L6-L6"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Uncommented fields in a struct",
      "description": "Consider adding comments for all the fields in a struct to improve the readability of the codebase.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit Add explanational comments to the following items `endTime`, \n61: struct LockedBalance {\n62:     // Token amount. It will never practically be bigger. Initial OLAS cap is 1 bn tokens, or 1e27.\n63:     // After 10 years, the inflation rate is 2% per year. It would take 1340+ years to reach 2^128 - 1\n64:     uint128 amount;\n65:     // Unlock time. It will never practically be bigger\n66:     uint64 endTime;\n67: }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L61-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit Add explanational comments to the following items `bias`, \n05: struct PointVoting {\n06:     int128 bias;\n07:     int128 slope;\n08:     uint64 ts;\n09:     uint64 blockNumber;\n10:     uint128 balance;\n11: }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L5-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Add explanational comments to the following items `numNewUnits`, `topUpUnitFraction`, \n43: struct UnitPoint {\n44:     // Summation of all the relative OLAS top-ups accumulated by each component / agent in a service\n45:     // After 10 years, the OLAS inflation rate is 2% per year. It would take 220+ years to reach 2^96 - 1\n46:     uint96 sumUnitTopUpsOLAS;\n47:     // Number of new units\n48:     // This number cannot be practically bigger than the total number of supported units\n49:     uint32 numNewUnits;\n50:     // Reward component / agent fraction\n51:     // This number cannot be practically bigger than 100 as the summation with other fractions gives at most 100 (%)\n52:     uint8 rewardUnitFraction;\n53:     // Top-up component / agent fraction\n54:     // This number cannot be practically bigger than 100 as the summation with other fractions gives at most 100 (%)\n55:     uint8 topUpUnitFraction;\n56: }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L43-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Add explanational comments to the following items `totalTopUpsOLAS`, \n60: struct EpochPoint {\n61:     // Total amount of ETH donations accrued by the protocol during one epoch\n62:     // Even if the ETH inflation rate is 5% per year, it would take 130+ years to reach 2^96 - 1 of ETH total supply\n63:     uint96 totalDonationsETH;\n64:     // Amount of OLAS intended to fund top-ups for the epoch based on the inflation schedule\n65:     // After 10 years, the OLAS inflation rate is 2% per year. It would take 220+ years to reach 2^96 - 1\n66:     uint96 totalTopUpsOLAS;\n67:     // Inverse of the discount factor\n68:     // IDF is bound by a factor of 18, since (2^64 - 1) / 10^18 > 18\n69:     // IDF uses a multiplier of 10^18 by default, since it is a rational number and must be accounted for divisions\n70:     // The IDF depends on the epsilonRate value, idf = 1 + epsilonRate, and epsilonRate is bound by 17 with 18 decimals\n71:     uint64 idf;\n72:     // Number of new owners\n73:     // Each unit has at most one owner, so this number cannot be practically bigger than numNewUnits\n74:     uint32 numNewOwners;\n75:     // Epoch end timestamp\n76:     // 2^32 - 1 gives 136+ years counted in seconds starting from the year 1970, which is safe until the year of 2106\n77:     uint32 endTime;\n78:     // Parameters for rewards and top-ups (in percentage)\n79:     // Each of these numbers cannot be practically bigger than 100 as they sum up to 100%\n80:     // treasuryFraction + rewardComponentFraction + rewardAgentFraction = 100%\n81:     // Treasury fraction\n82:     uint8 rewardTreasuryFraction;\n83:     // maxBondFraction + topUpComponentFraction + topUpAgentFraction <= 100%\n84:     // Amount of OLAS (in percentage of inflation) intended to fund bonding incentives during the epoch\n85:     uint8 maxBondFraction;\n86: }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L60-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Add explanational comments to the following items `pendingRelativeReward`, `pendingRelativeTopUp`, `lastEpoch`, \n099: struct IncentiveBalances {\n100:     // Reward in ETH\n101:     // Even if the ETH inflation rate is 5% per year, it would take 130+ years to reach 2^96 - 1 of ETH total supply\n102:     uint96 reward;\n103:     // Pending relative reward in ETH\n104:     uint96 pendingRelativeReward;\n105:     // Top-up in OLAS\n106:     // After 10 years, the OLAS inflation rate is 2% per year. It would take 220+ years to reach 2^96 - 1\n107:     uint96 topUp;\n108:     // Pending relative top-up\n109:     uint96 pendingRelativeTopUp;\n110:     // Last epoch number the information was updated\n111:     // This number cannot be practically bigger than the number of blocks\n112:     uint32 lastEpoch;\n113: }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L99-L113"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Event is missing `indexed` fields",
      "description": "Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n94:     event Deposit(address indexed account, uint256 amount, uint256 locktime, DepositType depositType, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n95:     event Withdraw(address indexed account, uint256 amount, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n96:     event Supply(uint256 previousSupply, uint256 currentSupply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L96-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n90:     event SetTargetSelectors(address[] indexed targets, bytes4[] indexed selectors, uint256[] chainIds, bool[] statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n91:     event SetBridgeMediators(address[] indexed bridgeMediatorL1s, address[] indexed bridgeMediatorL2s, uint256[] chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n49:     event MessageReceived(uint256 indexed stateId, address indexed rootMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n49:     event MessageReceived(address indexed foreignMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n12:     event BaseURIChanged(string baseURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n9:     event CreateUnit(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n10:     event UpdateUnitHash(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n69:     event RedeemBond(uint256 indexed productId, address indexed owner, uint256 bondId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n70:     event CreateProduct(address indexed token, uint256 indexed productId, uint256 supply, uint256 priceLP,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L70-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n72:     event CloseProduct(address indexed token, uint256 indexed productId, uint256 supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n15:     event IncentivesClaimed(address indexed owner, uint256 reward, uint256 topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n22:     event DonatorBlacklistStatus(address indexed account, bool status);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n123:     event EpochLengthUpdated(uint256 epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n124:     event EffectiveBondUpdated(uint256 effectiveBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n125:     event IDFUpdated(uint256 idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n126:     event TokenomicsParametersUpdateRequested(uint256 indexed epochNumber, uint256 devsPerCapital, uint256 codePerDev,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n129:     event IncentiveFractionsUpdateRequested(uint256 indexed epochNumber, uint256 rewardComponentFraction,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L129-L129"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n136:     event EpochSettled(uint256 indexed epochCounter, uint256 treasuryRewards, uint256 accountRewards, uint256 accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n44:     event DepositTokenFromAccount(address indexed account, address indexed token, uint256 tokenAmount, uint256 olasAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n45:     event DonateToServicesETH(address indexed sender, uint256[] serviceIds, uint256[] amounts, uint256 donation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n46:     event Withdraw(address indexed token, address indexed to, uint256 tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n49:     event ReceiveETH(address indexed sender, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n50:     event UpdateTreasuryBalances(uint256 ETHOwned, uint256 ETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n53:     event MinAcceptedETHUpdated(uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L53-L53"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Unused `error` definition",
      "description": "Note that there may be cases where an error superficially appears to be used, but this is only because there are multiple definitions of the error in different files. In such cases, the error definition should be moved into a separate file. The instances below are the unused definitions.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n47: error BridgeMediatorNotUnique(address bridgeMediator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n17:     error HashExists();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n24:     error WrongAgentId(uint256 agentId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n47:     error AgentInstanceRegistered(address operator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n51:     error WrongOperator(uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n56:     error OperatorHasNoInstances(address operator, uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n61:     error AgentNotInService(uint256 agentId, uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L61-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n76:     error ServiceMustBeInactive(uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n80:     error AgentInstancesSlotsFilled(uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n85:     error WrongServiceState(uint256 state, uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n91:     error OnlyOwnServiceMultisig(address provided, address expected, uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n101:     error IncorrectRegistrationDepositValue(uint256 sent, uint256 expected, uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n107:     error IncorrectAgentBondingValue(uint256 sent, uint256 expected, uint256 serviceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L107-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n50:     error WrongTokenAddress(address provided, address expected);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n61:     error ProductExpired(address tokenAddress, uint256 productId, uint256 deadline, uint256 curTime);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L61-L61"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Unused `event` definition",
      "description": "The following events are never used, consider to remove them.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit EpochLengthUpdated is never used\n123:     event EpochLengthUpdated(uint256 epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L123-L123"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Unused Import",
      "description": "Some files/Items are imported but never used",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit `UD60x18` is not used\n4: import \"@prb/math/src/UD60x18.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L4-L4"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing upgradability functionality",
      "description": "At the begining of a project, there is always the need to modify of add something to the source code especialy if any vulnerability is discovered. Therefore, having such system is crusial at least at the first stages of the project",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n1: // SPDX-License-Identifier: MIT\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L1-L1"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use `abi.encodeCall()` instead of `abi.encodeSignature()`/`abi.encodeSelector()`",
      "description": "`abi.encodeCall()` has compiler [type safety](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3693), whereas the other two functions do not",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n102:         bytes memory safeParams = abi.encodeWithSelector(GNOSIS_SAFE_SETUP_SELECTOR, owners, threshold,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L102-L102"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use `string.concat()` on strings instead of `abi.encodePacked()` for clearer semantic meaning",
      "description": "Starting with version 0.8.12, Solidity has the `string.concat()` function, which allows one to concatenate a list of strings, without extra padding. Using this function rather than `abi.encodePacked()` makes the intended operation more clear, leading to less reviewer confusion.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n139:         return string(abi.encodePacked(baseURI, CID_PREFIX, _toHex16(bytes16(unitHash)),\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L139-L139"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Constants should be defined rather than using magic numbers",
      "description": "Even [assembly](https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39) can benefit from using readable constants instead of hex/numeric literals",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit Try to make a `constant` with `18` value\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit Try to make a `constant` with `9` value\n105:         if (numYears > 9) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit Try to make a `constant` with `9` value\n107:             numYears -= 9;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L107-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit Try to make a `constant` with `100` value\n109:                 supplyCap += (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L109-L109"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit Try to make a `constant` with `255` value\n232:             for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit Try to make a `constant` with `128` value\n561:         for (uint256 i = 0; i < 128; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L561-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit Try to make a `constant` with `255` value\n693:         for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L693-L693"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `160` value\n194:         targetSelectorChainId |= uint256(uint32(bytes4(data))) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L194-L194"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `192` value\n196:         targetSelectorChainId |= chainId << 192;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L196-L196"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `100` value\n259:         if (chainId == 100 || chainId == 10200) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `10200` value\n259:         if (chainId == 100 || chainId == 10200) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `137` value\n304:         if (chainId == 137 || chainId == 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `80001` value\n304:         if (chainId == 137 || chainId == 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `4` value\n274:                 payload[i] = data[i + 4];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L274-L274"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `4` value\n341:             payload[i] = data[i + 4];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L341-L341"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `160` value\n370:                 uint256 chainId = bridgeMediatorL2ChainId >> 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L370-L370"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `160` value\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L478-L478"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `192` value\n480:             targetSelectorChainId |= chainIds[i] << 192;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L480-L480"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `80001` value\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `160` value\n527:             bridgeMediatorL2ChainId |= chainId << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L527-L527"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `10200` value\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `100` value\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `137` value\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `160` value\n586:         targetSelectorChainId |= uint256(uint32(selector)) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L586-L586"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `192` value\n588:         targetSelectorChainId |= chainId << 192;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L588-L588"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit Try to make a `constant` with `160` value\n605:         chainId = bridgeMediatorL2ChainId >> 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L605-L605"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000` value\n110:         result = bytes32 (data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L110-L110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `64` value\n111:         (bytes32 (data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000` value\n112:         result = result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `32` value\n113:         (result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000` value\n114:         result = result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L114-L114"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `16` value\n115:         (result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000` value\n116:         result = result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L116-L116"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `8` value\n117:         (result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `4` value\n118:         result = (result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L118-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `8` value\n119:         (result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x3030303030303030303030303030303030303030303030303030303030303030` value\n120:         result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `39` value\n123:             0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 39);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000` value\n111:         (bytes32 (data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000` value\n113:         (result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000` value\n115:         (result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000` value\n117:         (result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000` value\n118:         result = (result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L118-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00` value\n119:         (result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F` value\n123:             0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 39);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `4` value\n122:             (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `0x0606060606060606060606060606060606060606060606060606060606060606` value\n122:             (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit Try to make a `constant` with `128` value\n140:             _toHex16(bytes16(unitHash << 128))));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `50` value\n360:         uint256 _maxBondFraction = 50;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `10_000e18` value\n293:         veOLASThreshold = 10_000e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L293-L293"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `83` value\n348:         tp.unitPoints[0].rewardUnitFraction = 83;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L348-L348"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `17` value\n349:         tp.unitPoints[1].rewardUnitFraction = 17;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L349-L349"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `41` value\n362:         tp.unitPoints[0].topUpUnitFraction = 41;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L362-L362"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `9` value\n363:         tp.unitPoints[1].topUpUnitFraction = 9;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L363-L363"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n367:         uint256 _maxBond = (_inflationPerSecond * _epochLen * _maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L367-L367"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `17e18` value\n529:         if (_epsilonRate > 0 && _epsilonRate <= 17e18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L529-L529"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n576:         if (_rewardComponentFraction + _rewardAgentFraction > 100) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L576-L576"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n581:         if (_maxBondFraction + _topUpComponentFraction + _topUpAgentFraction > 100) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L581-L581"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n577:             revert WrongAmount(_rewardComponentFraction + _rewardAgentFraction, 100);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L577-L577"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n582:             revert WrongAmount(_maxBondFraction + _topUpComponentFraction + _topUpAgentFraction, 100);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L582-L582"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n592:         tp.epochPoint.rewardTreasuryFraction = uint8(100 - _rewardComponentFraction - _rewardAgentFraction);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L592-L592"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n674:             uint256 sumUnitIncentives = uint256(mapEpochTokenomics[epochNum].unitPoints[unitType].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L674-L674"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n659:             totalIncentives = mapUnitIncentives[unitType][unitId].reward + totalIncentives / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L659-L659"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `4` value\n693:         bool[] memory incentiveFlags = new bool[](4);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L693-L693"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100e18` value\n852:         fp = fp.div(UD60x18.wrap(100e18));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L852-L852"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `7` value\n913:         uint256[] memory incentives = new uint256[](7);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L913-L913"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n915:         incentives[1] = (incentives[0] * tp.epochPoint.rewardTreasuryFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L915-L915"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n917:         incentives[2] = (incentives[0] * tp.unitPoints[0].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L917-L917"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n918:         incentives[3] = (incentives[0] * tp.unitPoints[1].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L918-L918"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n951:         incentives[4] = (inflationPerEpoch * tp.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L951-L951"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n1054:         incentives[5] = (inflationPerEpoch * tp.unitPoints[0].topUpUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1054-L1054"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n1056:         incentives[6] = (inflationPerEpoch * tp.unitPoints[1].topUpUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1056-L1056"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `0x04` value\n942:             tokenomicsParametersUpdated = tokenomicsParametersUpdated | 0x04;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L942-L942"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n1023:             curMaxBond = (inflationPerEpoch * nextEpochPoint.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1023-L1023"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n1030:             curMaxBond = (curEpochLen * curInflationPerSecond * nextEpochPoint.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1030-L1030"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1222-L1222"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Try to make a `constant` with `100` value\n1213:                     reward += totalIncentives / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1213-L1213"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `10` value\n32:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `9` value\n48:             numYears -= 9;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `529_659_000_00e16` value\n34:                 529_659_000_00e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L34-L34"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `569_913_084_00e16` value\n35:                 569_913_084_00e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `641_152_219_50e16` value\n36:                 641_152_219_50e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `708_500_141_72e16` value\n37:                 708_500_141_72e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L37-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `771_039_876_00e16` value\n38:                 771_039_876_00e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `828_233_282_97e16` value\n39:                 828_233_282_97e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `879_860_040_11e16` value\n40:                 879_860_040_11e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `925_948_139_65e16` value\n41:                 925_948_139_65e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `966_706_331_40e16` value\n42:                 966_706_331_40e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `100` value\n56:                 supplyCap += (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `10` value\n68:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `9` value\n85:             numYears -= 9;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `3_159_000_00e16` value\n71:                 3_159_000_00e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L71-L71"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `40_254_084_00e16` value\n72:                 40_254_084_00e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `71_239_135_50e16` value\n73:                 71_239_135_50e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `67_347_922_22e16` value\n74:                 67_347_922_22e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `62_539_734_28e16` value\n75:                 62_539_734_28e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `57_193_406_97e16` value\n76:                 57_193_406_97e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `51_626_757_14e16` value\n77:                 51_626_757_14e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `46_088_099_54e16` value\n78:                 46_088_099_54e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `40_758_191_75e16` value\n79:                 40_758_191_75e16,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `33_293_668_60e16` value\n80:                 33_293_668_60e16\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `100` value\n97:             inflationAmount = (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n//@audit Try to make a `constant` with `100` value\n93:                 supplyCap += (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L93-L93"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use the latest solidity (prior to 0.8.20 if on L2s) for deployment",
      "description": "```\nWhen deploying contracts, you should use the latest released version of Solidity.Apart from exceptional cases, only the latest version receives security fixes.\n```\nhttps://docs.soliditylang.org/en/v0.8.20/",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use a single file for system wide constants",
      "description": "Consider grouping all the system constants under a single file. This finding shows only the first constant for each file.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n99:     uint64 internal constant WEEK = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n136:     string public constant name = \"Voting Escrow OLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n33:     string public constant CID_PREFIX = \"f01701220\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n10:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n13:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n26:     bytes4 public constant GNOSIS_SAFE_SETUP_SELECTOR = 0xb63e800d;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n75:     uint256 public constant MIN_VESTING = 1 days;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n11:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n28:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider using SMTChecker",
      "description": "The SMTChecker is a valuable tool for Solidity developers as it helps detect potential vulnerabilities and logical errors in the contract's code. By utilizing Satisfiability Modulo Theories (SMT) solvers, it can reason about the potential states a contract can be in, and therefore, identify conditions that could lead to undesirable behavior. This automatic formal verification can catch issues that might otherwise be missed in manual code reviews or standard testing, enhancing the overall contract's security and reliability.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n2: pragma solidity ^0.8.23;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n2: pragma solidity ^0.8.21;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n2: pragma solidity ^0.8.21;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Variable name must be in mixedCase",
      "description": "Avoid using underscore for variable Names or parameters",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit block_slope\n221:         uint256 block_slope; // dblock/dt\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L221-L221"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Whitespace in Expressions",
      "description": "See the [Whitespace in Expressions](https://docs.soliditylang.org/en/latest/style-guide.html#whitespace-in-expressions) section of the Solidity Style Guide",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit remove the whiteSpace before the ')' char\n624:         (PointVoting memory uPoint, ) = _findPointByBlock(blockNumber, account);\n625:         // If the block number at the point index is bigger than the specified block number, the balance was zero\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L624-L625"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit remove the whiteSpace before the ')' char\n674:         (PointVoting memory uPoint, ) = _findPointByBlock(blockNumber, account);\n675: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L674-L675"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit remove the whiteSpace before the ')' char\n728:         (PointVoting memory sPoint, ) = _findPointByBlock(blockNumber, address(0));\n729:         // If the block number at the point index is bigger than the specified block number, the balance was zero\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L728-L729"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit remove the whiteSpace before the ')' char\n278:             (address homeMediator, bytes memory mediatorPayload, ) = abi.decode(payload, (address, bytes, uint256));\n279:             // Check that the home mediator matches the L2 bridge mediator address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L278-L279"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit remove the whiteSpace before the ')' char\n351:             (targets[0], , callDatas[0], , , ) =\n352:                 abi.decode(payload, (address, uint256, bytes, bytes32, bytes32, uint256));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L351-L352"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit remove the whiteSpace before the ',' char\n351:             (targets[0], , callDatas[0], , , ) =\n352:                 abi.decode(payload, (address, uint256, bytes, bytes32, bytes32, uint256));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L351-L352"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit remove the whiteSpace before the ')' char\n355:             (targets, , callDatas, , , ) =\n356:             abi.decode(payload, (address[], uint256[], bytes[], bytes32, bytes32, uint256));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L355-L356"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit remove the whiteSpace before the ',' char\n355:             (targets, , callDatas, , , ) =\n356:             abi.decode(payload, (address[], uint256[], bytes[], bytes32, bytes32, uint256));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L355-L356"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit remove the whiteSpace before the ')' char\n160:             (bool success, ) = target.call{value: value}(payload);\n161:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L160-L161"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit remove the whiteSpace before the ')' char\n160:             (bool success, ) = target.call{value: value}(payload);\n161:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L160-L161"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit remove the whiteSpace before the ')' char\n60:             (subComponentIds, ) = IRegistry(componentRegistry).getLocalSubComponents(uint256(unitId));\n61:         } else {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L60-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit remove the whiteSpace before the ')' char\n118:             (bool success, ) = multisig.call(payload);\n119:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L118-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit remove the whiteSpace before the ')' char\n80:             (reserve0, reserve1, ) = pair.getReserves();\n81:             // token0 != olas && token1 != olas, this should never happen\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L80-L81"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit remove the whiteSpace before the ')' char\n48:         (bool success, ) = tokenomics.delegatecall(tokenomicsData);\n49:         if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L48-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit remove the whiteSpace before the ')' char\n339:                 (success, ) = to.call{value: tokenAmount}(\"\");\n340:                 if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L339-L340"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit remove the whiteSpace before the ')' char\n406:             (success, ) = account.call{value: accountRewards}(\"\");\n407:             if (!success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L406-L407"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Complex function controle flow",
      "description": "Due to multiple if, loop and conditions the following functions has a very complex controle flow that could make auditing very difficult to cover all possible path\\nTherefore, consider breaking down these blocks into more manageable units, by splitting things into utility functions, by reducing nesting, and by using early returns",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n173:     function _checkpoint(\n174:         address account,\n175:         LockedBalance memory oldLocked,\n176:         LockedBalance memory newLocked,\n177:         uint128 curSupply\n178:     ) internal {\n179:         PointVoting memory uOld;\n180:         PointVoting memory uNew;\n181:         int128 oldDSlope;\n182:         int128 newDSlope;\n183:         uint256 curNumPoint = totalNumPoints;\n184: \n185:         if (account != address(0)) {\n186:             // Calculate slopes and biases\n187:             // Kept at zero when they have to\n188:             if (oldLocked.endTime > block.timestamp && oldLocked.amount > 0) {\n189:                 uOld.slope = int128(oldLocked.amount) / IMAXTIME;\n190:                 uOld.bias = uOld.slope * int128(uint128(oldLocked.endTime - uint64(block.timestamp)));\n191:             }\n192:             if (newLocked.endTime > block.timestamp && newLocked.amount > 0) {\n193:                 uNew.slope = int128(newLocked.amount) / IMAXTIME;\n194:                 uNew.bias = uNew.slope * int128(uint128(newLocked.endTime - uint64(block.timestamp)));\n195:             }\n196: \n197:             // Reads values of scheduled changes in the slope\n198:             // oldLocked.endTime can be in the past and in the future\n199:             // newLocked.endTime can ONLY be in the FUTURE unless everything is expired: then zeros\n200:             oldDSlope = mapSlopeChanges[oldLocked.endTime];\n201:             if (newLocked.endTime > 0) {\n202:                 if (newLocked.endTime == oldLocked.endTime) {\n203:                     newDSlope = oldDSlope;\n204:                 } else {\n205:                     newDSlope = mapSlopeChanges[newLocked.endTime];\n206:                 }\n207:             }\n208:         }\n209: \n210:         PointVoting memory lastPoint;\n211:         if (curNumPoint > 0) {\n212:             lastPoint = mapSupplyPoints[curNumPoint];\n213:         } else {\n214:             // If no point is created yet, we take the actual time and block parameters\n215:             lastPoint = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n216:         }\n217:         uint64 lastCheckpoint = lastPoint.ts;\n218:         // initialPoint is used for extrapolation to calculate the block number and save them\n219:         // as we cannot figure that out in exact values from inside of the contract\n220:         PointVoting memory initialPoint = lastPoint;\n221:         uint256 block_slope; // dblock/dt\n222:         if (block.timestamp > lastPoint.ts) {\n223:             // This 1e18 multiplier is needed for the numerator to be bigger than the denominator\n224:             // We need to calculate this in > uint64 size (1e18 is > 2^59 multiplied by 2^64).\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n226:         }\n227:         // If last point is already recorded in this block, slope == 0, but we know the block already in this case\n228:         // Go over weeks to fill in the history and (or) calculate what the current point is\n229:         {\n230:             // The timestamp is rounded by a week and < 2^64-1\n231:             uint64 tStep = (lastCheckpoint / WEEK) * WEEK;\n232:             for (uint256 i = 0; i < 255; ++i) {\n233:                 // Hopefully it won't happen that this won't get used in 5 years!\n234:                 // If it does, users will be able to withdraw but vote weight will be broken\n235:                 // This is always practically < 2^64-1\n236:                 unchecked {\n237:                     tStep += WEEK;\n238:                 }\n239:                 int128 dSlope;\n240:                 if (tStep > block.timestamp) {\n241:                     tStep = uint64(block.timestamp);\n242:                 } else {\n243:                     dSlope = mapSlopeChanges[tStep];\n244:                 }\n245:                 lastPoint.bias -= lastPoint.slope * int128(int64(tStep - lastCheckpoint));\n246:                 lastPoint.slope += dSlope;\n247:                 if (lastPoint.bias < 0) {\n248:                     // This could potentially happen, but fuzzer didn't find available \"real\" combinations\n249:                     lastPoint.bias = 0;\n250:                 }\n251:                 if (lastPoint.slope < 0) {\n252:                     // This cannot happen - just in case. Again, fuzzer didn't reach this\n253:                     lastPoint.slope = 0;\n254:                 }\n255:                 lastCheckpoint = tStep;\n256:                 lastPoint.ts = tStep;\n257:                 // After division by 1e18 the uint64 size can be reclaimed\n258:                 lastPoint.blockNumber = initialPoint.blockNumber + uint64((block_slope * uint256(tStep - initialPoint.ts)) / 1e18);\n259:                 lastPoint.balance = initialPoint.balance;\n260:                 // In order for the overflow of total number of economical checkpoints (starting from zero)\n261:                 // The _checkpoint() call must happen n >(2^256 -1)/255 or n > ~1e77/255 > ~1e74 times\n262:                 unchecked {\n263:                     curNumPoint += 1;    \n264:                 }\n265:                 if (tStep == block.timestamp) {\n266:                     lastPoint.blockNumber = uint64(block.number);\n267:                     lastPoint.balance = curSupply;\n268:                     break;\n269:                 } else {\n270:                     mapSupplyPoints[curNumPoint] = lastPoint;\n271:                 }\n272:             }\n273:         }\n274: \n275:         totalNumPoints = curNumPoint;\n276: \n277:         // Now mapSupplyPoints is filled until current time\n278:         if (account != address(0)) {\n279:             // If last point was in this block, the slope change has been already applied. In such case we have 0 slope(s)\n280:             lastPoint.slope += (uNew.slope - uOld.slope);\n281:             lastPoint.bias += (uNew.bias - uOld.bias);\n282:             if (lastPoint.slope < 0) {\n283:                 lastPoint.slope = 0;\n284:             }\n285:             if (lastPoint.bias < 0) {\n286:                 lastPoint.bias = 0;\n287:             }\n288:         }\n289: \n290:         // Record the last updated point\n291:         mapSupplyPoints[curNumPoint] = lastPoint;\n292: \n293:         if (account != address(0)) {\n294:             // Schedule the slope changes (slope is going down)\n295:             // We subtract new_user_slope from [newLocked.endTime]\n296:             // and add old_user_slope to [oldLocked.endTime]\n297:             if (oldLocked.endTime > block.timestamp) {\n298:                 // oldDSlope was <something> - uOld.slope, so we cancel that\n299:                 oldDSlope += uOld.slope;\n300:                 if (newLocked.endTime == oldLocked.endTime) {\n301:                     oldDSlope -= uNew.slope; // It was a new deposit, not extension\n302:                 }\n303:                 mapSlopeChanges[oldLocked.endTime] = oldDSlope;\n304:             }\n305: \n306:             if (newLocked.endTime > block.timestamp && newLocked.endTime > oldLocked.endTime) {\n307:                 newDSlope -= uNew.slope; // old slope disappeared at this point\n308:                 mapSlopeChanges[newLocked.endTime] = newDSlope;\n309:                 // else: we recorded it already in oldDSlope\n310:             }\n311:             // Now handle user history\n312:             uNew.ts = uint64(block.timestamp);\n313:             uNew.blockNumber = uint64(block.number);\n314:             uNew.balance = newLocked.amount;\n315:             mapUserPoints[account].push(uNew);\n316:         }\n317:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L173-L317"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n542:     function _findPointByBlock(uint256 blockNumber, address account) internal view\n543:         returns (PointVoting memory point, uint256 minPointNumber)\n544:     {\n545:         // Get the last available point number\n546:         uint256 maxPointNumber;\n547:         if (account == address(0)) {\n548:             maxPointNumber = totalNumPoints;\n549:         } else {\n550:             maxPointNumber = mapUserPoints[account].length;\n551:             if (maxPointNumber == 0) {\n552:                 return (point, minPointNumber);\n553:             }\n554:             // Already checked for > 0 in this case\n555:             unchecked {\n556:                 maxPointNumber -= 1;\n557:             }\n558:         }\n559: \n560:         // Binary search that will be always enough for 128-bit numbers\n561:         for (uint256 i = 0; i < 128; ++i) {\n562:             if ((minPointNumber + 1) > maxPointNumber) {\n563:                 break;\n564:             }\n565:             uint256 mid = (minPointNumber + maxPointNumber + 1) / 2;\n566: \n567:             // Choose the source of points\n568:             if (account == address(0)) {\n569:                 point = mapSupplyPoints[mid];\n570:             } else {\n571:                 point = mapUserPoints[account][mid];\n572:             }\n573: \n574:             if (point.blockNumber < (blockNumber + 1)) {\n575:                 minPointNumber = mid;\n576:             } else {\n577:                 maxPointNumber = mid - 1;\n578:             }\n579:         }\n580: \n581:         // Get the found point\n582:         if (account == address(0)) {\n583:             point = mapSupplyPoints[minPointNumber];\n584:         } else {\n585:             point = mapUserPoints[account][minPointNumber];\n586:         }\n587:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L542-L587"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n252:     function _processBridgeData(\n253:         bytes memory data,\n254:         address bridgeMediatorL2,\n255:         uint256 chainId\n256:     ) internal\n257:     {\n258:         // Gnosis chains\n259:         if (chainId == 100 || chainId == 10200) {\n260:             // Check the L1 initial selector\n261:             bytes4 functionSig = bytes4(data);\n262:             if (functionSig != REQUIRE_TO_PASS_MESSAGE) {\n263:                 revert WrongSelector(functionSig, chainId);\n264:             }\n265: \n266:             // Check if the data length is less than a size of a selector plus the message minimum payload size\n267:             if (data.length < MIN_GNOSIS_PAYLOAD_LENGTH) {\n268:                 revert IncorrectDataLength(data.length, MIN_GNOSIS_PAYLOAD_LENGTH);\n269:             }\n270: \n271:             // Copy the data without the selector\n272:             bytes memory payload = new bytes(data.length - SELECTOR_DATA_LENGTH);\n273:             for (uint256 i = 0; i < payload.length; ++i) {\n274:                 payload[i] = data[i + 4];\n275:             }\n276: \n277:             // Decode the requireToPassMessage payload: homeMediator (L2), mediatorPayload (need decoding), requestGasLimit\n278:             (address homeMediator, bytes memory mediatorPayload, ) = abi.decode(payload, (address, bytes, uint256));\n279:             // Check that the home mediator matches the L2 bridge mediator address\n280:             if (homeMediator != bridgeMediatorL2) {\n281:                 revert WrongL2BridgeMediator(homeMediator, bridgeMediatorL2);\n282:             }\n283: \n284:             // Check the L2 initial selector\n285:             functionSig = bytes4(mediatorPayload);\n286:             if (functionSig != PROCESS_MESSAGE_FROM_FOREIGN) {\n287:                 revert WrongSelector(functionSig, chainId);\n288:             }\n289: \n290:             // Copy the data without a selector\n291:             bytes memory bridgePayload = new bytes(mediatorPayload.length - SELECTOR_DATA_LENGTH);\n292:             for (uint256 i = 0; i < bridgePayload.length; ++i) {\n293:                 bridgePayload[i] = mediatorPayload[i + SELECTOR_DATA_LENGTH];\n294:             }\n295: \n296:             // Decode the processMessageFromForeign payload: l2Message (executed on L2)\n297:             (bytes memory l2Message) = abi.decode(bridgePayload, (bytes));\n298: \n299:             // Verify processMessageFromForeign payload\n300:             _verifyBridgedData(l2Message, chainId);\n301:         }\n302: \n303:         // Polygon chains\n304:         if (chainId == 137 || chainId == 80001) {\n305:             // Check the L1 initial selector\n306:             bytes4 functionSig = bytes4(data);\n307:             if (functionSig != SEND_MESSAGE_TO_CHILD) {\n308:                 revert WrongSelector(functionSig, chainId);\n309:             }\n310: \n311:             // Check if the data length is less than a size of a selector plus the message minimum payload size\n312:             if (data.length < MIN_POLYGON_PAYLOAD_LENGTH) {\n313:                 revert IncorrectDataLength(data.length, MIN_POLYGON_PAYLOAD_LENGTH);\n314:             }\n315: \n316:             // Copy the data without the selector\n317:             bytes memory payload = new bytes(data.length - SELECTOR_DATA_LENGTH);\n318:             for (uint256 i = 0; i < payload.length; ++i) {\n319:                 payload[i] = data[i + SELECTOR_DATA_LENGTH];\n320:             }\n321: \n322:             // Decode sendMessageToChild payload: fxGovernorTunnel (L2), l2Message (executed on L2)\n323:             (address fxGovernorTunnel, bytes memory l2Message) = abi.decode(payload, (address, bytes));\n324:             // Check that the fxGovernorTunnel matches the L2 bridge mediator address\n325:             if (fxGovernorTunnel != bridgeMediatorL2) {\n326:                 revert WrongL2BridgeMediator(fxGovernorTunnel, bridgeMediatorL2);\n327:             }\n328: \n329:             // Verify sendMessageToChild payload\n330:             _verifyBridgedData(l2Message, chainId);\n331:         }\n332:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L252-L332"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n388:         address to,\n389:         uint256,\n390:         bytes memory data,\n391:         Enum.Operation operation,\n392:         uint256,\n393:         uint256,\n394:         uint256,\n395:         address,\n396:         address payable,\n397:         bytes memory,\n398:         address\n399:     ) external {\n400:         // Just return if paused\n401:         if (paused == 1) {\n402:             // Call to the timelock\n403:             if (to == owner) {\n404:                 // No delegatecall is allowed\n405:                 if (operation == Enum.Operation.DelegateCall) {\n406:                     revert NoDelegateCall();\n407:                 }\n408: \n409:                 // Data needs to have enough bytes at least to fit the selector\n410:                 if (data.length < SELECTOR_DATA_LENGTH) {\n411:                     revert IncorrectDataLength(data.length, SELECTOR_DATA_LENGTH);\n412:                 }\n413: \n414:                 // Get the function signature\n415:                 bytes4 functionSig = bytes4(data);\n416:                 // Check the schedule or scheduleBatch function authorized parameters\n417:                 // All other functions are not checked for\n418:                 if (functionSig == SCHEDULE || functionSig == SCHEDULE_BATCH) {\n419:                     // Data length is too short: need to have enough bytes for the schedule() function\n420:                     // with one selector extracted from the payload\n421:                     if (data.length < MIN_SCHEDULE_DATA_LENGTH) {\n422:                         revert IncorrectDataLength(data.length, MIN_SCHEDULE_DATA_LENGTH);\n423:                     }\n424: \n425:                     _verifySchedule(data, functionSig);\n426:                 }\n427:             } else if (to == multisig) {\n428:                 // No self multisig call is allowed\n429:                 revert NoSelfCall();\n430:             }\n431:         }\n432:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L432"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n107:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external override {\n108:         // Check for the Fx Child address\n109:         if(msg.sender != fxChild) {\n110:             revert FxChildOnly(msg.sender, fxChild);\n111:         }\n112: \n113:         // Check for the Root Governor address\n114:         if(rootMessageSender != rootGovernor) {\n115:             revert RootGovernorOnly(rootMessageSender, rootGovernor);\n116:         }\n117: \n118:         // Check for the correct data length\n119:         uint256 dataLength = data.length;\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n121:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n122:         }\n123: \n124:         // Unpack and process the data\n125:         for (uint256 i = 0; i < dataLength;) {\n126:             address target;\n127:             uint96 value;\n128:             uint32 payloadLength;\n129:             // solhint-disable-next-line no-inline-assembly\n130:             assembly {\n131:                 // First 20 bytes is the address (160 bits)\n132:                 i := add(i, 20)\n133:                 target := mload(add(data, i))\n134:                 // Offset the data by 12 bytes of value (96 bits)\n135:                 i := add(i, 12)\n136:                 value := mload(add(data, i))\n137:                 // Offset the data by 4 bytes of payload length (32 bits)\n138:                 i := add(i, 4)\n139:                 payloadLength := mload(add(data, i))\n140:             }\n141: \n142:             // Check for the zero address\n143:             if (target == address(0)) {\n144:                 revert ZeroAddress();\n145:             }\n146:             // Check for the value compared to the contract's balance\n147:             if (value > address(this).balance) {\n148:                 revert InsufficientBalance(value, address(this).balance);\n149:             }\n150: \n151:             // Get the payload\n152:             bytes memory payload = new bytes(payloadLength);\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n154:                 payload[j] = data[i + j];\n155:             }\n156:             // Offset the data by the payload number of bytes\n157:             i += payloadLength;\n158: \n159:             // Call the target with the provided payload\n160:             (bool success, ) = target.call{value: value}(payload);\n161:             if (!success) {\n162:                 revert TargetExecFailed(target, value, payload);\n163:             }\n164:         }\n165: \n166:         // Emit received message\n167:         emit MessageReceived(stateId, rootMessageSender, data);\n168:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L107-L168"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n105:     function processMessageFromForeign(bytes memory data) external {\n106:         // Check for the AMB Contract Proxy (Home) address\n107:         if (msg.sender != AMBContractProxyHome) {\n108:             revert AMBContractProxyHomeOnly(msg.sender, AMBContractProxyHome);\n109:         }\n110: \n111:         // Check for the Foreign Governor address\n112:         address governor = foreignGovernor;\n113:         address bridgeGovernor = IAMB(AMBContractProxyHome).messageSender();\n114:         if (bridgeGovernor != governor) {\n115:             revert ForeignGovernorOnly(bridgeGovernor, governor);\n116:         }\n117: \n118:         // Check for the correct data length\n119:         uint256 dataLength = data.length;\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n121:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n122:         }\n123: \n124:         // Unpack and process the data\n125:         for (uint256 i = 0; i < dataLength;) {\n126:             address target;\n127:             uint96 value;\n128:             uint32 payloadLength;\n129:             // solhint-disable-next-line no-inline-assembly\n130:             assembly {\n131:                 // First 20 bytes is the address (160 bits)\n132:                 i := add(i, 20)\n133:                 target := mload(add(data, i))\n134:                 // Offset the data by 12 bytes of value (96 bits)\n135:                 i := add(i, 12)\n136:                 value := mload(add(data, i))\n137:                 // Offset the data by 4 bytes of payload length (32 bits)\n138:                 i := add(i, 4)\n139:                 payloadLength := mload(add(data, i))\n140:             }\n141: \n142:             // Check for the zero address\n143:             if (target == address(0)) {\n144:                 revert ZeroAddress();\n145:             }\n146:             // Check for the value compared to the contract's balance\n147:             if (value > address(this).balance) {\n148:                 revert InsufficientBalance(value, address(this).balance);\n149:             }\n150: \n151:             // Get the payload\n152:             bytes memory payload = new bytes(payloadLength);\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n154:                 payload[j] = data[i + j];\n155:             }\n156:             // Offset the data by the payload number of bytes\n157:             i += payloadLength;\n158: \n159:             // Call the target with the provided payload\n160:             (bool success, ) = target.call{value: value}(payload);\n161:             if (!success) {\n162:                 revert TargetExecFailed(target, value, payload);\n163:             }\n164:         }\n165: \n166:         // Emit received message\n167:         emit MessageReceived(governor, data);\n168:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L168"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n085:     function create(\n086:         address[] memory owners,\n087:         uint256 threshold,\n088:         bytes memory data\n089:     ) external returns (address multisig)\n090:     {\n091:         // Check for the correct data length\n092:         uint256 dataLength = data.length;\n093:         if (dataLength < DEFAULT_DATA_LENGTH) {\n094:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n095:         }\n096: \n097:         // Read the proxy multisig address (20 bytes) and the multisig-related data\n098:         assembly {\n099:             multisig := mload(add(data, DEFAULT_DATA_LENGTH))\n100:         }\n101: \n102:         // Check that the multisig address corresponds to the authorized multisig proxy bytecode hash\n103:         bytes32 multisigProxyHash = keccak256(multisig.code);\n104:         if (proxyHash != multisigProxyHash) {\n105:             revert UnauthorizedMultisig(multisig);\n106:         }\n107: \n108:         // If provided, read the payload that is going to change the multisig ownership and threshold\n109:         // The payload is expected to be the `execTransaction()` function call with all its arguments and signature(s)\n110:         if (dataLength > DEFAULT_DATA_LENGTH) {\n111:             uint256 payloadLength = dataLength - DEFAULT_DATA_LENGTH;\n112:             bytes memory payload = new bytes(payloadLength);\n113:             for (uint256 i = 0; i < payloadLength; ++i) {\n114:                 payload[i] = data[i + DEFAULT_DATA_LENGTH];\n115:             }\n116: \n117:             // Call the multisig with the provided payload\n118:             (bool success, ) = multisig.call(payload);\n119:             if (!success) {\n120:                 revert MultisigExecFailed(multisig);\n121:             }\n122:         }\n123: \n124:         // Get the provided proxy multisig owners and threshold\n125:         address[] memory checkOwners = IGnosisSafe(multisig).getOwners();\n126:         uint256 checkThreshold = IGnosisSafe(multisig).getThreshold();\n127: \n128:         // Verify updated multisig proxy for provided owners and threshold\n129:         if (threshold != checkThreshold) {\n130:             revert WrongThreshold(checkThreshold, threshold);\n131:         }\n132:         uint256 numOwners = owners.length;\n133:         if (numOwners != checkOwners.length) {\n134:             revert WrongNumOwners(checkOwners.length, numOwners);\n135:         }\n136:         // The owners' addresses in the multisig itself are stored in reverse order compared to how they were added:\n137:         // https://etherscan.io/address/0xd9db270c1b5e3bd161e8c8503c55ceabee709552#code#F6#L56\n138:         // Thus, the check must be carried out accordingly.\n139:         for (uint256 i = 0; i < numOwners; ++i) {\n140:             if (owners[i] != checkOwners[numOwners - i - 1]) {\n141:                 revert WrongOwner(owners[i]);\n142:             }\n143:         }\n144:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n183:     function create(address token, uint256 priceLP, uint256 supply, uint256 vesting) external returns (uint256 productId) {\n184:         // Check for the contract ownership\n185:         if (msg.sender != owner) {\n186:             revert OwnerOnly(msg.sender, owner);\n187:         }\n188: \n189:         // Check for the pool liquidity as the LP price being greater than zero\n190:         if (priceLP == 0) {\n191:             revert ZeroValue();\n192:         }\n193: \n194:         // Check the priceLP limit value\n195:         if (priceLP > type(uint160).max) {\n196:             revert Overflow(priceLP, type(uint160).max);\n197:         }\n198: \n199:         // Check that the supply is greater than zero\n200:         if (supply == 0) {\n201:             revert ZeroValue();\n202:         }\n203: \n204:         // Check the supply limit value\n205:         if (supply > type(uint96).max) {\n206:             revert Overflow(supply, type(uint96).max);\n207:         }\n208: \n209:         // Check the vesting minimum limit value\n210:         if (vesting < MIN_VESTING) {\n211:             revert LowerThan(vesting, MIN_VESTING);\n212:         }\n213: \n214:         // Check for the maturity time overflow for the current timestamp\n215:         uint256 maturity = block.timestamp + vesting;\n216:         if (maturity > type(uint32).max) {\n217:             revert Overflow(maturity, type(uint32).max);\n218:         }\n219: \n220:         // Check if the LP token is enabled\n221:         if (!ITreasury(treasury).isEnabled(token)) {\n222:             revert UnauthorizedToken(token);\n223:         }\n224: \n225:         // Check if the bond amount is beyond the limits\n226:         if (!ITokenomics(tokenomics).reserveAmountForBondProgram(supply)) {\n227:             revert LowerThan(ITokenomics(tokenomics).effectiveBond(), supply);\n228:         }\n229: \n230:         // Push newly created bond product into the list of products\n231:         productId = productCounter;\n232:         mapBondProducts[productId] = Product(uint160(priceLP), uint32(vesting), token, uint96(supply));\n233:         // Even if we create a bond product every second, 2^32 - 1 is enough for the next 136 years\n234:         productCounter = uint32(productId + 1);\n235:         emit CreateProduct(token, productId, supply, priceLP, vesting);\n236:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L183-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n498:         uint256 _devsPerCapital,\n499:         uint256 _codePerDev,\n500:         uint256 _epsilonRate,\n501:         uint256 _epochLen,\n502:         uint256 _veOLASThreshold\n503:     ) external\n504:     {\n505:         // Check for the contract ownership\n506:         if (msg.sender != owner) {\n507:             revert OwnerOnly(msg.sender, owner);\n508:         }\n509: \n510:         // devsPerCapital is the part of the IDF calculation and thus its change will be accounted for in the next epoch\n511:         if (uint72(_devsPerCapital) > MIN_PARAM_VALUE) {\n512:             devsPerCapital = uint72(_devsPerCapital);\n513:         } else {\n514:             // This is done in order not to pass incorrect parameters into the event\n515:             _devsPerCapital = devsPerCapital;\n516:         }\n517: \n518:         // devsPerCapital is the part of the IDF calculation and thus its change will be accounted for in the next epoch\n519:         if (uint72(_codePerDev) > MIN_PARAM_VALUE) {\n520:             codePerDev = uint72(_codePerDev);\n521:         } else {\n522:             // This is done in order not to pass incorrect parameters into the event\n523:             _codePerDev = codePerDev;\n524:         }\n525: \n526:         // Check the epsilonRate value for idf to fit in its size\n527:         // 2^64 - 1 < 18.5e18, idf is equal at most 1 + epsilonRate < 18e18, which fits in the variable size\n528:         // epsilonRate is the part of the IDF calculation and thus its change will be accounted for in the next epoch\n529:         if (_epsilonRate > 0 && _epsilonRate <= 17e18) {\n530:             epsilonRate = uint64(_epsilonRate);\n531:         } else {\n532:             _epsilonRate = epsilonRate;\n533:         }\n534: \n535:         // Check for the epochLen value to change\n536:         if (uint32(_epochLen) >= MIN_EPOCH_LENGTH && uint32(_epochLen) <= ONE_YEAR) {\n537:             nextEpochLen = uint32(_epochLen);\n538:         } else {\n539:             _epochLen = epochLen;\n540:         }\n541: \n542:         // Adjust veOLAS threshold for the next epoch\n543:         if (uint96(_veOLASThreshold) > 0) {\n544:             nextVeOLASThreshold = uint96(_veOLASThreshold);\n545:         } else {\n546:             _veOLASThreshold = veOLASThreshold;\n547:         }\n548: \n549:         // Set the flag that tokenomics parameters are requested to be updated (1st bit is set to one)\n550:         tokenomicsParametersUpdated = tokenomicsParametersUpdated | 0x01;\n551:         emit TokenomicsParametersUpdateRequested(epochCounter + 1, _devsPerCapital, _codePerDev, _epsilonRate, _epochLen,\n552:             _veOLASThreshold);\n553:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L553"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n687:     function _trackServiceDonations(address donator, uint256[] memory serviceIds, uint256[] memory amounts, uint256 curEpoch) internal {\n688:         // Component / agent registry addresses\n689:         address[] memory registries = new address[](2);\n690:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n691: \n692:         // Check all the unit fractions and identify those that need accounting of incentives\n693:         bool[] memory incentiveFlags = new bool[](4);\n694:         incentiveFlags[0] = (mapEpochTokenomics[curEpoch].unitPoints[0].rewardUnitFraction > 0);\n695:         incentiveFlags[1] = (mapEpochTokenomics[curEpoch].unitPoints[1].rewardUnitFraction > 0);\n696:         incentiveFlags[2] = (mapEpochTokenomics[curEpoch].unitPoints[0].topUpUnitFraction > 0);\n697:         incentiveFlags[3] = (mapEpochTokenomics[curEpoch].unitPoints[1].topUpUnitFraction > 0);\n698: \n699:         // Get the number of services\n700:         uint256 numServices = serviceIds.length;\n701:         // Loop over service Ids to calculate their partial contributions\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n711:             }\n712: \n713:             // Loop over component and agent Ids\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n715:                 // Get the number and set of units in the service\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n717:                     getUnitIdsOfService(IServiceRegistry.UnitType(unitType), serviceIds[i]);\n718:                 // Service has to be deployed at least once to be able to receive donations,\n719:                 // otherwise its components and agents are undefined\n720:                 if (numServiceUnits == 0) {\n721:                     revert ServiceNeverDeployed(serviceIds[i]);\n722:                 }\n723:                 // Record amounts data only if at least one incentive unit fraction is not zero\n724:                 if (incentiveFlags[unitType] || incentiveFlags[unitType + 2]) {\n725:                     // The amount has to be adjusted for the number of units in the service\n726:                     uint96 amount = uint96(amounts[i] / numServiceUnits);\n727:                     // Accumulate amounts for each unit Id\n728:                     for (uint256 j = 0; j < numServiceUnits; ++j) {\n729:                         // Get the last epoch number the incentives were accumulated for\n730:                         uint256 lastEpoch = mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch;\n731:                         // Check if there were no donations in previous epochs and set the current epoch\n732:                         if (lastEpoch == 0) {\n733:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n734:                         } else if (lastEpoch < curEpoch) {\n735:                             // Finalize unit rewards and top-ups if there were pending ones from the previous epoch\n736:                             // Pending incentives are getting finalized during the next epoch the component / agent\n737:                             // receives donations. If this is not the case before claiming incentives, the finalization\n738:                             // happens in the accountOwnerIncentives() where the incentives are issued\n739:                             _finalizeIncentivesForUnitId(lastEpoch, unitType, serviceUnitIds[j]);\n740:                             // Change the last epoch number\n741:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n742:                         }\n743:                         // Sum the relative amounts for the corresponding components / agents\n744:                         if (incentiveFlags[unitType]) {\n745:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeReward += amount;\n746:                         }\n747:                         // If eligible, add relative top-up weights in the form of donation amounts.\n748:                         // These weights will represent the fraction of top-ups for each component / agent relative\n749:                         // to the overall amount of top-ups that must be allocated\n750:                         if (topUpEligible && incentiveFlags[unitType + 2]) {\n751:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeTopUp += amount;\n752:                             mapEpochTokenomics[curEpoch].unitPoints[unitType].sumUnitTopUpsOLAS += amount;\n753:                         }\n754:                     }\n755:                 }\n756: \n757:                 // Record new units and new unit owners\n758:                 for (uint256 j = 0; j < numServiceUnits; ++j) {\n759:                     // Check if the component / agent is used for the first time\n760:                     if (!mapNewUnits[unitType][serviceUnitIds[j]]) {\n761:                         mapNewUnits[unitType][serviceUnitIds[j]] = true;\n762:                         mapEpochTokenomics[curEpoch].unitPoints[unitType].numNewUnits++;\n763:                         // Check if the owner has introduced component / agent for the first time\n764:                         // This is done together with the new unit check, otherwise it could be just a new unit owner\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n766:                         if (!mapNewOwners[unitOwner]) {\n767:                             mapNewOwners[unitOwner] = true;\n768:                             mapEpochTokenomics[curEpoch].epochPoint.numNewOwners++;\n769:                         }\n770:                     }\n771:                 }\n772:             }\n773:         }\n774:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L687-L774"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n0880:     function checkpoint() external returns (bool) {\n0881:         // Get the implementation address that was written to the proxy contract\n0882:         address implementation;\n0883:         assembly {\n0884:             implementation := sload(PROXY_TOKENOMICS)\n0885:         }\n0886:         // Check if there is any address in the PROXY_TOKENOMICS address slot\n0887:         if (implementation == address(0)) {\n0888:             revert DelegatecallOnly();\n0889:         }\n0890: \n0891:         // Check the last donation block number to avoid the possibility of a flash loan attack\n0892:         if (lastDonationBlockNumber == block.number) {\n0893:             revert SameBlockNumberViolation();\n0894:         }\n0895: \n0896:         // New point can be calculated only if we passed the number of blocks equal to the epoch length\n0897:         uint256 prevEpochTime = mapEpochTokenomics[epochCounter - 1].epochPoint.endTime;\n0898:         uint256 diffNumSeconds = block.timestamp - prevEpochTime;\n0899:         uint256 curEpochLen = epochLen;\n0900:         // Check if the time passed since the last epoch end time is bigger than the specified epoch length,\n0901:         // but not bigger than a year in seconds\n0902:         if (diffNumSeconds < curEpochLen || diffNumSeconds > ONE_YEAR) {\n0903:             return false;\n0904:         }\n0905: \n0906:         uint256 eCounter = epochCounter;\n0907:         TokenomicsPoint storage tp = mapEpochTokenomics[eCounter];\n0908: \n0909:         // 0: total incentives funded with donations in ETH, that are split between:\n0910:         // 1: treasuryRewards, 2: componentRewards, 3: agentRewards\n0911:         // OLAS inflation is split between:\n0912:         // 4: maxBond, 5: component ownerTopUps, 6: agent ownerTopUps\n0913:         uint256[] memory incentives = new uint256[](7);\n0914:         incentives[0] = tp.epochPoint.totalDonationsETH;\n0915:         incentives[1] = (incentives[0] * tp.epochPoint.rewardTreasuryFraction) / 100;\n0916:         // 0 stands for components and 1 for agents\n0917:         incentives[2] = (incentives[0] * tp.unitPoints[0].rewardUnitFraction) / 100;\n0918:         incentives[3] = (incentives[0] * tp.unitPoints[1].rewardUnitFraction) / 100;\n0919: \n0920:         // The actual inflation per epoch considering that it is settled not in the exact epochLen time, but a bit later\n0921:         uint256 inflationPerEpoch;\n0922:         // Record the current inflation per second\n0923:         uint256 curInflationPerSecond = inflationPerSecond;\n0924:         // Current year\n0925:         uint256 numYears = (block.timestamp - timeLaunch) / ONE_YEAR;\n0926:         // Amounts for the yearly inflation change from year to year, so if the year changes in the middle\n0927:         // of the epoch, it is necessary to adjust epoch inflation numbers to account for the year change\n0928:         if (numYears > currentYear) {\n0929:             // Calculate remainder of inflation for the passing year\n0930:             // End of the year timestamp\n0931:             uint256 yearEndTime = timeLaunch + numYears * ONE_YEAR;\n0932:             // Initial inflation per epoch during the end of the year minus previous epoch timestamp\n0933:             inflationPerEpoch = (yearEndTime - prevEpochTime) * curInflationPerSecond;\n0934:             // Recalculate the inflation per second based on the new inflation for the current year\n0935:             curInflationPerSecond = getInflationForYear(numYears) / ONE_YEAR;\n0936:             // Add the remainder of inflation amount for this epoch based on a new inflation per second ratio\n0937:             inflationPerEpoch += (block.timestamp - yearEndTime) * curInflationPerSecond;\n0938:             // Updating state variables\n0939:             inflationPerSecond = uint96(curInflationPerSecond);\n0940:             currentYear = uint8(numYears);\n0941:             // Set the tokenomics parameters flag such that the maxBond is correctly updated below (3rd bit is set to one)\n0942:             tokenomicsParametersUpdated = tokenomicsParametersUpdated | 0x04;\n0943:         } else {\n0944:             // Inflation per epoch is equal to the inflation per second multiplied by the actual time of the epoch\n0945:             inflationPerEpoch = curInflationPerSecond * diffNumSeconds;\n0946:         }\n0947: \n0948:         // Bonding and top-ups in OLAS are recalculated based on the inflation schedule per epoch\n0949:         // Actual maxBond of the epoch\n0950:         tp.epochPoint.totalTopUpsOLAS = uint96(inflationPerEpoch);\n0951:         incentives[4] = (inflationPerEpoch * tp.epochPoint.maxBondFraction) / 100;\n0952: \n0953:         // Get the maxBond that was credited to effectiveBond during this settled epoch\n0954:         // If the year changes, the maxBond for the next epoch is updated in the condition below and will be used\n0955:         // later when the effectiveBond is updated for the next epoch\n0956:         uint256 curMaxBond = maxBond;\n0957: \n0958:         // Effective bond accumulates bonding leftovers from previous epochs (with the last max bond value set)\n0959:         // It is given the value of the maxBond for the next epoch as a credit\n0960:         // The difference between recalculated max bond per epoch and maxBond value must be reflected in effectiveBond,\n0961:         // since the epoch checkpoint delay was not accounted for initially\n0962:         // This has to be always true, or incentives[4] == curMaxBond if the epoch is settled exactly at the epochLen time\n0963:         if (incentives[4] > curMaxBond) {\n0964:             // Adjust the effectiveBond\n0965:             incentives[4] = effectiveBond + incentives[4] - curMaxBond;\n0966:             effectiveBond = uint96(incentives[4]);\n0967:         }\n0968: \n0969:         // Get the tokenomics point of the next epoch\n0970:         TokenomicsPoint storage nextEpochPoint = mapEpochTokenomics[eCounter + 1];\n0971:         // Update incentive fractions for the next epoch if they were requested by the changeIncentiveFractions() function\n0972:         // Check if the second bit is set to one\n0973:         if (tokenomicsParametersUpdated & 0x02 == 0x02) {\n0974:             // Confirm the change of incentive fractions\n0975:             emit IncentiveFractionsUpdated(eCounter + 1);\n0976:         } else {\n0977:             // Copy current tokenomics point into the next one such that it has necessary tokenomics parameters\n0978:             for (uint256 i = 0; i < 2; ++i) {\n0979:                 nextEpochPoint.unitPoints[i].topUpUnitFraction = tp.unitPoints[i].topUpUnitFraction;\n0980:                 nextEpochPoint.unitPoints[i].rewardUnitFraction = tp.unitPoints[i].rewardUnitFraction;\n0981:             }\n0982:             nextEpochPoint.epochPoint.rewardTreasuryFraction = tp.epochPoint.rewardTreasuryFraction;\n0983:             nextEpochPoint.epochPoint.maxBondFraction = tp.epochPoint.maxBondFraction;\n0984:         }\n0985:         // Update parameters for the next epoch, if changes were requested by the changeTokenomicsParameters() function\n0986:         // Check if the second bit is set to one\n0987:         if (tokenomicsParametersUpdated & 0x01 == 0x01) {\n0988:             // Update epoch length and set the next value back to zero\n0989:             if (nextEpochLen > 0) {\n0990:                 curEpochLen = nextEpochLen;\n0991:                 epochLen = uint32(curEpochLen);\n0992:                 nextEpochLen = 0;\n0993:             }\n0994: \n0995:             // Update veOLAS threshold and set the next value back to zero\n0996:             if (nextVeOLASThreshold > 0) {\n0997:                 veOLASThreshold = nextVeOLASThreshold;\n0998:                 nextVeOLASThreshold = 0;\n0999:             }\n1000: \n1001:             // Confirm the change of tokenomics parameters\n1002:             emit TokenomicsParametersUpdated(eCounter + 1);\n1003:         }\n1004:         // Record settled epoch timestamp\n1005:         tp.epochPoint.endTime = uint32(block.timestamp);\n1006: \n1007:         // Adjust max bond value if the next epoch is going to be the year change epoch\n1008:         // Note that this computation happens before the epoch that is triggered in the next epoch (the code above) when\n1009:         // the actual year changes\n1010:         numYears = (block.timestamp + curEpochLen - timeLaunch) / ONE_YEAR;\n1011:         // Account for the year change to adjust the max bond\n1012:         if (numYears > currentYear) {\n1013:             // Calculate the inflation remainder for the passing year\n1014:             // End of the year timestamp\n1015:             uint256 yearEndTime = timeLaunch + numYears * ONE_YEAR;\n1016:             // Calculate the inflation per epoch value until the end of the year\n1017:             inflationPerEpoch = (yearEndTime - block.timestamp) * curInflationPerSecond;\n1018:             // Recalculate the inflation per second based on the new inflation for the current year\n1019:             curInflationPerSecond = getInflationForYear(numYears) / ONE_YEAR;\n1020:             // Add the remainder of the inflation for the next epoch based on a new inflation per second ratio\n1021:             inflationPerEpoch += (block.timestamp + curEpochLen - yearEndTime) * curInflationPerSecond;\n1022:             // Calculate the max bond value\n1023:             curMaxBond = (inflationPerEpoch * nextEpochPoint.epochPoint.maxBondFraction) / 100;\n1024:             // Update state maxBond value\n1025:             maxBond = uint96(curMaxBond);\n1026:             // Reset the tokenomics parameters update flag\n1027:             tokenomicsParametersUpdated = 0;\n1028:         } else if (tokenomicsParametersUpdated > 0) {\n1029:             // Since tokenomics parameters have been updated, maxBond has to be recalculated\n1030:             curMaxBond = (curEpochLen * curInflationPerSecond * nextEpochPoint.epochPoint.maxBondFraction) / 100;\n1031:             // Update state maxBond value\n1032:             maxBond = uint96(curMaxBond);\n1033:             // Reset the tokenomics parameters update flag\n1034:             tokenomicsParametersUpdated = 0;\n1035:         }\n1036:         // Update effectiveBond with the current or updated maxBond value\n1037:         curMaxBond += effectiveBond;\n1038:         effectiveBond = uint96(curMaxBond);\n1039: \n1040:         // Update the IDF value for the next epoch or assign a default one if there are no ETH donations\n1041:         if (incentives[0] > 0) {\n1042:             // Calculate IDF based on the incoming donations\n1043:             uint256 idf = _calculateIDF(incentives[1], tp.epochPoint.numNewOwners);\n1044:             nextEpochPoint.epochPoint.idf = uint64(idf);\n1045:             emit IDFUpdated(idf);\n1046:         } else {\n1047:             // Assign a default IDF value\n1048:             nextEpochPoint.epochPoint.idf = 1e18;\n1049:         }\n1050: \n1051:         // Cumulative incentives\n1052:         uint256 accountRewards = incentives[2] + incentives[3];\n1053:         // Owner top-ups: epoch incentives for component owners funded with the inflation\n1054:         incentives[5] = (inflationPerEpoch * tp.unitPoints[0].topUpUnitFraction) / 100;\n1055:         // Owner top-ups: epoch incentives for agent owners funded with the inflation\n1056:         incentives[6] = (inflationPerEpoch * tp.unitPoints[1].topUpUnitFraction) / 100;\n1057:         // Even if there was no single donating service owner that had a sufficient veOLAS balance,\n1058:         // we still record the amount of OLAS allocated for component / agent owner top-ups from the inflation schedule.\n1059:         // This amount will appear in the EpochSettled event, and thus can be tracked historically\n1060:         uint256 accountTopUps = incentives[5] + incentives[6];\n1061: \n1062:         // Treasury contract rebalances ETH funds depending on the treasury rewards\n1063:         if (incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1])) {\n1064:             // Emit settled epoch written to the last economics point\n1065:             emit EpochSettled(eCounter, incentives[1], accountRewards, accountTopUps);\n1066:             // Start new epoch\n1067:             epochCounter = uint32(eCounter + 1);\n1068:         } else {\n1069:             // If the treasury rebalance was not executed correctly, the new epoch does not start\n1070:             revert TreasuryRebalanceFailed(eCounter);\n1071:         }\n1072: \n1073:         return true;\n1074:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L880-L1074"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n1086:         returns (uint256 reward, uint256 topUp)\n1087:     {\n1088:         // Check for the dispenser access\n1089:         if (dispenser != msg.sender) {\n1090:             revert ManagerOnly(msg.sender, dispenser);\n1091:         }\n1092: \n1093:         // Check array lengths\n1094:         if (unitTypes.length != unitIds.length) {\n1095:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1096:         }\n1097: \n1098:         // Component / agent registry addresses\n1099:         address[] memory registries = new address[](2);\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1101: \n1102:         // Component / agent total supply\n1103:         uint256[] memory registriesSupply = new uint256[](2);\n1104:         for (uint256 i = 0; i < 2; ++i) {\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1106:         }\n1107: \n1108:         // Check the input data\n1109:         uint256[] memory lastIds = new uint256[](2);\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1111:             // Check for the unit type to be component / agent only\n1112:             if (unitTypes[i] > 1) {\n1113:                 revert Overflow(unitTypes[i], 1);\n1114:             }\n1115: \n1116:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1118:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1119:             }\n1120:             lastIds[unitTypes[i]] = unitIds[i];\n1121: \n1122:             // Check the component / agent Id ownership\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1124:             if (unitOwner != account) {\n1125:                 revert OwnerOnly(unitOwner, account);\n1126:             }\n1127:         }\n1128: \n1129:         // Get the current epoch counter\n1130:         uint256 curEpoch = epochCounter;\n1131: \n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1133:             // Get the last epoch number the incentives were accumulated for\n1134:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n1135:             // Finalize unit rewards and top-ups if there were pending ones from the previous epoch\n1136:             // The finalization is needed when the trackServiceDonations() function did not take care of it\n1137:             // since between last epoch the donations were received and this current epoch there were no more donations\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n1140:                 // Change the last epoch number\n1141:                 mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch = 0;\n1142:             }\n1143: \n1144:             // Accumulate total rewards and clear their balances\n1145:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n1146:             mapUnitIncentives[unitTypes[i]][unitIds[i]].reward = 0;\n1147:             // Accumulate total top-ups and clear their balances\n1148:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n1149:             mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp = 0;\n1150:         }\n1151:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n1163:         // Check array lengths\n1164:         if (unitTypes.length != unitIds.length) {\n1165:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1166:         }\n1167: \n1168:         // Component / agent registry addresses\n1169:         address[] memory registries = new address[](2);\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1171: \n1172:         // Component / agent total supply\n1173:         uint256[] memory registriesSupply = new uint256[](2);\n1174:         for (uint256 i = 0; i < 2; ++i) {\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1176:         }\n1177: \n1178:         // Check the input data\n1179:         uint256[] memory lastIds = new uint256[](2);\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1181:             // Check for the unit type to be component / agent only\n1182:             if (unitTypes[i] > 1) {\n1183:                 revert Overflow(unitTypes[i], 1);\n1184:             }\n1185: \n1186:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1188:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1189:             }\n1190:             lastIds[unitTypes[i]] = unitIds[i];\n1191: \n1192:             // Check the component / agent Id ownership\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1194:             if (unitOwner != account) {\n1195:                 revert OwnerOnly(unitOwner, account);\n1196:             }\n1197:         }\n1198: \n1199:         // Get the current epoch counter\n1200:         uint256 curEpoch = epochCounter;\n1201: \n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1203:             // Get the last epoch number the incentives were accumulated for\n1204:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n1205:             // Calculate rewards and top-ups if there were pending ones from the previous epoch\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1207:                 // Get the overall amount of unit rewards for the component's last epoch\n1208:                 // reward = (pendingRelativeReward * rewardUnitFraction) / 100\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n1210:                 if (totalIncentives > 0) {\n1211:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].rewardUnitFraction;\n1212:                     // Accumulate to the final reward for the last epoch\n1213:                     reward += totalIncentives / 100;\n1214:                 }\n1215:                 // Add the final top-up for the last epoch\n1216:                 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeTopUp;\n1217:                 if (totalIncentives > 0) {\n1218:                     // Summation of all the unit top-ups and total amount of top-ups per epoch\n1219:                     // topUp = (pendingRelativeTopUp * totalTopUpsOLAS * topUpUnitFraction) / (100 * sumUnitTopUpsOLAS)\n1220:                     totalIncentives *= mapEpochTokenomics[lastEpoch].epochPoint.totalTopUpsOLAS;\n1221:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].topUpUnitFraction;\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n1223:                     // Accumulate to the final top-up for the last epoch\n1224:                     topUp += totalIncentives / sumUnitIncentives;\n1225:                 }\n1226:             }\n1227: \n1228:             // Accumulate total rewards to finalized ones\n1229:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n1230:             // Accumulate total top-ups to finalized ones\n1231:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n1232:         }\n1233:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1233"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n257:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable {\n258:         // Reentrancy guard\n259:         if (_locked > 1) {\n260:             revert ReentrancyGuard();\n261:         }\n262:         _locked = 2;\n263: \n264:         // Check that the amount donated has at least a practical minimal value\n265:         if (msg.value < minAcceptedETH) {\n266:             revert LowerThan(msg.value, minAcceptedETH);\n267:         }\n268: \n269:         // Check for the same length of arrays\n270:         uint256 numServices = serviceIds.length;\n271:         if (amounts.length != numServices) {\n272:             revert WrongArrayLength(numServices, amounts.length);\n273:         }\n274: \n275:         uint256 totalAmount;\n276:         for (uint256 i = 0; i < numServices; ++i) {\n277:             if (amounts[i] == 0) {\n278:                 revert ZeroValue();\n279:             }\n280:             totalAmount += amounts[i];\n281:         }\n282: \n283:         // Check if the total transferred amount corresponds to the sum of amounts from services\n284:         if (msg.value != totalAmount) {\n285:             revert WrongAmount(msg.value, totalAmount);\n286:         }\n287: \n288:         // Accumulate received donation from services\n289:         uint256 donationETH = ETHFromServices + msg.value;\n290:         // Check for the overflow values, specifically when fuzzing, since realistically these amounts are assumed to be not possible\n291:         if (donationETH + ETHOwned > type(uint96).max) {\n292:             revert Overflow(donationETH, type(uint96).max);\n293:         }\n294:         ETHFromServices = uint96(donationETH);\n295:         emit DonateToServicesETH(msg.sender, serviceIds, amounts, msg.value);\n296: \n297:         // Track service donations on the Tokenomics side\n298:         ITokenomics(tokenomics).trackServiceDonations(msg.sender, serviceIds, amounts, msg.value);\n299: \n300:         _locked = 1;\n301:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L257-L301"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n313:     function withdraw(address to, uint256 tokenAmount, address token) external returns (bool success) {\n314:         // Check for the contract ownership\n315:         if (msg.sender != owner) {\n316:             revert OwnerOnly(msg.sender, owner);\n317:         }\n318: \n319:         // Check that the withdraw address is not treasury itself\n320:         if (to == address(this)) {\n321:             revert TransferFailed(token, address(this), to, tokenAmount);\n322:         }\n323: \n324:         // Check for the zero withdraw amount\n325:         if (tokenAmount == 0) {\n326:             revert ZeroValue();\n327:         }\n328: \n329:         // ETH address is taken separately, and all the LP tokens must be validated with corresponding token reserves\n330:         if (token == ETH_TOKEN_ADDRESS) {\n331:             uint256 amountOwned = ETHOwned;\n332:             // Check if treasury has enough amount of owned ETH\n333:             if (amountOwned >= tokenAmount) {\n334:                 // This branch is used to transfer ETH to a specified address\n335:                 amountOwned -= tokenAmount;\n336:                 ETHOwned = uint96(amountOwned);\n337:                 emit Withdraw(ETH_TOKEN_ADDRESS, to, tokenAmount);\n338:                 // Send ETH to the specified address\n339:                 (success, ) = to.call{value: tokenAmount}(\"\");\n340:                 if (!success) {\n341:                     revert TransferFailed(ETH_TOKEN_ADDRESS, address(this), to, tokenAmount);\n342:                 }\n343:             } else {\n344:                 // Insufficient amount of treasury owned ETH\n345:                 revert LowerThan(tokenAmount, amountOwned);\n346:             }\n347:         } else {\n348:             // Only approved token reserves can be used for redemptions\n349:             if (!mapEnabledTokens[token]) {\n350:                 revert UnauthorizedToken(token);\n351:             }\n352:             // Decrease the global LP token reserves record\n353:             uint256 reserves = mapTokenReserves[token];\n354:             if (reserves >= tokenAmount) {\n355:                 reserves -= tokenAmount;\n356:                 mapTokenReserves[token] = reserves;\n357: \n358:                 emit Withdraw(token, to, tokenAmount);\n359:                 // Transfer LP tokens\n360:                 // We assume that LP tokens enabled in the protocol are safe by default\n361:                 // UniswapV2ERC20 realization has a standard transfer() function\n362:                 success = IToken(token).transfer(to, tokenAmount);\n363:                 if (!success) {\n364:                     revert TransferFailed(token, address(this), to, tokenAmount);\n365:                 }\n366:             }  else {\n367:                 // Insufficient amount of LP tokens\n368:                 revert LowerThan(tokenAmount, reserves);\n369:             }\n370:         }\n371:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L313-L371"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider bounding input array length",
      "description": "The functions below take in an unbounded array, and make function calls for entries in the array. While the function will revert if it eventually runs out of gas, it may be a nicer user experience to `require()` that the length of the array is below some reasonable maximum, so that the user doesn't have to use up a full transaction's gas only to see that the transaction reverts.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name targets\n441:     function setTargetSelectorChainIds(\n442:         address[] memory targets,\n443:         bytes4[] memory selectors,\n444:         uint256[] memory chainIds,\n445:         bool[] memory statuses\n446:     ) external {\n447:         // Check for the ownership\n448:         if (msg.sender != owner) {\n449:             revert OwnerOnly(msg.sender, owner);\n450:         }\n451:         \n452:         // Check array length\n453:         if (targets.length != selectors.length || targets.length != statuses.length || targets.length != chainIds.length) {\n454:             revert WrongArrayLength(targets.length, selectors.length, statuses.length, chainIds.length);\n455:         }\n456: \n457:         // Traverse all the targets and selectors to build their paired values\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n459:             // Check for zero address targets\n460:             if (targets[i] == address(0)) {\n461:                 revert ZeroAddress();\n462:             }\n463: \n464:             // Check selector for zero selector value\n465:             if (selectors[i] == bytes4(0)) {\n466:                 revert ZeroValue();\n467:             }\n468: \n469:             // Check chain Ids to be greater than zero\n470:             if (chainIds[i] == 0) {\n471:                 revert ZeroValue();\n472:             }\n473: \n474:             // Push a pair of key defining variables into one key\n475:             // target occupies first 160 bits\n476:             uint256 targetSelectorChainId = uint256(uint160(targets[i]));\n477:             // selector occupies next 32 bits\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n479:             // chainId occupies next 64 bits\n480:             targetSelectorChainId |= chainIds[i] << 192;\n481: \n482:             // Set the status of the target and selector combination\n483:             mapAllowedTargetSelectorChainIds[targetSelectorChainId] = statuses[i];\n484:         }\n485: \n486:         emit SetTargetSelectors(targets, selectors, chainIds, statuses);\n487:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name selectors\n441:     function setTargetSelectorChainIds(\n442:         address[] memory targets,\n443:         bytes4[] memory selectors,\n444:         uint256[] memory chainIds,\n445:         bool[] memory statuses\n446:     ) external {\n447:         // Check for the ownership\n448:         if (msg.sender != owner) {\n449:             revert OwnerOnly(msg.sender, owner);\n450:         }\n451:         \n452:         // Check array length\n453:         if (targets.length != selectors.length || targets.length != statuses.length || targets.length != chainIds.length) {\n454:             revert WrongArrayLength(targets.length, selectors.length, statuses.length, chainIds.length);\n455:         }\n456: \n457:         // Traverse all the targets and selectors to build their paired values\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n459:             // Check for zero address targets\n460:             if (targets[i] == address(0)) {\n461:                 revert ZeroAddress();\n462:             }\n463: \n464:             // Check selector for zero selector value\n465:             if (selectors[i] == bytes4(0)) {\n466:                 revert ZeroValue();\n467:             }\n468: \n469:             // Check chain Ids to be greater than zero\n470:             if (chainIds[i] == 0) {\n471:                 revert ZeroValue();\n472:             }\n473: \n474:             // Push a pair of key defining variables into one key\n475:             // target occupies first 160 bits\n476:             uint256 targetSelectorChainId = uint256(uint160(targets[i]));\n477:             // selector occupies next 32 bits\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n479:             // chainId occupies next 64 bits\n480:             targetSelectorChainId |= chainIds[i] << 192;\n481: \n482:             // Set the status of the target and selector combination\n483:             mapAllowedTargetSelectorChainIds[targetSelectorChainId] = statuses[i];\n484:         }\n485: \n486:         emit SetTargetSelectors(targets, selectors, chainIds, statuses);\n487:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name chainIds\n441:     function setTargetSelectorChainIds(\n442:         address[] memory targets,\n443:         bytes4[] memory selectors,\n444:         uint256[] memory chainIds,\n445:         bool[] memory statuses\n446:     ) external {\n447:         // Check for the ownership\n448:         if (msg.sender != owner) {\n449:             revert OwnerOnly(msg.sender, owner);\n450:         }\n451:         \n452:         // Check array length\n453:         if (targets.length != selectors.length || targets.length != statuses.length || targets.length != chainIds.length) {\n454:             revert WrongArrayLength(targets.length, selectors.length, statuses.length, chainIds.length);\n455:         }\n456: \n457:         // Traverse all the targets and selectors to build their paired values\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n459:             // Check for zero address targets\n460:             if (targets[i] == address(0)) {\n461:                 revert ZeroAddress();\n462:             }\n463: \n464:             // Check selector for zero selector value\n465:             if (selectors[i] == bytes4(0)) {\n466:                 revert ZeroValue();\n467:             }\n468: \n469:             // Check chain Ids to be greater than zero\n470:             if (chainIds[i] == 0) {\n471:                 revert ZeroValue();\n472:             }\n473: \n474:             // Push a pair of key defining variables into one key\n475:             // target occupies first 160 bits\n476:             uint256 targetSelectorChainId = uint256(uint160(targets[i]));\n477:             // selector occupies next 32 bits\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n479:             // chainId occupies next 64 bits\n480:             targetSelectorChainId |= chainIds[i] << 192;\n481: \n482:             // Set the status of the target and selector combination\n483:             mapAllowedTargetSelectorChainIds[targetSelectorChainId] = statuses[i];\n484:         }\n485: \n486:         emit SetTargetSelectors(targets, selectors, chainIds, statuses);\n487:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name statuses\n441:     function setTargetSelectorChainIds(\n442:         address[] memory targets,\n443:         bytes4[] memory selectors,\n444:         uint256[] memory chainIds,\n445:         bool[] memory statuses\n446:     ) external {\n447:         // Check for the ownership\n448:         if (msg.sender != owner) {\n449:             revert OwnerOnly(msg.sender, owner);\n450:         }\n451:         \n452:         // Check array length\n453:         if (targets.length != selectors.length || targets.length != statuses.length || targets.length != chainIds.length) {\n454:             revert WrongArrayLength(targets.length, selectors.length, statuses.length, chainIds.length);\n455:         }\n456: \n457:         // Traverse all the targets and selectors to build their paired values\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n459:             // Check for zero address targets\n460:             if (targets[i] == address(0)) {\n461:                 revert ZeroAddress();\n462:             }\n463: \n464:             // Check selector for zero selector value\n465:             if (selectors[i] == bytes4(0)) {\n466:                 revert ZeroValue();\n467:             }\n468: \n469:             // Check chain Ids to be greater than zero\n470:             if (chainIds[i] == 0) {\n471:                 revert ZeroValue();\n472:             }\n473: \n474:             // Push a pair of key defining variables into one key\n475:             // target occupies first 160 bits\n476:             uint256 targetSelectorChainId = uint256(uint160(targets[i]));\n477:             // selector occupies next 32 bits\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n479:             // chainId occupies next 64 bits\n480:             targetSelectorChainId |= chainIds[i] << 192;\n481: \n482:             // Set the status of the target and selector combination\n483:             mapAllowedTargetSelectorChainIds[targetSelectorChainId] = statuses[i];\n484:         }\n485: \n486:         emit SetTargetSelectors(targets, selectors, chainIds, statuses);\n487:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name bridgeMediatorL1s\n495:     function setBridgeMediatorChainIds(\n496:         address[] memory bridgeMediatorL1s,\n497:         address[] memory bridgeMediatorL2s,\n498:         uint256[] memory chainIds\n499:     ) external {\n500:         // Check for the ownership\n501:         if (msg.sender != owner) {\n502:             revert OwnerOnly(msg.sender, owner);\n503:         }\n504: \n505:         // Check for array correctness\n506:         if (bridgeMediatorL1s.length != bridgeMediatorL2s.length || bridgeMediatorL1s.length != chainIds.length) {\n507:             revert WrongArrayLength(bridgeMediatorL1s.length, bridgeMediatorL2s.length, chainIds.length, chainIds.length);\n508:         }\n509: \n510:         // Link L1 and L2 bridge mediators, set L2 chain Ids\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n512:             // Check for zero addresses\n513:             if (bridgeMediatorL1s[i] == address(0) || bridgeMediatorL2s[i] == address(0)) {\n514:                 revert ZeroAddress();\n515:             }\n516: \n517:             // Check supported chain Ids on L2\n518:             uint256 chainId = chainIds[i];\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n520:                 revert L2ChainIdNotSupported(chainId);\n521:             }\n522: \n523:             // Push a pair of key defining variables into one key\n524:             // bridgeMediatorL2 occupies first 160 bits\n525:             uint256 bridgeMediatorL2ChainId = uint256(uint160(bridgeMediatorL2s[i]));\n526:             // L2 chain Id occupies next 64 bits\n527:             bridgeMediatorL2ChainId |= chainId << 160;\n528:             mapBridgeMediatorL1L2ChainIds[bridgeMediatorL1s[i]] = bridgeMediatorL2ChainId;\n529:         }\n530: \n531:         emit SetBridgeMediators(bridgeMediatorL1s, bridgeMediatorL2s, chainIds);\n532:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L532"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name bridgeMediatorL2s\n495:     function setBridgeMediatorChainIds(\n496:         address[] memory bridgeMediatorL1s,\n497:         address[] memory bridgeMediatorL2s,\n498:         uint256[] memory chainIds\n499:     ) external {\n500:         // Check for the ownership\n501:         if (msg.sender != owner) {\n502:             revert OwnerOnly(msg.sender, owner);\n503:         }\n504: \n505:         // Check for array correctness\n506:         if (bridgeMediatorL1s.length != bridgeMediatorL2s.length || bridgeMediatorL1s.length != chainIds.length) {\n507:             revert WrongArrayLength(bridgeMediatorL1s.length, bridgeMediatorL2s.length, chainIds.length, chainIds.length);\n508:         }\n509: \n510:         // Link L1 and L2 bridge mediators, set L2 chain Ids\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n512:             // Check for zero addresses\n513:             if (bridgeMediatorL1s[i] == address(0) || bridgeMediatorL2s[i] == address(0)) {\n514:                 revert ZeroAddress();\n515:             }\n516: \n517:             // Check supported chain Ids on L2\n518:             uint256 chainId = chainIds[i];\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n520:                 revert L2ChainIdNotSupported(chainId);\n521:             }\n522: \n523:             // Push a pair of key defining variables into one key\n524:             // bridgeMediatorL2 occupies first 160 bits\n525:             uint256 bridgeMediatorL2ChainId = uint256(uint160(bridgeMediatorL2s[i]));\n526:             // L2 chain Id occupies next 64 bits\n527:             bridgeMediatorL2ChainId |= chainId << 160;\n528:             mapBridgeMediatorL1L2ChainIds[bridgeMediatorL1s[i]] = bridgeMediatorL2ChainId;\n529:         }\n530: \n531:         emit SetBridgeMediators(bridgeMediatorL1s, bridgeMediatorL2s, chainIds);\n532:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L532"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit array name chainIds\n495:     function setBridgeMediatorChainIds(\n496:         address[] memory bridgeMediatorL1s,\n497:         address[] memory bridgeMediatorL2s,\n498:         uint256[] memory chainIds\n499:     ) external {\n500:         // Check for the ownership\n501:         if (msg.sender != owner) {\n502:             revert OwnerOnly(msg.sender, owner);\n503:         }\n504: \n505:         // Check for array correctness\n506:         if (bridgeMediatorL1s.length != bridgeMediatorL2s.length || bridgeMediatorL1s.length != chainIds.length) {\n507:             revert WrongArrayLength(bridgeMediatorL1s.length, bridgeMediatorL2s.length, chainIds.length, chainIds.length);\n508:         }\n509: \n510:         // Link L1 and L2 bridge mediators, set L2 chain Ids\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n512:             // Check for zero addresses\n513:             if (bridgeMediatorL1s[i] == address(0) || bridgeMediatorL2s[i] == address(0)) {\n514:                 revert ZeroAddress();\n515:             }\n516: \n517:             // Check supported chain Ids on L2\n518:             uint256 chainId = chainIds[i];\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n520:                 revert L2ChainIdNotSupported(chainId);\n521:             }\n522: \n523:             // Push a pair of key defining variables into one key\n524:             // bridgeMediatorL2 occupies first 160 bits\n525:             uint256 bridgeMediatorL2ChainId = uint256(uint160(bridgeMediatorL2s[i]));\n526:             // L2 chain Id occupies next 64 bits\n527:             bridgeMediatorL2ChainId |= chainId << 160;\n528:             mapBridgeMediatorL1L2ChainIds[bridgeMediatorL1s[i]] = bridgeMediatorL2ChainId;\n529:         }\n530: \n531:         emit SetBridgeMediators(bridgeMediatorL1s, bridgeMediatorL2s, chainIds);\n532:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L532"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit array name owners\n085:     function create(\n086:         address[] memory owners,\n087:         uint256 threshold,\n088:         bytes memory data\n089:     ) external returns (address multisig)\n090:     {\n091:         // Check for the correct data length\n092:         uint256 dataLength = data.length;\n093:         if (dataLength < DEFAULT_DATA_LENGTH) {\n094:             revert IncorrectDataLength(DEFAULT_DATA_LENGTH, data.length);\n095:         }\n096: \n097:         // Read the proxy multisig address (20 bytes) and the multisig-related data\n098:         assembly {\n099:             multisig := mload(add(data, DEFAULT_DATA_LENGTH))\n100:         }\n101: \n102:         // Check that the multisig address corresponds to the authorized multisig proxy bytecode hash\n103:         bytes32 multisigProxyHash = keccak256(multisig.code);\n104:         if (proxyHash != multisigProxyHash) {\n105:             revert UnauthorizedMultisig(multisig);\n106:         }\n107: \n108:         // If provided, read the payload that is going to change the multisig ownership and threshold\n109:         // The payload is expected to be the `execTransaction()` function call with all its arguments and signature(s)\n110:         if (dataLength > DEFAULT_DATA_LENGTH) {\n111:             uint256 payloadLength = dataLength - DEFAULT_DATA_LENGTH;\n112:             bytes memory payload = new bytes(payloadLength);\n113:             for (uint256 i = 0; i < payloadLength; ++i) {\n114:                 payload[i] = data[i + DEFAULT_DATA_LENGTH];\n115:             }\n116: \n117:             // Call the multisig with the provided payload\n118:             (bool success, ) = multisig.call(payload);\n119:             if (!success) {\n120:                 revert MultisigExecFailed(multisig);\n121:             }\n122:         }\n123: \n124:         // Get the provided proxy multisig owners and threshold\n125:         address[] memory checkOwners = IGnosisSafe(multisig).getOwners();\n126:         uint256 checkThreshold = IGnosisSafe(multisig).getThreshold();\n127: \n128:         // Verify updated multisig proxy for provided owners and threshold\n129:         if (threshold != checkThreshold) {\n130:             revert WrongThreshold(checkThreshold, threshold);\n131:         }\n132:         uint256 numOwners = owners.length;\n133:         if (numOwners != checkOwners.length) {\n134:             revert WrongNumOwners(checkOwners.length, numOwners);\n135:         }\n136:         // The owners' addresses in the multisig itself are stored in reverse order compared to how they were added:\n137:         // https://etherscan.io/address/0xd9db270c1b5e3bd161e8c8503c55ceabee709552#code#F6#L56\n138:         // Thus, the check must be carried out accordingly.\n139:         for (uint256 i = 0; i < numOwners; ++i) {\n140:             if (owners[i] != checkOwners[numOwners - i - 1]) {\n141:                 revert WrongOwner(owners[i]);\n142:             }\n143:         }\n144:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L85-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit array name productIds\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n245:         // Check for the contract ownership\n246:         if (msg.sender != owner) {\n247:             revert OwnerOnly(msg.sender, owner);\n248:         }\n249: \n250:         // Calculate the number of closed products\n251:         uint256 numProducts = productIds.length;\n252:         uint256[] memory ids = new uint256[](numProducts);\n253:         uint256 numClosedProducts;\n254:         // Traverse to close all possible products\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n256:             uint256 productId = productIds[i];\n257:             // Check if the product is still open by getting its supply amount\n258:             uint256 supply = mapBondProducts[productId].supply;\n259:             // The supply is greater than zero only if the product is active, otherwise it is already closed\n260:             if (supply > 0) {\n261:                 // Refund unused OLAS supply from the product if it was not used by the product completely\n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n263:                 address token = mapBondProducts[productId].token;\n264:                 delete mapBondProducts[productId];\n265: \n266:                 ids[numClosedProducts] = productIds[i];\n267:                 ++numClosedProducts;\n268:                 emit CloseProduct(token, productId, supply);\n269:             }\n270:         }\n271: \n272:         // Get the correct array size of closed product Ids\n273:         closedProductIds = new uint256[](numClosedProducts);\n274:         for (uint256 i = 0; i < numClosedProducts; ++i) {\n275:             closedProductIds[i] = ids[i];\n276:         }\n277:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L277"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit array name bondIds\n356:     function redeem(uint256[] memory bondIds) external returns (uint256 payout) {\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n358:             // Get the amount to pay and the maturity status\n359:             uint256 pay = mapUserBonds[bondIds[i]].payout;\n360:             bool matured = block.timestamp >= mapUserBonds[bondIds[i]].maturity;\n361: \n362:             // Revert if the bond does not exist or is not matured yet\n363:             if (pay == 0 || !matured) {\n364:                 revert BondNotRedeemable(bondIds[i]);\n365:             }\n366: \n367:             // Check that the msg.sender is the owner of the bond\n368:             if (mapUserBonds[bondIds[i]].account != msg.sender) {\n369:                 revert OwnerOnly(msg.sender, mapUserBonds[bondIds[i]].account);\n370:             }\n371: \n372:             // Increase the payout\n373:             payout += pay;\n374: \n375:             // Get the productId\n376:             uint256 productId = mapUserBonds[bondIds[i]].productId;\n377: \n378:             // Delete the Bond struct and release the gas\n379:             delete mapUserBonds[bondIds[i]];\n380:             emit RedeemBond(productId, msg.sender, bondIds[i]);\n381:         }\n382: \n383:         // Check for the non-zero payout\n384:         if (payout == 0) {\n385:             revert ZeroValue();\n386:         }\n387: \n388:         // No reentrancy risk here since it's the last operation, and originated from the OLAS token\n389:         // No need to check for the return value, since it either reverts or returns true, see the ERC20 implementation\n390:         IToken(olas).transfer(msg.sender, payout);\n391:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L356-L391"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit array name accounts\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n57:         // Check for the contract ownership\n58:         if (msg.sender != owner) {\n59:             revert OwnerOnly(msg.sender, owner);\n60:         }\n61: \n62:         // Check for the array length\n63:         if (accounts.length != statuses.length) {\n64:             revert WrongArrayLength(accounts.length, statuses.length);\n65:         }\n66: \n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n68:             // Check for the zero address\n69:             if (accounts[i] == address(0)) {\n70:                 revert ZeroAddress();\n71:             }\n72:             // Set the account blacklisting status\n73:             mapBlacklistedDonators[accounts[i]] = statuses[i];\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n75:         }\n76:         success = true;\n77:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit array name statuses\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n57:         // Check for the contract ownership\n58:         if (msg.sender != owner) {\n59:             revert OwnerOnly(msg.sender, owner);\n60:         }\n61: \n62:         // Check for the array length\n63:         if (accounts.length != statuses.length) {\n64:             revert WrongArrayLength(accounts.length, statuses.length);\n65:         }\n66: \n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n68:             // Check for the zero address\n69:             if (accounts[i] == address(0)) {\n70:                 revert ZeroAddress();\n71:             }\n72:             // Set the account blacklisting status\n73:             mapBlacklistedDonators[accounts[i]] = statuses[i];\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n75:         }\n76:         success = true;\n77:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit array name serviceIds\n788:     function trackServiceDonations(\n789:         address donator,\n790:         uint256[] memory serviceIds,\n791:         uint256[] memory amounts,\n792:         uint256 donationETH\n793:     ) external {\n794:         // Check for the treasury access\n795:         if (treasury != msg.sender) {\n796:             revert ManagerOnly(msg.sender, treasury);\n797:         }\n798: \n799:         // Check if the donator blacklist is enabled, and the status of the donator address\n800:         address bList = donatorBlacklist;\n801:         if (bList != address(0) && IDonatorBlacklist(bList).isDonatorBlacklisted(donator)) {\n802:             revert DonatorBlacklisted(donator);\n803:         }\n804: \n805:         // Get the number of services\n806:         uint256 numServices = serviceIds.length;\n807:         // Loop over service Ids, accumulate donation value and check for the service existence\n808:         for (uint256 i = 0; i < numServices; ++i) {\n809:             // Check for the service Id existence\n810:             if (!IServiceRegistry(serviceRegistry).exists(serviceIds[i])) {\n811:                 revert ServiceDoesNotExist(serviceIds[i]);\n812:             }\n813:         }\n814:         // Get the current epoch\n815:         uint256 curEpoch = epochCounter;\n816:         // Increase the total service donation balance per epoch\n817:         donationETH += mapEpochTokenomics[curEpoch].epochPoint.totalDonationsETH;\n818:         mapEpochTokenomics[curEpoch].epochPoint.totalDonationsETH = uint96(donationETH);\n819: \n820:         // Track service donations\n821:         _trackServiceDonations(donator, serviceIds, amounts, curEpoch);\n822: \n823:         // Set the current block number\n824:         lastDonationBlockNumber = uint32(block.number);\n825:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L788-L825"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit array name unitTypes\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n1086:         returns (uint256 reward, uint256 topUp)\n1087:     {\n1088:         // Check for the dispenser access\n1089:         if (dispenser != msg.sender) {\n1090:             revert ManagerOnly(msg.sender, dispenser);\n1091:         }\n1092: \n1093:         // Check array lengths\n1094:         if (unitTypes.length != unitIds.length) {\n1095:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1096:         }\n1097: \n1098:         // Component / agent registry addresses\n1099:         address[] memory registries = new address[](2);\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1101: \n1102:         // Component / agent total supply\n1103:         uint256[] memory registriesSupply = new uint256[](2);\n1104:         for (uint256 i = 0; i < 2; ++i) {\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1106:         }\n1107: \n1108:         // Check the input data\n1109:         uint256[] memory lastIds = new uint256[](2);\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1111:             // Check for the unit type to be component / agent only\n1112:             if (unitTypes[i] > 1) {\n1113:                 revert Overflow(unitTypes[i], 1);\n1114:             }\n1115: \n1116:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1118:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1119:             }\n1120:             lastIds[unitTypes[i]] = unitIds[i];\n1121: \n1122:             // Check the component / agent Id ownership\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1124:             if (unitOwner != account) {\n1125:                 revert OwnerOnly(unitOwner, account);\n1126:             }\n1127:         }\n1128: \n1129:         // Get the current epoch counter\n1130:         uint256 curEpoch = epochCounter;\n1131: \n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1133:             // Get the last epoch number the incentives were accumulated for\n1134:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n1135:             // Finalize unit rewards and top-ups if there were pending ones from the previous epoch\n1136:             // The finalization is needed when the trackServiceDonations() function did not take care of it\n1137:             // since between last epoch the donations were received and this current epoch there were no more donations\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n1140:                 // Change the last epoch number\n1141:                 mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch = 0;\n1142:             }\n1143: \n1144:             // Accumulate total rewards and clear their balances\n1145:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n1146:             mapUnitIncentives[unitTypes[i]][unitIds[i]].reward = 0;\n1147:             // Accumulate total top-ups and clear their balances\n1148:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n1149:             mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp = 0;\n1150:         }\n1151:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit array name unitIds\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n1086:         returns (uint256 reward, uint256 topUp)\n1087:     {\n1088:         // Check for the dispenser access\n1089:         if (dispenser != msg.sender) {\n1090:             revert ManagerOnly(msg.sender, dispenser);\n1091:         }\n1092: \n1093:         // Check array lengths\n1094:         if (unitTypes.length != unitIds.length) {\n1095:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1096:         }\n1097: \n1098:         // Component / agent registry addresses\n1099:         address[] memory registries = new address[](2);\n1100:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1101: \n1102:         // Component / agent total supply\n1103:         uint256[] memory registriesSupply = new uint256[](2);\n1104:         for (uint256 i = 0; i < 2; ++i) {\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1106:         }\n1107: \n1108:         // Check the input data\n1109:         uint256[] memory lastIds = new uint256[](2);\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1111:             // Check for the unit type to be component / agent only\n1112:             if (unitTypes[i] > 1) {\n1113:                 revert Overflow(unitTypes[i], 1);\n1114:             }\n1115: \n1116:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1118:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1119:             }\n1120:             lastIds[unitTypes[i]] = unitIds[i];\n1121: \n1122:             // Check the component / agent Id ownership\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1124:             if (unitOwner != account) {\n1125:                 revert OwnerOnly(unitOwner, account);\n1126:             }\n1127:         }\n1128: \n1129:         // Get the current epoch counter\n1130:         uint256 curEpoch = epochCounter;\n1131: \n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1133:             // Get the last epoch number the incentives were accumulated for\n1134:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n1135:             // Finalize unit rewards and top-ups if there were pending ones from the previous epoch\n1136:             // The finalization is needed when the trackServiceDonations() function did not take care of it\n1137:             // since between last epoch the donations were received and this current epoch there were no more donations\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n1140:                 // Change the last epoch number\n1141:                 mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch = 0;\n1142:             }\n1143: \n1144:             // Accumulate total rewards and clear their balances\n1145:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n1146:             mapUnitIncentives[unitTypes[i]][unitIds[i]].reward = 0;\n1147:             // Accumulate total top-ups and clear their balances\n1148:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n1149:             mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp = 0;\n1150:         }\n1151:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit array name unitTypes\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n1163:         // Check array lengths\n1164:         if (unitTypes.length != unitIds.length) {\n1165:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1166:         }\n1167: \n1168:         // Component / agent registry addresses\n1169:         address[] memory registries = new address[](2);\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1171: \n1172:         // Component / agent total supply\n1173:         uint256[] memory registriesSupply = new uint256[](2);\n1174:         for (uint256 i = 0; i < 2; ++i) {\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1176:         }\n1177: \n1178:         // Check the input data\n1179:         uint256[] memory lastIds = new uint256[](2);\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1181:             // Check for the unit type to be component / agent only\n1182:             if (unitTypes[i] > 1) {\n1183:                 revert Overflow(unitTypes[i], 1);\n1184:             }\n1185: \n1186:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1188:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1189:             }\n1190:             lastIds[unitTypes[i]] = unitIds[i];\n1191: \n1192:             // Check the component / agent Id ownership\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1194:             if (unitOwner != account) {\n1195:                 revert OwnerOnly(unitOwner, account);\n1196:             }\n1197:         }\n1198: \n1199:         // Get the current epoch counter\n1200:         uint256 curEpoch = epochCounter;\n1201: \n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1203:             // Get the last epoch number the incentives were accumulated for\n1204:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n1205:             // Calculate rewards and top-ups if there were pending ones from the previous epoch\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1207:                 // Get the overall amount of unit rewards for the component's last epoch\n1208:                 // reward = (pendingRelativeReward * rewardUnitFraction) / 100\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n1210:                 if (totalIncentives > 0) {\n1211:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].rewardUnitFraction;\n1212:                     // Accumulate to the final reward for the last epoch\n1213:                     reward += totalIncentives / 100;\n1214:                 }\n1215:                 // Add the final top-up for the last epoch\n1216:                 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeTopUp;\n1217:                 if (totalIncentives > 0) {\n1218:                     // Summation of all the unit top-ups and total amount of top-ups per epoch\n1219:                     // topUp = (pendingRelativeTopUp * totalTopUpsOLAS * topUpUnitFraction) / (100 * sumUnitTopUpsOLAS)\n1220:                     totalIncentives *= mapEpochTokenomics[lastEpoch].epochPoint.totalTopUpsOLAS;\n1221:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].topUpUnitFraction;\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n1223:                     // Accumulate to the final top-up for the last epoch\n1224:                     topUp += totalIncentives / sumUnitIncentives;\n1225:                 }\n1226:             }\n1227: \n1228:             // Accumulate total rewards to finalized ones\n1229:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n1230:             // Accumulate total top-ups to finalized ones\n1231:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n1232:         }\n1233:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1233"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit array name unitIds\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n1161:         returns (uint256 reward, uint256 topUp)\n1162:     {\n1163:         // Check array lengths\n1164:         if (unitTypes.length != unitIds.length) {\n1165:             revert WrongArrayLength(unitTypes.length, unitIds.length);\n1166:         }\n1167: \n1168:         // Component / agent registry addresses\n1169:         address[] memory registries = new address[](2);\n1170:         (registries[0], registries[1]) = (componentRegistry, agentRegistry);\n1171: \n1172:         // Component / agent total supply\n1173:         uint256[] memory registriesSupply = new uint256[](2);\n1174:         for (uint256 i = 0; i < 2; ++i) {\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1176:         }\n1177: \n1178:         // Check the input data\n1179:         uint256[] memory lastIds = new uint256[](2);\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1181:             // Check for the unit type to be component / agent only\n1182:             if (unitTypes[i] > 1) {\n1183:                 revert Overflow(unitTypes[i], 1);\n1184:             }\n1185: \n1186:             // Check that the unit Ids are in ascending order, not repeating, and no bigger than registries total supply\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n1188:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n1189:             }\n1190:             lastIds[unitTypes[i]] = unitIds[i];\n1191: \n1192:             // Check the component / agent Id ownership\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n1194:             if (unitOwner != account) {\n1195:                 revert OwnerOnly(unitOwner, account);\n1196:             }\n1197:         }\n1198: \n1199:         // Get the current epoch counter\n1200:         uint256 curEpoch = epochCounter;\n1201: \n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n1203:             // Get the last epoch number the incentives were accumulated for\n1204:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n1205:             // Calculate rewards and top-ups if there were pending ones from the previous epoch\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1207:                 // Get the overall amount of unit rewards for the component's last epoch\n1208:                 // reward = (pendingRelativeReward * rewardUnitFraction) / 100\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n1210:                 if (totalIncentives > 0) {\n1211:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].rewardUnitFraction;\n1212:                     // Accumulate to the final reward for the last epoch\n1213:                     reward += totalIncentives / 100;\n1214:                 }\n1215:                 // Add the final top-up for the last epoch\n1216:                 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeTopUp;\n1217:                 if (totalIncentives > 0) {\n1218:                     // Summation of all the unit top-ups and total amount of top-ups per epoch\n1219:                     // topUp = (pendingRelativeTopUp * totalTopUpsOLAS * topUpUnitFraction) / (100 * sumUnitTopUpsOLAS)\n1220:                     totalIncentives *= mapEpochTokenomics[lastEpoch].epochPoint.totalTopUpsOLAS;\n1221:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].topUpUnitFraction;\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n1223:                     // Accumulate to the final top-up for the last epoch\n1224:                     topUp += totalIncentives / sumUnitIncentives;\n1225:                 }\n1226:             }\n1227: \n1228:             // Accumulate total rewards to finalized ones\n1229:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n1230:             // Accumulate total top-ups to finalized ones\n1231:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n1232:         }\n1233:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1233"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit array name amounts\n257:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable {\n258:         // Reentrancy guard\n259:         if (_locked > 1) {\n260:             revert ReentrancyGuard();\n261:         }\n262:         _locked = 2;\n263: \n264:         // Check that the amount donated has at least a practical minimal value\n265:         if (msg.value < minAcceptedETH) {\n266:             revert LowerThan(msg.value, minAcceptedETH);\n267:         }\n268: \n269:         // Check for the same length of arrays\n270:         uint256 numServices = serviceIds.length;\n271:         if (amounts.length != numServices) {\n272:             revert WrongArrayLength(numServices, amounts.length);\n273:         }\n274: \n275:         uint256 totalAmount;\n276:         for (uint256 i = 0; i < numServices; ++i) {\n277:             if (amounts[i] == 0) {\n278:                 revert ZeroValue();\n279:             }\n280:             totalAmount += amounts[i];\n281:         }\n282: \n283:         // Check if the total transferred amount corresponds to the sum of amounts from services\n284:         if (msg.value != totalAmount) {\n285:             revert WrongAmount(msg.value, totalAmount);\n286:         }\n287: \n288:         // Accumulate received donation from services\n289:         uint256 donationETH = ETHFromServices + msg.value;\n290:         // Check for the overflow values, specifically when fuzzing, since realistically these amounts are assumed to be not possible\n291:         if (donationETH + ETHOwned > type(uint96).max) {\n292:             revert Overflow(donationETH, type(uint96).max);\n293:         }\n294:         ETHFromServices = uint96(donationETH);\n295:         emit DonateToServicesETH(msg.sender, serviceIds, amounts, msg.value);\n296: \n297:         // Track service donations on the Tokenomics side\n298:         ITokenomics(tokenomics).trackServiceDonations(msg.sender, serviceIds, amounts, msg.value);\n299: \n300:         _locked = 1;\n301:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L257-L301"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "A function which defines named returns in it's declaration doesn't need to use return",
      "description": "Remove the return statement once ensuring it is safe to do so",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n160:     function getDependencies(uint256 unitId) external view virtual\n161:         returns (uint256 numDependencies, uint32[] memory dependencies)\n162:     {\n163:         Unit memory unit = mapUnits[unitId];\n164:         return (unit.dependencies.length, unit.dependencies);\n165:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L160-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n172:         returns (uint256 numHashes, bytes32[] memory unitHashes)\n173:     {\n174:         unitHashes = mapUnitIdHashes[unitId];\n175:         return (unitHashes.length, unitHashes);\n176:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L176"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n491:     function getCurrentPriceLP(address token) external view returns (uint256 priceLP) {\n492:         return IGenericBondCalculator(bondCalculator).getCurrentPriceLP(token);\n493:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L491-L493"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contract declarations should have NatSpec `@dev` annotations",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n14: /// @title OLAS - Smart contract for the OLAS token.\n15: /// @author AL\n16: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n17: contract OLAS is ERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L14-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n85: /// @notice This token supports the ERC20 interface specifications except for transfers and approvals.\n86: contract veOLAS is IErrors, IVotes, IERC20, IERC165 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L85-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n13: interface IVEOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L127-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n85: /// @title GuardCM - Smart contract for Gnosis Safe community multisig (CM) guard\n86: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n87: /// @author Andrey Lebedev - <andrey.lebedev@valory.xyz>\n88: contract GuardCM {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L85-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n43: /// @title FxGovernorTunnel - Smart contract for the governor child tunnel bridge implementation\n44: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n45: /// @author AL\n46: contract FxGovernorTunnel is IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L43-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n43: /// @title HomeMediator - Smart contract for the governor home (gnosis chain) bridge implementation\n44: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n45: /// @author AL\n46: contract HomeMediator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L43-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n20: /// @title FxERC20ChildTunnel - Smart contract for the L2 token management part\n21: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n22: /// @author Andrey Lebedev - <andrey.lebedev@valory.xyz>\n23: /// @author Mariapia Moscatiello - <mariapia.moscatiello@valory.xyz>\n24: contract FxERC20ChildTunnel is FxBaseChildTunnel {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L20-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n20: /// @title FxERC20RootTunnel - Smart contract for the L1 token management part\n21: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n22: /// @author Andrey Lebedev - <andrey.lebedev@valory.xyz>\n23: /// @author Mariapia Moscatiello - <mariapia.moscatiello@valory.xyz>\n24: contract FxERC20RootTunnel is FxBaseRootTunnel {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L20-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n7: /// @title Generic Registry - Smart contract for generic registry template\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: abstract contract GenericRegistry is IErrorsRegistries, ERC721 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L7-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n6: /// @title Unit Registry - Smart contract for registering generalized units / units\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: abstract contract UnitRegistry is GenericRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n6: /// @title Component Registry - Smart contract for registering components\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: contract ComponentRegistry is UnitRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n7: /// @title Agent Registry - Smart contract for registering agents\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: contract AgentRegistry is UnitRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L7-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n6: /// @title Generic Manager - Smart contract for generic registry manager template\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: abstract contract GenericManager is IErrorsRegistries {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n7: /// @title Registries Manager - Periphery smart contract for managing components and agents\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: contract RegistriesManager is GenericManager {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L7-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n5: interface IGnosisSafeProxyFactory {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n22: /// @title Gnosis Safe - Smart contract for Gnosis Safe multisig implementation of a generic multisig interface\n23: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n24: contract GnosisSafeMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L22-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n5: interface IGnosisSafe {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n48: /// @title Gnosis Safe Same Address - Smart contract for Gnosis Safe verification of an already existent multisig address.\n49: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n50: contract GnosisSafeSameAddressMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L48-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n59: /// @title Bond Depository - Smart contract for OLAS Bond Depository\n60: /// @author AL\n61: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n62: contract Depository is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L59-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n08: /// @title Dispenser - Smart contract for distributing incentives\n09: /// @author AL\n10: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n11: contract Dispenser is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L8-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n17: /// @title DonatorBlacklist - Smart contract for donator address blacklisting\n18: /// @author AL\n19: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n20: contract DonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L17-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n115: /// @title Tokenomics - Smart contract for tokenomics logic with incentives for unit owners and discount factor regulations for bonds.\n116: /// @author AL\n117: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n118: contract Tokenomics is TokenomicsConstants, IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L115-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n6: /// @title TokenomicsConstants - Smart contract with tokenomics constants\n7: /// @author AL\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: abstract contract TokenomicsConstants {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L6-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n23: /// @title TokenomicsProxy - Smart contract for tokenomics proxy\n24: /// @author AL\n25: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n26: contract TokenomicsProxy {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L23-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n33: /// @title Treasury - Smart contract for managing OLAS Treasury\n34: /// @author AL\n35: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n36: /// Invariant does not support a failing call() function while transferring ETH when using the CEI pattern:\n37: /// revert TransferFailed(address(0), address(this), to, tokenAmount);\n38: /// invariant {:msg \"broken conservation law\"} address(this).balance == ETHFromServices + ETHOwned;\n39: contract Treasury is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L33-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n5: interface IUniswapV2Pair {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L5-L5"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contract should expose an `interface`",
      "description": "The `contract`s should expose an `interface` so that other projects can more easily integrate with it, without having to develop their own non-standard variants.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n43:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n58:     function changeMinter(address newMinter) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L58-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n91:     function inflationControl(uint256 amount) public view returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n98:     function inflationRemainder() public view returns (uint256 remainder) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n128:     function decreaseAllowance(address spender, uint256 amount) external returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n145:     function increaseAllowance(address spender, uint256 amount) external returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L145-L145"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n376:     function depositFor(address account, uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L376-L376"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n402:     function createLock(uint256 amount, uint256 unlockTime) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L402-L402"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n411:     function createLockFor(address account, uint256 amount, uint256 unlockTime) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L411-L411"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n458:     function increaseAmount(uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L458-L458"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n483:     function increaseUnlockTime(uint256 unlockTime) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L483-L483"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n510:     function withdraw() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L510-L510"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n154:     function changeGovernor(address newGovernor) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L154-L154"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n170:     function changeGovernorCheckProposalId(uint256 proposalId) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L387"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n441:     function setTargetSelectorChainIds(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L441-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n495:     function setBridgeMediatorChainIds(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L495-L495"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n539:     function pause() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L539-L539"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n560:     function unpause() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L560-L560"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n572:     function checkAfterExecution(bytes32, bool) external {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L572"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n579:     function getTargetSelectorChainId(address target, bytes4 selector, uint256 chainId) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L579-L579"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n597:     function getBridgeMediatorChainId(address bridgeMediatorL1) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L597-L597"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n81:     function changeRootGovernor(address newRootGovernor) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L81-L81"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n81:     function changeForeignGovernor(address newForeignGovernor) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L81-L81"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n105:     function processMessageFromForeign(bytes memory data) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n30:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n50:     function deposit(uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n57:     function depositTo(address to, uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L57-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n54:     function withdraw(uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n61:     function withdrawTo(address to, uint256 amount) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L61-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n37:     function changeOwner(address newOwner) external virtual {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L37-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n54:     function changeManager(address newManager) external virtual {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n78:     function setBaseURI(string memory bURI) external virtual {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n97:     function tokenByIndex(uint256 id) external view virtual returns (uint256 unitId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n152:     function getUnit(uint256 unitId) external view virtual returns (Unit memory unit) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L152-L152"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n160:     function getDependencies(uint256 unitId) external view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n20:     function changeOwner(address newOwner) external virtual {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n36:     function pause() external virtual {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n47:     function unpause() external virtual {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n123:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n163:     function changeBondCalculator(address _bondCalculator) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L163"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n291:     function deposit(uint256 productId, uint256 tokenAmount) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L291-L291"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n356:     function redeem(uint256[] memory bondIds) external returns (uint256 payout) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L356-L356"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n396:     function getProducts(bool active) external view returns (uint256[] memory productIds) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L396-L396"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n424:     function isActiveProduct(uint256 productId) external view returns (bool status) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L424-L424"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n435:     function getBonds(address account, bool matured) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L435-L435"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n480:     function getBondStatus(uint256 bondId) external view returns (uint256 payout, bool matured) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L480-L480"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n46:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n89:     function claimOwnerIncentives(uint256[] memory unitTypes, uint256[] memory unitIds) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n36:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n264:     function initializeTokenomics(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L264-L264"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n374:     function tokenomicsImplementation() external view returns (address implementation) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L374-L374"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n384:     function changeTokenomicsImplementation(address implementation) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L384-L384"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n404:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L423"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L450"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L474"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L497"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n562:     function changeIncentiveFractions(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1237:     function getInflationPerEpoch() external view returns (uint256 inflationPerEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1237-L1237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1245:     function getUnitPoint(uint256 epoch, uint256 unitType) external view returns (UnitPoint memory up) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1245-L1245"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1252:     function getIDF(uint256 epoch) external view returns (uint256 idf)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1252-L1252"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n30:     function getSupplyCapForYear(uint256 numYears) public pure returns (uint256 supplyCap) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n66:     function getInflationForYear(uint256 numYears) public pure returns (uint256 inflationAmount) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L66-L66"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n137:     function changeOwner(address newOwner) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L137-L137"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L156"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n182:     function changeMinAcceptedETH(uint256 _minAcceptedETH) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L182-L182"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n313:     function withdraw(address to, uint256 tokenAmount, address token) external returns (bool success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L313-L313"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n466:     function drainServiceSlashedFunds() external returns (uint256 amount) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L466-L466"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n487:     function enableToken(address token) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L487-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n507:     function disableToken(address token) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L507-L507"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n531:     function pause() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L531-L531"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n542:     function unpause() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L542-L542"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Named imports of parent contracts are missing",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `IFxMessageProcessor`\n46: contract FxGovernorTunnel is IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L46-L46"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Contract declarations should have NatSpec `@notice` annotations",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n12: /// @title Governor OLAS - Smart contract for Autonolas governance\n13: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n14: /// @dev The OpenZeppelin functions are used as is, version 4.8.3.\n15: contract GovernorOLAS is Governor, GovernorSettings, GovernorCompatibilityBravo, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L12-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n6: /// @title Timelock - Smart contract for the timelock\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: /// @dev The OpenZeppelin functions are used as is, version 4.8.3.\n9: contract Timelock is TimelockController {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L6-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n14: /// @title OLAS - Smart contract for the OLAS token.\n15: /// @author AL\n16: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n17: contract OLAS is ERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L14-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n13: interface IVEOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L127-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n85: /// @title GuardCM - Smart contract for Gnosis Safe community multisig (CM) guard\n86: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n87: /// @author Andrey Lebedev - <andrey.lebedev@valory.xyz>\n88: contract GuardCM {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L85-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n4: /// @dev Interface to process message across the bridge.\n5: interface IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n43: /// @title FxGovernorTunnel - Smart contract for the governor child tunnel bridge implementation\n44: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n45: /// @author AL\n46: contract FxGovernorTunnel is IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L43-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n4: /// @dev Interface to the AMB Contract Proxy.\n5: interface IAMB {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n43: /// @title HomeMediator - Smart contract for the governor home (gnosis chain) bridge implementation\n44: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n45: /// @author AL\n46: contract HomeMediator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L43-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n15: /// @title BridgedERC20 - Smart contract for bridged ERC20 token\n16: /// @dev Bridged token contract is owned by the bridge mediator contract, and thus the token representation from\n17: ///      another chain must be minted and burned solely by the bridge mediator contract.\n18: contract BridgedERC20 is ERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L15-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n20: /// @title FxERC20ChildTunnel - Smart contract for the L2 token management part\n21: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n22: /// @author Andrey Lebedev - <andrey.lebedev@valory.xyz>\n23: /// @author Mariapia Moscatiello - <mariapia.moscatiello@valory.xyz>\n24: contract FxERC20ChildTunnel is FxBaseChildTunnel {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L20-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n20: /// @title FxERC20RootTunnel - Smart contract for the L1 token management part\n21: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n22: /// @author Andrey Lebedev - <andrey.lebedev@valory.xyz>\n23: /// @author Mariapia Moscatiello - <mariapia.moscatiello@valory.xyz>\n24: contract FxERC20RootTunnel is FxBaseRootTunnel {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L20-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n4: /// @dev ERC20 token interface.\n5: interface IERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n4: /// @dev Errors.\n5: interface IErrors {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n7: /// @title Generic Registry - Smart contract for generic registry template\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: abstract contract GenericRegistry is IErrorsRegistries, ERC721 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L7-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n6: /// @title Unit Registry - Smart contract for registering generalized units / units\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: abstract contract UnitRegistry is GenericRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n6: /// @title Component Registry - Smart contract for registering components\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: contract ComponentRegistry is UnitRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n7: /// @title Agent Registry - Smart contract for registering agents\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: contract AgentRegistry is UnitRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L7-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n6: /// @title Generic Manager - Smart contract for generic registry manager template\n7: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n8: abstract contract GenericManager is IErrorsRegistries {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n7: /// @title Registries Manager - Periphery smart contract for managing components and agents\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: contract RegistriesManager is GenericManager {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L7-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n5: interface IGnosisSafeProxyFactory {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n22: /// @title Gnosis Safe - Smart contract for Gnosis Safe multisig implementation of a generic multisig interface\n23: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n24: contract GnosisSafeMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L22-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n5: interface IGnosisSafe {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n48: /// @title Gnosis Safe Same Address - Smart contract for Gnosis Safe verification of an already existent multisig address.\n49: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n50: contract GnosisSafeSameAddressMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L48-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n4: /// @dev Errors.\n5: interface IErrorsRegistries {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n4: /// @dev Required interface for the component / agent manipulation.\n5: interface IRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n59: /// @title Bond Depository - Smart contract for OLAS Bond Depository\n60: /// @author AL\n61: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n62: contract Depository is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L59-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n08: /// @title Dispenser - Smart contract for distributing incentives\n09: /// @author AL\n10: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n11: contract Dispenser is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L8-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n17: /// @title DonatorBlacklist - Smart contract for donator address blacklisting\n18: /// @author AL\n19: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n20: contract DonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L17-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n16: /// @title GenericBondSwap - Smart contract for generic bond calculation mechanisms in exchange for OLAS tokens.\n17: /// @dev The bond calculation mechanism is based on the UniswapV2Pair contract.\n18: /// @author AL\n19: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n20: contract GenericBondCalculator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L16-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n115: /// @title Tokenomics - Smart contract for tokenomics logic with incentives for unit owners and discount factor regulations for bonds.\n116: /// @author AL\n117: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n118: contract Tokenomics is TokenomicsConstants, IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L115-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n6: /// @title TokenomicsConstants - Smart contract with tokenomics constants\n7: /// @author AL\n8: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n9: abstract contract TokenomicsConstants {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L6-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n23: /// @title TokenomicsProxy - Smart contract for tokenomics proxy\n24: /// @author AL\n25: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n26: contract TokenomicsProxy {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L23-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n33: /// @title Treasury - Smart contract for managing OLAS Treasury\n34: /// @author AL\n35: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n36: /// Invariant does not support a failing call() function while transferring ETH when using the CEI pattern:\n37: /// revert TransferFailed(address(0), address(this), to, tokenAmount);\n38: /// invariant {:msg \"broken conservation law\"} address(this).balance == ETHFromServices + ETHOwned;\n39: contract Treasury is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L33-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n4: /// @dev DonatorBlacklist interface.\n5: interface IDonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n4: /// @dev Errors.\n5: interface IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n4: /// @dev Interface for generic bond calculator.\n5: interface IGenericBondCalculator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n4: /// @dev Required interface for the service registry.\n5: interface IServiceRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n4: /// @dev Generic token interface for IERC20 and IERC721 tokens.\n5: interface IToken {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n4: /// @dev Interface for tokenomics management.\n5: interface ITokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n4: /// @dev Interface for treasury management.\n5: interface ITreasury {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L4-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n5: interface IUniswapV2Pair {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n4: /// @dev Interface for voting escrow.\n5: interface IVotingEscrow {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L4-L5"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Do not use UNDERSCORE in `struct` elements names",
      "description": "For better maintainability, please consider creating and using a constant for those strings instead of hardcoding ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `iDep` \n29:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n30:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > maxComponentId) {\n31:                 revert ComponentNotFound(dependencies[iDep]);\n32:             }\n33:             lastId = dependencies[iDep];\n34:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L29-L34"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `iDep` \n40:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n41:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > componentTotalSupply) {\n42:                 revert ComponentNotFound(dependencies[iDep]);\n43:             }\n44:             lastId = dependencies[iDep];\n45:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L40-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `unitType` \n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n715:                 // Get the number and set of units in the service\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n717:                     getUnitIdsOfService(IServiceRegistry.UnitType(unitType), serviceIds[i]);\n718:                 // Service has to be deployed at least once to be able to receive donations,\n719:                 // otherwise its components and agents are undefined\n720:                 if (numServiceUnits == 0) {\n721:                     revert ServiceNeverDeployed(serviceIds[i]);\n722:                 }\n723:                 // Record amounts data only if at least one incentive unit fraction is not zero\n724:                 if (incentiveFlags[unitType] || incentiveFlags[unitType + 2]) {\n725:                     // The amount has to be adjusted for the number of units in the service\n726:                     uint96 amount = uint96(amounts[i] / numServiceUnits);\n727:                     // Accumulate amounts for each unit Id\n728:                     for (uint256 j = 0; j < numServiceUnits; ++j) {\n729:                         // Get the last epoch number the incentives were accumulated for\n730:                         uint256 lastEpoch = mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch;\n731:                         // Check if there were no donations in previous epochs and set the current epoch\n732:                         if (lastEpoch == 0) {\n733:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n734:                         } else if (lastEpoch < curEpoch) {\n735:                             // Finalize unit rewards and top-ups if there were pending ones from the previous epoch\n736:                             // Pending incentives are getting finalized during the next epoch the component / agent\n737:                             // receives donations. If this is not the case before claiming incentives, the finalization\n738:                             // happens in the accountOwnerIncentives() where the incentives are issued\n739:                             _finalizeIncentivesForUnitId(lastEpoch, unitType, serviceUnitIds[j]);\n740:                             // Change the last epoch number\n741:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n742:                         }\n743:                         // Sum the relative amounts for the corresponding components / agents\n744:                         if (incentiveFlags[unitType]) {\n745:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeReward += amount;\n746:                         }\n747:                         // If eligible, add relative top-up weights in the form of donation amounts.\n748:                         // These weights will represent the fraction of top-ups for each component / agent relative\n749:                         // to the overall amount of top-ups that must be allocated\n750:                         if (topUpEligible && incentiveFlags[unitType + 2]) {\n751:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeTopUp += amount;\n752:                             mapEpochTokenomics[curEpoch].unitPoints[unitType].sumUnitTopUpsOLAS += amount;\n753:                         }\n754:                     }\n755:                 }\n756: \n757:                 // Record new units and new unit owners\n758:                 for (uint256 j = 0; j < numServiceUnits; ++j) {\n759:                     // Check if the component / agent is used for the first time\n760:                     if (!mapNewUnits[unitType][serviceUnitIds[j]]) {\n761:                         mapNewUnits[unitType][serviceUnitIds[j]] = true;\n762:                         mapEpochTokenomics[curEpoch].unitPoints[unitType].numNewUnits++;\n763:                         // Check if the owner has introduced component / agent for the first time\n764:                         // This is done together with the new unit check, otherwise it could be just a new unit owner\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n766:                         if (!mapNewOwners[unitOwner]) {\n767:                             mapNewOwners[unitOwner] = true;\n768:                             mapEpochTokenomics[curEpoch].epochPoint.numNewOwners++;\n769:                         }\n770:                     }\n771:                 }\n772:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L714-L772"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`contract` names should use CamelCase",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `veOLAS` is not in CamelCase\n86: contract veOLAS is IErrors, IVotes, IERC20, IERC165 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `wveOLAS` is not in CamelCase\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L130-L130"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`event` declarations should have NatSpec descriptions",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n18:     event MinterUpdated(address indexed minter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n94:     event Deposit(address indexed account, uint256 amount, uint256 locktime, DepositType depositType, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n95:     event Withdraw(address indexed account, uint256 amount, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n96:     event Supply(uint256 previousSupply, uint256 currentSupply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L96-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n89:     event GovernorUpdated(address indexed governor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n90:     event SetTargetSelectors(address[] indexed targets, bytes4[] indexed selectors, uint256[] chainIds, bool[] statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n91:     event SetBridgeMediators(address[] indexed bridgeMediatorL1s, address[] indexed bridgeMediatorL2s, uint256[] chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n92:     event GovernorCheckProposalIdChanged(uint256 indexed proposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n93:     event GuardPaused(address indexed account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n94:     event GuardUnpaused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n48:     event RootGovernorUpdated(address indexed rootMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n49:     event MessageReceived(uint256 indexed stateId, address indexed rootMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n48:     event ForeignGovernorUpdated(address indexed foreignMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n49:     event MessageReceived(address indexed foreignMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n10:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n11:     event ManagerUpdated(address indexed manager);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n12:     event BaseURIChanged(string baseURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n9:     event CreateUnit(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n10:     event UpdateUnitHash(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n9:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n10:     event Pause(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n11:     event Unpause(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n63:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n64:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n65:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n66:     event BondCalculatorUpdated(address indexed bondCalculator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L66-L66"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n67:     event CreateBond(address indexed token, uint256 indexed productId, address indexed owner, uint256 bondId,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n69:     event RedeemBond(uint256 indexed productId, address indexed owner, uint256 bondId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n70:     event CreateProduct(address indexed token, uint256 indexed productId, uint256 supply, uint256 priceLP,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L70-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n72:     event CloseProduct(address indexed token, uint256 indexed productId, uint256 supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n12:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n13:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n14:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n15:     event IncentivesClaimed(address indexed owner, uint256 reward, uint256 topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n21:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n22:     event DonatorBlacklistStatus(address indexed account, bool status);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n119:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n120:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n121:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n122:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n123:     event EpochLengthUpdated(uint256 epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n124:     event EffectiveBondUpdated(uint256 effectiveBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n125:     event IDFUpdated(uint256 idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n126:     event TokenomicsParametersUpdateRequested(uint256 indexed epochNumber, uint256 devsPerCapital, uint256 codePerDev,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n128:     event TokenomicsParametersUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n129:     event IncentiveFractionsUpdateRequested(uint256 indexed epochNumber, uint256 rewardComponentFraction,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L129-L129"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n131:     event IncentiveFractionsUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L131-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n132:     event ComponentRegistryUpdated(address indexed componentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n133:     event AgentRegistryUpdated(address indexed agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L133-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n134:     event ServiceRegistryUpdated(address indexed serviceRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n135:     event DonatorBlacklistUpdated(address indexed blacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n136:     event EpochSettled(uint256 indexed epochCounter, uint256 treasuryRewards, uint256 accountRewards, uint256 accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n137:     event TokenomicsImplementationUpdated(address indexed implementation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L137-L137"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n40:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n41:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n42:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n43:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n44:     event DepositTokenFromAccount(address indexed account, address indexed token, uint256 tokenAmount, uint256 olasAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n45:     event DonateToServicesETH(address indexed sender, uint256[] serviceIds, uint256[] amounts, uint256 donation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n46:     event Withdraw(address indexed token, address indexed to, uint256 tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n47:     event EnableToken(address indexed token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n48:     event DisableToken(address indexed token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n49:     event ReceiveETH(address indexed sender, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n50:     event UpdateTreasuryBalances(uint256 ETHOwned, uint256 ETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n51:     event PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n52:     event UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n53:     event MinAcceptedETHUpdated(uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L53-L53"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Events should use parameters to convey information",
      "description": "For example, rather than using `event Paused()` and `event Unpaused()`, use `event PauseState(address indexed whoChangedIt, bool wasPaused, bool isNowPaused)`",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n94:     event GuardUnpaused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n51:     event PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n52:     event UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L52-L52"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`function` names should use lowerCamelCase",
      "description": "Here is an example of camelCase/lowerCamelCase and other types:\n'helloWorld' is a CamelCase\n'HelloWorld' is Not CamelCase (PascalCase)\n'hello_world' is Not CamelCase (snake_case)\n[For more details](https://khalilstemmler.com/blogs/camel-case-snake-case-pascal-case/)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n//@audit `` is not in CamelCase\n16:     constructor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n//@audit `` is not in CamelCase\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit `` is not in CamelCase\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `` is not in CamelCase\n132:     constructor(address _token, string memory _name, string memory _symbol)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `` is not in CamelCase\n145:     constructor(address _ve, address _token) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L145-L145"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `` is not in CamelCase\n334:     fallback() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L334-L334"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `` is not in CamelCase\n138:     constructor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L138-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `` is not in CamelCase\n62:     constructor(address _fxChild, address _rootGovernor) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L62-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `` is not in CamelCase\n73:     receive() external payable {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `` is not in CamelCase\n62:     constructor(address _AMBContractProxyHome, address _foreignGovernor) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L62-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `` is not in CamelCase\n73:     receive() external payable {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n//@audit `` is not in CamelCase\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit `` is not in CamelCase\n37:     constructor(address _fxChild, address _childToken, address _rootToken) FxBaseChildTunnel(_fxChild) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L37-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit `` is not in CamelCase\n38:     constructor(address _checkpointManager, address _fxRoot, address _childToken, address _rootToken)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `` is not in CamelCase\n16:     constructor(string memory _name, string memory _symbol, string memory _baseURI)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `` is not in CamelCase\n20:     constructor(string memory _name, string memory _symbol, string memory _baseURI, address _componentRegistry)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit `` is not in CamelCase\n15:     constructor(address _componentRegistry, address _agentRegistry) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit `` is not in CamelCase\n37:     constructor (address payable _gnosisSafe, address _gnosisSafeProxyFactory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L37-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit `` is not in CamelCase\n60:     constructor(bytes32 _proxyHash) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L60-L60"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `` is not in CamelCase\n106:     constructor(address _olas, address _tokenomics, address _treasury, address _bondCalculator)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L106-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit `` is not in CamelCase\n30:     constructor(address _tokenomics, address _treasury)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit `` is not in CamelCase\n30:     constructor() {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit `` is not in CamelCase\n29:     constructor(address _olas, address _tokenomics) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `` is not in CamelCase\n232:     constructor()\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit `` is not in CamelCase\n33:     constructor(address tokenomics, bytes memory tokenomicsData) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n//@audit `` is not in CamelCase\n55:     fallback() external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `` is not in CamelCase\n95:     constructor(address _olas, address _tokenomics, address _depository, address _dispenser) payable {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit `` is not in CamelCase\n120:     receive() external payable {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L120-L120"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Expressions for constant values should use `immutable` rather than `constant`",
      "description": "While it does not save gas for some simple binary expressions because the compiler knows that developers often make this mistake, it's still best to use the right tool for the task at hand. There is a difference between `constant` variables and `immutable` variables, and they should each be used in their appropriate contexts. `constants` should be used for literal values written into the code, and `immutable` variables should be used for expressions, or values calculated in, or passed into the constructor.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n103:     bytes4 public constant PROCESS_MESSAGE_FROM_FOREIGN = bytes4(keccak256(bytes(\"processMessageFromForeign(bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n105:     bytes4 public constant SEND_MESSAGE_TO_CHILD = bytes4(keccak256(bytes(\"sendMessageToChild(address,bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n16:     uint256 public constant ONE_YEAR = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider splitting long calculations",
      "description": "The longer a string of operations is, the harder it is to understand it. Consider splitting the full calculation into more steps, with more descriptive temporary variable names, and add extensive comments.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n258:                 lastPoint.blockNumber = initialPoint.blockNumber + uint64((block_slope * uint256(tStep - initialPoint.ts)) / 1e18);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L258-L258"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n120:         result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\n121:         uint256 (result) +\n122:             (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\n123:             0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 39);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L120-L123"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider using `AccessControlDefaultAdminRules` rather than `AccessControl`",
      "description": "These contracts inherits from the OpenZeppelin's AccessControl library. However, this library does not follow some security best practices, for example, the DEFAULT_ADMIN_ROLE is also its own admin, meaning it has permissions to grant and revoke this role [ref](https://docs.openzeppelin.com/contracts/3.x/access-control). \\nConsider following security best practices and OpenZeppelin's recommendations, and use the AccessControlDefaultAdminRules extension to enforce additional security measures over this role.[ref](https://docs.openzeppelin.com/contracts/5.x/api/access#AccessControlDefaultAdminRules)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n9: contract Timelock is TimelockController {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`immutable` variable names don\\'t follow the Solidity style guide",
      "description": "For `immutable` variable names, each word should use all capital letters, with underscores separating each word (CONSTANT_CASE)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n28:     uint256 public immutable timeLaunch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n108:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n132:     address public immutable ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n134:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n120:     address public immutable owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n122:     address public immutable multisig;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n55:     address public immutable fxChild;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n55:     address public immutable AMBContractProxyHome;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n27:     UnitType public immutable unitType;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n13:     address public immutable agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n30:     address payable public immutable gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n32:     address public immutable gnosisSafeProxyFactory;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n56:     bytes32 public immutable proxyHash;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n89:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n22:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n24:     address public immutable tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L24-L24"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "`private`/`public` function name should start with underscore",
      "description": "According to solidity style guide, Private or Public function name should start with underscore.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `` is not in CamelCase\n35:     constructor(UnitType _unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L35"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Assembly block creates dirty bits",
      "description": "Writing data to the free memory pointer without later updating the free memory pointer will cause there to be dirty bits at that memory location. Not updating the free memory pointer will make it [harder](https://docs.soliditylang.org/en/latest/ir-breaking-changes.html#cleanup) for the optimizer to reason about whether the memory needs to be cleaned, which may lead to worse optimizations. Annotate the block with `assembly (\"memory-safe\") { ... }` if the memory's value can be discarded. If the memory needs to be saved, update the free memory pointer in addtion to using the annotation. See [this](https://docs.soliditylang.org/en/latest/assembly.html#memory-safety) link for other cases where the annotation can be used",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n216:             assembly {\n217:                 // First 20 bytes is the address (160 bits)\n218:                 i := add(i, 20)\n219:                 target := mload(add(data, i))\n220:                 // Offset the data by 12 bytes of value (96 bits) and by 4 bytes of payload length (32 bits)\n221:                 i := add(i, 16)\n222:                 payloadLength := mload(add(data, i))\n223:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L216-L223"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n130:             assembly {\n131:                 // First 20 bytes is the address (160 bits)\n132:                 i := add(i, 20)\n133:                 target := mload(add(data, i))\n134:                 // Offset the data by 12 bytes of value (96 bits)\n135:                 i := add(i, 12)\n136:                 value := mload(add(data, i))\n137:                 // Offset the data by 4 bytes of payload length (32 bits)\n138:                 i := add(i, 4)\n139:                 payloadLength := mload(add(data, i))\n140:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L130-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n130:             assembly {\n131:                 // First 20 bytes is the address (160 bits)\n132:                 i := add(i, 20)\n133:                 target := mload(add(data, i))\n134:                 // Offset the data by 12 bytes of value (96 bits)\n135:                 i := add(i, 12)\n136:                 value := mload(add(data, i))\n137:                 // Offset the data by 4 bytes of payload length (32 bits)\n138:                 i := add(i, 4)\n139:                 payloadLength := mload(add(data, i))\n140:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L130-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n57:             assembly {\n58:                 // Read all the addresses first (80 bytes)\n59:                 let offset := 20\n60:                 to := mload(add(data, offset))\n61:                 offset := add(offset, 20)\n62:                 fallbackHandler := mload(add(data, offset))\n63:                 offset := add(offset, 20)\n64:                 paymentToken := mload(add(data, offset))\n65:                 offset := add(offset, 20)\n66:                 paymentReceiver := mload(add(data, offset))\n67: \n68:                 // Read all the uints (64 more bytes, a total of 144 bytes)\n69:                 offset := add(offset, 32)\n70:                 payment := mload(add(data, offset))\n71:                 offset := add(offset, 32)\n72:                 nonce := mload(add(data, offset))\n73:             }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L57-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n098:         assembly {\n099:             multisig := mload(add(data, DEFAULT_DATA_LENGTH))\n100:         }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L98-L100"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Add inline comments for unnamed parameters",
      "description": "`function func(address a, address)` -> `function func(address a, address /* b */)`",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n//@audit parameter number 1 starting from left need inline comment\n297:     function transfer(address, uint256) external returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L297-L297"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n//@audit parameter number 1 starting from left need inline comment\n302:     function approve(address, uint256) external returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L302-L302"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n//@audit parameter number 1 starting from left need inline comment\n//@audit parameter number 2 starting from left need inline comment\n307:     function transferFrom(address, address, uint256) external returns (bool) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L307-L307"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n//@audit parameter number 1 starting from left need inline comment\n312:     function allowance(address, address) external view returns (uint256) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L312-L312"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n317:     function delegates(address) external view returns (address) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L317-L317"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n322:     function delegate(address) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L322-L322"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit parameter number 0 starting from left need inline comment\n//@audit parameter number 1 starting from left need inline comment\n//@audit parameter number 2 starting from left need inline comment\n//@audit parameter number 3 starting from left need inline comment\n//@audit parameter number 4 starting from left need inline comment\n//@audit parameter number 5 starting from left need inline comment\n328:     function delegateBySig(address, uint256, uint256, uint8, bytes32, bytes32) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L328-L328"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit parameter number 1 starting from left need inline comment\n//@audit parameter number 4 starting from left need inline comment\n//@audit parameter number 5 starting from left need inline comment\n//@audit parameter number 6 starting from left need inline comment\n//@audit parameter number 7 starting from left need inline comment\n//@audit parameter number 8 starting from left need inline comment\n//@audit parameter number 9 starting from left need inline comment\n//@audit parameter number 10 starting from left need inline comment\n387:     function checkTransaction(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L387"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit parameter number 0 starting from left need inline comment\n//@audit parameter number 1 starting from left need inline comment\n572:     function checkAfterExecution(bytes32, bool) external {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L572"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit parameter number 0 starting from left need inline comment\n41:     function _getSubComponents(UnitType, uint32 componentId) internal view virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit parameter number 1 starting from left need inline comment\n31:     function _checkDependencies(uint32[] memory dependencies, uint32) internal virtual override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L31-L31"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Function state mutability can be restricted to pure",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n572:     function checkAfterExecution(bytes32, bool) external {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L572"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n374:     function tokenomicsImplementation() external view returns (address implementation) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L374-L374"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use the latest Solidity version for better security",
      "description": "Using the latest solidity version will help avoid old compiler related vulnerabilities",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Consider adding formal verification proofs",
      "description": "Consider using formal verification to mathematically prove that your code does what is intended, and does not have any edge cases with unexpected behavior. The solidity compiler itself has this functionality [built in](https://docs.soliditylang.org/en/latest/smtchecker.html#smtchecker-and-formal-verification)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n@audit Should implement invariant tests\n1: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L1-L1"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing zero address check in functions with address parameters",
      "description": "Adding a zero address check for each address type parameter can prevent errors.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit amount,  are not checked\n128:     function decreaseAllowance(address spender, uint256 amount) external returns (bool) {\n129:         uint256 spenderAllowance = allowance[msg.sender][spender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L128-L129"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n//@audit amount,  are not checked\n145:     function increaseAllowance(address spender, uint256 amount) external returns (bool) {\n146:         uint256 spenderAllowance = allowance[msg.sender][spender];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L145-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit _name, _symbol,  are not checked\n132:     constructor(address _token, string memory _name, string memory _symbol)\n133:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L132-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit idx,  are not checked\n164:     function getUserPoint(address account, uint256 idx) external view returns (PointVoting memory) {\n165:         return mapUserPoints[account][idx];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L164-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit curSupply,  are not checked\n173:     function _checkpoint(\n174:         address account,\n175:         LockedBalance memory oldLocked,\n176:         LockedBalance memory newLocked,\n177:         uint128 curSupply\n178:     ) internal {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L173-L178"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit amount,  are not checked\n767:     function transfer(address to, uint256 amount) external virtual override returns (bool) {\n768:         revert NonTransferable(address(this));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L767-L768"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit amount,  are not checked\n772:     function approve(address spender, uint256 amount) external virtual override returns (bool) {\n773:         revert NonTransferable(address(this));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L772-L773"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit amount,  are not checked\n777:     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\n778:         revert NonTransferable(address(this));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L777-L778"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit nonce, expiry, v, r, s,  are not checked\n800:     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n801:     external virtual override\n802:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L802"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit idx,  are not checked\n021:     function mapSupplyPoints(uint256 idx) external view returns (PointVoting memory sPoint);\n022: \n023:     /// @dev Gets the slope change for a specific timestamp.\n024:     /// @param ts Timestamp.\n025:     /// @return slopeChange Signed slope change.\n026:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange);\n027: \n028:     /// @dev Gets the most recently recorded user point for `account`.\n029:     /// @param account Account address.\n030:     /// @return pv Last checkpoint.\n031:     function getLastUserPoint(address account) external view returns (PointVoting memory pv);\n032: \n033:     /// @dev Gets the number of user points.\n034:     /// @param account Account address.\n035:     /// @return userNumPoints Number of user points.\n036:     function getNumUserPoints(address account) external view returns (uint256 userNumPoints);\n037: \n038:     /// @dev Gets the checkpoint structure at number `idx` for `account`.\n039:     /// @notice The out of bound condition is treated by the default code generation check.\n040:     /// @param account User wallet address.\n041:     /// @param idx User point number.\n042:     /// @return uPoint The requested user point.\n043:     function getUserPoint(address account, uint256 idx) external view returns (PointVoting memory uPoint);\n044: \n045:     /// @dev Gets voting power at a specific block number.\n046:     /// @param account Account address.\n047:     /// @param blockNumber Block number.\n048:     /// @return balance Voting balance / power.\n049:     function getPastVotes(address account, uint256 blockNumber) external view returns (uint256 balance);\n050: \n051:     /// @dev Gets the account balance in native token.\n052:     /// @param account Account address.\n053:     /// @return balance Account balance.\n054:     function balanceOf(address account) external view returns (uint256 balance);\n055: \n056:     /// @dev Gets the account balance at a specific block number.\n057:     /// @param account Account address.\n058:     /// @param blockNumber Block number.\n059:     /// @return balance Account balance.\n060:     function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256 balance);\n061: \n062:     /// @dev Gets the `account`'s lock end time.\n063:     /// @param account Account address.\n064:     /// @return unlockTime Lock end time.\n065:     function lockedEnd(address account) external view returns (uint256 unlockTime);\n066: \n067:     /// @dev Gets the voting power.\n068:     /// @param account Account address.\n069:     /// @return balance Account balance.\n070:     function getVotes(address account) external view returns (uint256 balance);\n071: \n072:     /// @dev Gets total token supply.\n073:     /// @return supply Total token supply.\n074:     function totalSupply() external view returns (uint256 supply);\n075: \n076:     /// @dev Gets total token supply at a specific block number.\n077:     /// @param blockNumber Block number.\n078:     /// @return supplyAt Supply at the specified block number.\n079:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt);\n080: \n081:     /// @dev Calculates total voting power at time `ts`.\n082:     /// @param ts Time to get total voting power at.\n083:     /// @return vPower Total voting power.\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L21-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit ts,  are not checked\n026:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange);\n027: \n028:     /// @dev Gets the most recently recorded user point for `account`.\n029:     /// @param account Account address.\n030:     /// @return pv Last checkpoint.\n031:     function getLastUserPoint(address account) external view returns (PointVoting memory pv);\n032: \n033:     /// @dev Gets the number of user points.\n034:     /// @param account Account address.\n035:     /// @return userNumPoints Number of user points.\n036:     function getNumUserPoints(address account) external view returns (uint256 userNumPoints);\n037: \n038:     /// @dev Gets the checkpoint structure at number `idx` for `account`.\n039:     /// @notice The out of bound condition is treated by the default code generation check.\n040:     /// @param account User wallet address.\n041:     /// @param idx User point number.\n042:     /// @return uPoint The requested user point.\n043:     function getUserPoint(address account, uint256 idx) external view returns (PointVoting memory uPoint);\n044: \n045:     /// @dev Gets voting power at a specific block number.\n046:     /// @param account Account address.\n047:     /// @param blockNumber Block number.\n048:     /// @return balance Voting balance / power.\n049:     function getPastVotes(address account, uint256 blockNumber) external view returns (uint256 balance);\n050: \n051:     /// @dev Gets the account balance in native token.\n052:     /// @param account Account address.\n053:     /// @return balance Account balance.\n054:     function balanceOf(address account) external view returns (uint256 balance);\n055: \n056:     /// @dev Gets the account balance at a specific block number.\n057:     /// @param account Account address.\n058:     /// @param blockNumber Block number.\n059:     /// @return balance Account balance.\n060:     function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256 balance);\n061: \n062:     /// @dev Gets the `account`'s lock end time.\n063:     /// @param account Account address.\n064:     /// @return unlockTime Lock end time.\n065:     function lockedEnd(address account) external view returns (uint256 unlockTime);\n066: \n067:     /// @dev Gets the voting power.\n068:     /// @param account Account address.\n069:     /// @return balance Account balance.\n070:     function getVotes(address account) external view returns (uint256 balance);\n071: \n072:     /// @dev Gets total token supply.\n073:     /// @return supply Total token supply.\n074:     function totalSupply() external view returns (uint256 supply);\n075: \n076:     /// @dev Gets total token supply at a specific block number.\n077:     /// @param blockNumber Block number.\n078:     /// @return supplyAt Supply at the specified block number.\n079:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt);\n080: \n081:     /// @dev Calculates total voting power at time `ts`.\n082:     /// @param ts Time to get total voting power at.\n083:     /// @return vPower Total voting power.\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L26-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit idx,  are not checked\n043:     function getUserPoint(address account, uint256 idx) external view returns (PointVoting memory uPoint);\n044: \n045:     /// @dev Gets voting power at a specific block number.\n046:     /// @param account Account address.\n047:     /// @param blockNumber Block number.\n048:     /// @return balance Voting balance / power.\n049:     function getPastVotes(address account, uint256 blockNumber) external view returns (uint256 balance);\n050: \n051:     /// @dev Gets the account balance in native token.\n052:     /// @param account Account address.\n053:     /// @return balance Account balance.\n054:     function balanceOf(address account) external view returns (uint256 balance);\n055: \n056:     /// @dev Gets the account balance at a specific block number.\n057:     /// @param account Account address.\n058:     /// @param blockNumber Block number.\n059:     /// @return balance Account balance.\n060:     function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256 balance);\n061: \n062:     /// @dev Gets the `account`'s lock end time.\n063:     /// @param account Account address.\n064:     /// @return unlockTime Lock end time.\n065:     function lockedEnd(address account) external view returns (uint256 unlockTime);\n066: \n067:     /// @dev Gets the voting power.\n068:     /// @param account Account address.\n069:     /// @return balance Account balance.\n070:     function getVotes(address account) external view returns (uint256 balance);\n071: \n072:     /// @dev Gets total token supply.\n073:     /// @return supply Total token supply.\n074:     function totalSupply() external view returns (uint256 supply);\n075: \n076:     /// @dev Gets total token supply at a specific block number.\n077:     /// @param blockNumber Block number.\n078:     /// @return supplyAt Supply at the specified block number.\n079:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt);\n080: \n081:     /// @dev Calculates total voting power at time `ts`.\n082:     /// @param ts Time to get total voting power at.\n083:     /// @return vPower Total voting power.\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L43-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit blockNumber,  are not checked\n049:     function getPastVotes(address account, uint256 blockNumber) external view returns (uint256 balance);\n050: \n051:     /// @dev Gets the account balance in native token.\n052:     /// @param account Account address.\n053:     /// @return balance Account balance.\n054:     function balanceOf(address account) external view returns (uint256 balance);\n055: \n056:     /// @dev Gets the account balance at a specific block number.\n057:     /// @param account Account address.\n058:     /// @param blockNumber Block number.\n059:     /// @return balance Account balance.\n060:     function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256 balance);\n061: \n062:     /// @dev Gets the `account`'s lock end time.\n063:     /// @param account Account address.\n064:     /// @return unlockTime Lock end time.\n065:     function lockedEnd(address account) external view returns (uint256 unlockTime);\n066: \n067:     /// @dev Gets the voting power.\n068:     /// @param account Account address.\n069:     /// @return balance Account balance.\n070:     function getVotes(address account) external view returns (uint256 balance);\n071: \n072:     /// @dev Gets total token supply.\n073:     /// @return supply Total token supply.\n074:     function totalSupply() external view returns (uint256 supply);\n075: \n076:     /// @dev Gets total token supply at a specific block number.\n077:     /// @param blockNumber Block number.\n078:     /// @return supplyAt Supply at the specified block number.\n079:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt);\n080: \n081:     /// @dev Calculates total voting power at time `ts`.\n082:     /// @param ts Time to get total voting power at.\n083:     /// @return vPower Total voting power.\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L49-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit blockNumber,  are not checked\n060:     function balanceOfAt(address account, uint256 blockNumber) external view returns (uint256 balance);\n061: \n062:     /// @dev Gets the `account`'s lock end time.\n063:     /// @param account Account address.\n064:     /// @return unlockTime Lock end time.\n065:     function lockedEnd(address account) external view returns (uint256 unlockTime);\n066: \n067:     /// @dev Gets the voting power.\n068:     /// @param account Account address.\n069:     /// @return balance Account balance.\n070:     function getVotes(address account) external view returns (uint256 balance);\n071: \n072:     /// @dev Gets total token supply.\n073:     /// @return supply Total token supply.\n074:     function totalSupply() external view returns (uint256 supply);\n075: \n076:     /// @dev Gets total token supply at a specific block number.\n077:     /// @param blockNumber Block number.\n078:     /// @return supplyAt Supply at the specified block number.\n079:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt);\n080: \n081:     /// @dev Calculates total voting power at time `ts`.\n082:     /// @param ts Time to get total voting power at.\n083:     /// @return vPower Total voting power.\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L60-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit blockNumber,  are not checked\n079:     function totalSupplyAt(uint256 blockNumber) external view returns (uint256 supplyAt);\n080: \n081:     /// @dev Calculates total voting power at time `ts`.\n082:     /// @param ts Time to get total voting power at.\n083:     /// @return vPower Total voting power.\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L79-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit ts,  are not checked\n084:     function totalSupplyLockedAtT(uint256 ts) external view returns (uint256 vPower);\n085: \n086:     /// @dev Calculates current total voting power.\n087:     /// @return vPower Total voting power.\n088:     function totalSupplyLocked() external view returns (uint256 vPower);\n089: \n090:     /// @dev Calculate total voting power at some point in the past.\n091:     /// @param blockNumber Block number to calculate the total voting power at.\n092:     /// @return vPower Total voting power.\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L84-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit blockNumber,  are not checked\n093:     function getPastTotalSupply(uint256 blockNumber) external view returns (uint256 vPower);\n094: \n095:     /// @dev Gets information about the interface support.\n096:     /// @param interfaceId A specified interface Id.\n097:     /// @return True if this contract implements the interface defined by interfaceId.\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L93-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit interfaceId,  are not checked\n098:     function supportsInterface(bytes4 interfaceId) external view returns (bool);\n099: \n100:     /// @dev Reverts the allowance of this token.\n101:     function allowance(address owner, address spender) external view returns (uint256);\n102: \n103:     /// @dev Reverts delegates of this token.\n104:     function delegates(address account) external view returns (address);\n105: }\n106: \n107: /// @dev Zero address.\n108: error ZeroAddress();\n109: \n110: /// @dev Provided wrong timestamp.\n111: /// @param minTimeStamp Minimum timestamp.\n112: /// @param providedTimeStamp Provided timestamp.\n113: error WrongTimestamp(uint256 minTimeStamp, uint256 providedTimeStamp);\n114: \n115: /// @dev Called function is implemented in a specified veOLAS contract.\n116: /// @param veToken Original veOLAS address.\n117: error ImplementedIn(address veToken);\n118: \n119: /// @dev veOLAS token is non-transferable.\n120: /// @param veToken veOLAS token address.\n121: error NonTransferable(address veToken);\n122: \n123: /// @dev veOLAS token is non-delegatable.\n124: /// @param veToken veOLAS token address.\n125: error NonDelegatable(address veToken);\n126: \n127: /// @title wveOLAS - Wrapper smart contract for view functions of veOLAS contract\n128: /// @author AL\n129: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L98-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit ,  are not checked\n297:     function transfer(address, uint256) external returns (bool) {\n298:         revert NonTransferable(ve);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L297-L298"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit ,  are not checked\n302:     function approve(address, uint256) external returns (bool) {\n303:         revert NonTransferable(ve);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L302-L303"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit ,  are not checked\n307:     function transferFrom(address, address, uint256) external returns (bool) {\n308:         revert NonTransferable(ve);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L307-L308"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit , , , , ,  are not checked\n328:     function delegateBySig(address, uint256, uint256, uint8, bytes32, bytes32) external\n329:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L328-L329"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit proposalId,  are not checked\n07:     function state(uint256 proposalId) external returns (ProposalState);\n08: }\n09: \n10: // Governor proposal state\n11: enum ProposalState {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L7-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit , , , , ,  are not checked\n387:     function checkTransaction(\n388:         address to,\n389:         uint256,\n390:         bytes memory data,\n391:         Enum.Operation operation,\n392:         uint256,\n393:         uint256,\n394:         uint256,\n395:         address,\n396:         address payable,\n397:         bytes memory,\n398:         address\n399:     ) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L399"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit , ,  are not checked\n572:     function checkAfterExecution(bytes32, bool) external {}\n573: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L573"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit stateId, data,  are not checked\n06:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external;\n07: }\n08: \n09: /// @dev Provided zero address.\n10: error ZeroAddress();\n11: \n12: /// @dev Only self contract is allowed to call the function.\n13: /// @param sender Sender address.\n14: /// @param instance Required contract instance address.\n15: error SelfCallOnly(address sender, address instance);\n16: \n17: /// @dev Only `fxChild` is allowed to call the function.\n18: /// @param sender Sender address.\n19: /// @param fxChild Required Fx Child address.\n20: error FxChildOnly(address sender, address fxChild);\n21: \n22: /// @dev Only on behalf of `rootGovernor` the function is allowed to process the data.\n23: /// @param sender Sender address.\n24: /// @param rootGovernor Required Root Governor address.\n25: error RootGovernorOnly(address sender, address rootGovernor);\n26: \n27: /// @dev Provided incorrect data length.\n28: /// @param expected Expected minimum data length.\n29: /// @param provided Provided data length.\n30: error IncorrectDataLength(uint256 expected, uint256 provided);\n31: \n32: /// @dev Provided value is bigger than the actual balance.\n33: /// @param value Provided value.\n34: /// @param balance Actual balance.\n35: error InsufficientBalance(uint256 value, uint256 balance);\n36: \n37: /// @dev Target execution failed.\n38: /// @param target Target address.\n39: /// @param value Provided value.\n40: /// @param payload Provided payload.\n41: error TargetExecFailed(address target, uint256 value, bytes payload);\n42: \n43: /// @title FxGovernorTunnel - Smart contract for the governor child tunnel bridge implementation\n44: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n45: /// @author AL\n46: contract FxGovernorTunnel is IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L6-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit ,  are not checked\n70:     function _processMessageFromRoot(\n71:         uint256 /* stateId */,\n72:         address sender,\n73:         bytes memory message\n74:     ) internal override validateSender(sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L70-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n//@audit amount,  are not checked\n25:     function approve(address spender, uint256 amount) external returns (bool);\n26: \n27:     /// @dev Transfers the token amount.\n28:     /// @param to Address to transfer to.\n29:     /// @param amount The amount to transfer.\n30:     /// @return True if the function execution is successful.\n31:     function transfer(address to, uint256 amount) external returns (bool);\n32: \n33:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n34:     /// @param from Account address to transfer from.\n35:     /// @param to Account address to transfer to.\n36:     /// @param amount Amount to transfer to.\n37:     /// @return True if the function execution is successful.\n38:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n39: \n40:     /// @dev Mints tokens.\n41:     /// @param account Account address.\n42:     /// @param amount Token amount.\n43:     function mint(address account, uint256 amount) external;\n44: \n45:     /// @dev Burns tokens.\n46:     /// @param amount Token amount to burn.\n47:     function burn(uint256 amount) external;\n48: }\n49: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L25-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n//@audit amount,  are not checked\n31:     function transfer(address to, uint256 amount) external returns (bool);\n32: \n33:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n34:     /// @param from Account address to transfer from.\n35:     /// @param to Account address to transfer to.\n36:     /// @param amount Amount to transfer to.\n37:     /// @return True if the function execution is successful.\n38:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n39: \n40:     /// @dev Mints tokens.\n41:     /// @param account Account address.\n42:     /// @param amount Token amount.\n43:     function mint(address account, uint256 amount) external;\n44: \n45:     /// @dev Burns tokens.\n46:     /// @param amount Token amount to burn.\n47:     function burn(uint256 amount) external;\n48: }\n49: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L31-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n//@audit amount,  are not checked\n38:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n39: \n40:     /// @dev Mints tokens.\n41:     /// @param account Account address.\n42:     /// @param amount Token amount.\n43:     function mint(address account, uint256 amount) external;\n44: \n45:     /// @dev Burns tokens.\n46:     /// @param amount Token amount to burn.\n47:     function burn(uint256 amount) external;\n48: }\n49: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L38-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n//@audit amount,  are not checked\n43:     function mint(address account, uint256 amount) external;\n44: \n45:     /// @dev Burns tokens.\n46:     /// @param amount Token amount to burn.\n47:     function burn(uint256 amount) external;\n48: }\n49: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L43-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n//@audit amount,  are not checked\n47:     function burn(uint256 amount) external;\n48: }\n49: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L47-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n//@audit unitId,  are not checked\n129:     function _getUnitHash(uint256 unitId) internal view virtual returns (bytes32);\n130: \n131:     /// @dev Returns unit token URI.\n132:     /// @notice Expected multicodec: dag-pb; hashing function: sha2-256, with base16 encoding and leading CID_PREFIX removed.\n133:     /// @param unitId Unit Id.\n134:     /// @return Unit token URI string.\n135:     function tokenURI(uint256 unitId) public view virtual override returns (string memory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L129-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit dependencies, maxUnitId,  are not checked\n42:     function _checkDependencies(uint32[] memory dependencies, uint32 maxUnitId) internal virtual;\n43: \n44:     /// @dev Creates unit.\n45:     /// @param unitOwner Owner of the unit.\n46:     /// @param unitHash IPFS CID hash of the unit.\n47:     /// @param dependencies Set of unit dependencies in a sorted ascending order (unit Ids).\n48:     /// @return unitId The id of a minted unit.\n49:     function create(address unitOwner, bytes32 unitHash, uint32[] memory dependencies)\n50:         external virtual returns (uint256 unitId)\n51:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L42-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit unitId,  are not checked\n152:     function getUnit(uint256 unitId) external view virtual returns (Unit memory unit) {\n153:         unit = mapUnits[unitId];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L152-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit unitId,  are not checked\n160:     function getDependencies(uint256 unitId) external view virtual\n161:         returns (uint256 numDependencies, uint32[] memory dependencies)\n162:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L160-L162"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit unitId,  are not checked\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n172:         returns (uint256 numHashes, bytes32[] memory unitHashes)\n173:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L173"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit unitId,  are not checked\n193:     function _getSubComponents(UnitType subcomponentsFromType, uint32 unitId) internal view virtual\n194:         returns (uint32[] memory subComponentIds);\n195: \n196:     /// @dev Calculates the set of subcomponent Ids.\n197:     /// @param subcomponentsFromType Type of the unit: component or agent.\n198:     /// @param unitIds Unit Ids.\n199:     /// @return subComponentIds Subcomponent Ids.\n200:     function _calculateSubComponents(UnitType subcomponentsFromType, uint32[] memory unitIds) internal view virtual\n201:         returns (uint32[] memory subComponentIds)\n202:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L193-L202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit unitId,  are not checked\n270:     function _getUnitHash(uint256 unitId) internal view override returns (bytes32) {\n271:         return mapUnits[unitId].unitHash;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L270-L271"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit _baseURI,  are not checked\n16:     constructor(string memory _name, string memory _symbol, string memory _baseURI)\n17:         UnitRegistry(UnitType.Component)\n18:         ERC721(_name, _symbol)\n19:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L16-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit _baseURI,  are not checked\n20:     constructor(string memory _name, string memory _symbol, string memory _baseURI, address _componentRegistry)\n21:         UnitRegistry(UnitType.Agent)\n22:         ERC721(_name, _symbol)\n23:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L20-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit ,  are not checked\n31:     function _checkDependencies(uint32[] memory dependencies, uint32) internal virtual override {\n32:         // Check that the agent has at least one component\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L31-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit initializer, saltNonce,  are not checked\n10:     function createProxyWithNonce(\n11:         address _singleton,\n12:         bytes memory initializer,\n13:         uint256 saltNonce\n14:     ) external returns (address proxy);\n15: }\n16: \n17: /// @dev Provided incorrect data length.\n18: /// @param expected Expected minimum data length.\n19: /// @param provided Provided data length.\n20: error IncorrectDataLength(uint256 expected, uint256 provided);\n21: \n22: /// @title Gnosis Safe - Smart contract for Gnosis Safe multisig implementation of a generic multisig interface\n23: /// @author Aleksandr Kuperman - <aleksandr.kuperman@valory.xyz>\n24: contract GnosisSafeMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L10-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit data,  are not checked\n45:     function _parseData(bytes memory data) internal pure\n46:         returns (address to, address fallbackHandler, address paymentToken, address payable paymentReceiver,\n47:             uint256 payment, uint256 nonce, bytes memory payload)\n48:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L45-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit unitHash, dependencies,  are not checked\n16:     function create(\n17:         address unitOwner,\n18:         bytes32 unitHash,\n19:         uint32[] memory dependencies\n20:     ) external returns (uint256);\n21: \n22:     /// @dev Updates the component / agent hash.\n23:     /// @param owner Owner of the component / agent.\n24:     /// @param unitId Unit Id.\n25:     /// @param unitHash Updated IPFS hash of the component / agent.\n26:     /// @return success True, if function executed successfully.\n27:     function updateHash(address owner, uint256 unitId, bytes32 unitHash) external returns (bool success);\n28: \n29:     /// @dev Gets subcomponents of a provided unit Id from a local public map.\n30:     /// @param unitId Unit Id.\n31:     /// @return subComponentIds Set of subcomponents.\n32:     /// @return numSubComponents Number of subcomponents.\n33:     function getLocalSubComponents(uint256 unitId) external view returns (uint32[] memory subComponentIds, uint256 numSubComponents);\n34: \n35:     /// @dev Calculates the set of subcomponent Ids.\n36:     /// @param unitIds Set of unit Ids.\n37:     /// @return subComponentIds Subcomponent Ids.\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n39: \n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L16-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit unitId, unitHash,  are not checked\n27:     function updateHash(address owner, uint256 unitId, bytes32 unitHash) external returns (bool success);\n28: \n29:     /// @dev Gets subcomponents of a provided unit Id from a local public map.\n30:     /// @param unitId Unit Id.\n31:     /// @return subComponentIds Set of subcomponents.\n32:     /// @return numSubComponents Number of subcomponents.\n33:     function getLocalSubComponents(uint256 unitId) external view returns (uint32[] memory subComponentIds, uint256 numSubComponents);\n34: \n35:     /// @dev Calculates the set of subcomponent Ids.\n36:     /// @param unitIds Set of unit Ids.\n37:     /// @return subComponentIds Subcomponent Ids.\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n39: \n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L27-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit unitId,  are not checked\n33:     function getLocalSubComponents(uint256 unitId) external view returns (uint32[] memory subComponentIds, uint256 numSubComponents);\n34: \n35:     /// @dev Calculates the set of subcomponent Ids.\n36:     /// @param unitIds Set of unit Ids.\n37:     /// @return subComponentIds Subcomponent Ids.\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n39: \n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L33-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit unitIds,  are not checked\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n39: \n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L38-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit unitId,  are not checked\n44:     function getUpdatedHashes(uint256 unitId) external view returns (uint256 numHashes, bytes32[] memory unitHashes);\n45: \n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n48:     function totalSupply() external view returns (uint256);\n49: }\n50: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L44-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit productIds,  are not checked\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n245:         // Check for the contract ownership\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L245"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit epoch, unitType,  are not checked\n1245:     function getUnitPoint(uint256 epoch, uint256 unitType) external view returns (UnitPoint memory up) {\n1246:         up = mapEpochTokenomics[epoch].unitPoints[unitType];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1245-L1246"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit epoch,  are not checked\n1252:     function getIDF(uint256 epoch) external view returns (uint256 idf)\n1253:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1252-L1253"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n//@audit tokenAmount, priceLP,  are not checked\n10:     function calculatePayoutOLAS(uint256 tokenAmount, uint256 priceLP) external view\n11:         returns (uint256 amountOLAS);\n12: \n13:     /// @dev Get reserveX/reserveY at the time of product creation.\n14:     /// @param token Token address.\n15:     /// @return priceLP Resulting reserve ratio.\n16:     function getCurrentPriceLP(address token) external view returns (uint256 priceLP);\n17: }\n18: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L10-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n//@audit amount,  are not checked\n08:     function mint(address account, uint256 amount) external;\n09: \n10:     /// @dev Provides OLA token time launch.\n11:     /// @return Time launch.\n12:     function timeLaunch() external view returns (uint256);\n13: }\n14: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L8-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n//@audit serviceId,  are not checked\n14:     function exists(uint256 serviceId) external view returns (bool);\n15: \n16:     /// @dev Gets the full set of linearized components / canonical agent Ids for a specified service.\n17:     /// @notice The service must be / have been deployed in order to get the actual data.\n18:     /// @param serviceId Service Id.\n19:     /// @return numUnitIds Number of component / agent Ids.\n20:     /// @return unitIds Set of component / agent Ids.\n21:     function getUnitIdsOfService(UnitType unitType, uint256 serviceId) external view\n22:         returns (uint256 numUnitIds, uint32[] memory unitIds);\n23: \n24:     /// @dev Gets the value of slashed funds from the service registry.\n25:     /// @return amount Drained amount.\n26:     function slashedFunds() external view returns (uint256 amount);\n27: \n28:     /// @dev Drains slashed funds.\n29:     /// @return amount Drained amount.\n30:     function drain() external returns (uint256 amount);\n31: }\n32: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L14-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n//@audit serviceId,  are not checked\n21:     function getUnitIdsOfService(UnitType unitType, uint256 serviceId) external view\n22:         returns (uint256 numUnitIds, uint32[] memory unitIds);\n23: \n24:     /// @dev Gets the value of slashed funds from the service registry.\n25:     /// @return amount Drained amount.\n26:     function slashedFunds() external view returns (uint256 amount);\n27: \n28:     /// @dev Drains slashed funds.\n29:     /// @return amount Drained amount.\n30:     function drain() external returns (uint256 amount);\n31: }\n32: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L21-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n//@audit tokenId,  are not checked\n14:     function ownerOf(uint256 tokenId) external view returns (address);\n15: \n16:     /// @dev Gets the total amount of tokens stored by the contract.\n17:     /// @return Amount of tokens.\n18:     function totalSupply() external view returns (uint256);\n19: \n20:     /// @dev Transfers the token amount.\n21:     /// @param to Address to transfer to.\n22:     /// @param amount The amount to transfer.\n23:     /// @return True if the function execution is successful.\n24:     function transfer(address to, uint256 amount) external returns (bool);\n25: \n26:     /// @dev Gets remaining number of tokens that the `spender` can transfer on behalf of `owner`.\n27:     /// @param owner Token owner.\n28:     /// @param spender Account address that is able to transfer tokens on behalf of the owner.\n29:     /// @return Token amount allowed to be transferred.\n30:     function allowance(address owner, address spender) external view returns (uint256);\n31: \n32:     /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n33:     /// @param spender Account address that will be able to transfer tokens on behalf of the caller.\n34:     /// @param amount Token amount.\n35:     /// @return True if the function execution is successful.\n36:     function approve(address spender, uint256 amount) external returns (bool);\n37: \n38:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n39:     /// @param from Account address to transfer from.\n40:     /// @param to Account address to transfer to.\n41:     /// @param amount Amount to transfer to.\n42:     /// @return True if the function execution is successful.\n43:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n44: }\n45: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L14-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n//@audit amount,  are not checked\n24:     function transfer(address to, uint256 amount) external returns (bool);\n25: \n26:     /// @dev Gets remaining number of tokens that the `spender` can transfer on behalf of `owner`.\n27:     /// @param owner Token owner.\n28:     /// @param spender Account address that is able to transfer tokens on behalf of the owner.\n29:     /// @return Token amount allowed to be transferred.\n30:     function allowance(address owner, address spender) external view returns (uint256);\n31: \n32:     /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n33:     /// @param spender Account address that will be able to transfer tokens on behalf of the caller.\n34:     /// @param amount Token amount.\n35:     /// @return True if the function execution is successful.\n36:     function approve(address spender, uint256 amount) external returns (bool);\n37: \n38:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n39:     /// @param from Account address to transfer from.\n40:     /// @param to Account address to transfer to.\n41:     /// @param amount Amount to transfer to.\n42:     /// @return True if the function execution is successful.\n43:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n44: }\n45: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L24-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n//@audit amount,  are not checked\n36:     function approve(address spender, uint256 amount) external returns (bool);\n37: \n38:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n39:     /// @param from Account address to transfer from.\n40:     /// @param to Account address to transfer to.\n41:     /// @param amount Amount to transfer to.\n42:     /// @return True if the function execution is successful.\n43:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n44: }\n45: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L36-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n//@audit amount,  are not checked\n43:     function transferFrom(address from, address to, uint256 amount) external returns (bool);\n44: }\n45: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L43-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit serviceIds, amounts, donationETH,  are not checked\n19:     function trackServiceDonations(\n20:         address donator,\n21:         uint256[] memory serviceIds,\n22:         uint256[] memory amounts,\n23:         uint256 donationETH\n24:     ) external;\n25: \n26:     /// @dev Reserves OLAS amount from the effective bond to be minted during a bond program.\n27:     /// @notice Programs exceeding the limit in the epoch are not allowed.\n28:     /// @param amount Requested amount for the bond program.\n29:     /// @return True if effective bond threshold is not reached.\n30:     function reserveAmountForBondProgram(uint256 amount) external returns(bool);\n31: \n32:     /// @dev Refunds unused bond program amount.\n33:     /// @param amount Amount to be refunded from the bond program.\n34:     function refundFromBondProgram(uint256 amount) external;\n35: \n36:     /// @dev Gets component / agent owner incentives and clears the balances.\n37:     /// @param account Account address.\n38:     /// @param unitTypes Set of unit types (component / agent).\n39:     /// @param unitIds Set of corresponding unit Ids where account is the owner.\n40:     /// @return reward Reward amount.\n41:     /// @return topUp Top-up amount.\n42:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n43:         returns (uint256 reward, uint256 topUp);\n44: \n45:     /// @dev Gets inverse discount factor with the multiple of 1e18 of the last epoch.\n46:     /// @return idf Discount factor with the multiple of 1e18.\n47:     function getLastIDF() external view returns (uint256 idf);\n48: \n49:     /// @dev Gets the service registry contract address\n50:     /// @return Service registry contract address;\n51:     function serviceRegistry() external view returns (address);\n52: }\n53: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L19-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit amount,  are not checked\n30:     function reserveAmountForBondProgram(uint256 amount) external returns(bool);\n31: \n32:     /// @dev Refunds unused bond program amount.\n33:     /// @param amount Amount to be refunded from the bond program.\n34:     function refundFromBondProgram(uint256 amount) external;\n35: \n36:     /// @dev Gets component / agent owner incentives and clears the balances.\n37:     /// @param account Account address.\n38:     /// @param unitTypes Set of unit types (component / agent).\n39:     /// @param unitIds Set of corresponding unit Ids where account is the owner.\n40:     /// @return reward Reward amount.\n41:     /// @return topUp Top-up amount.\n42:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n43:         returns (uint256 reward, uint256 topUp);\n44: \n45:     /// @dev Gets inverse discount factor with the multiple of 1e18 of the last epoch.\n46:     /// @return idf Discount factor with the multiple of 1e18.\n47:     function getLastIDF() external view returns (uint256 idf);\n48: \n49:     /// @dev Gets the service registry contract address\n50:     /// @return Service registry contract address;\n51:     function serviceRegistry() external view returns (address);\n52: }\n53: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L30-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit amount,  are not checked\n34:     function refundFromBondProgram(uint256 amount) external;\n35: \n36:     /// @dev Gets component / agent owner incentives and clears the balances.\n37:     /// @param account Account address.\n38:     /// @param unitTypes Set of unit types (component / agent).\n39:     /// @param unitIds Set of corresponding unit Ids where account is the owner.\n40:     /// @return reward Reward amount.\n41:     /// @return topUp Top-up amount.\n42:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n43:         returns (uint256 reward, uint256 topUp);\n44: \n45:     /// @dev Gets inverse discount factor with the multiple of 1e18 of the last epoch.\n46:     /// @return idf Discount factor with the multiple of 1e18.\n47:     function getLastIDF() external view returns (uint256 idf);\n48: \n49:     /// @dev Gets the service registry contract address\n50:     /// @return Service registry contract address;\n51:     function serviceRegistry() external view returns (address);\n52: }\n53: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L34-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit unitTypes, unitIds,  are not checked\n42:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n43:         returns (uint256 reward, uint256 topUp);\n44: \n45:     /// @dev Gets inverse discount factor with the multiple of 1e18 of the last epoch.\n46:     /// @return idf Discount factor with the multiple of 1e18.\n47:     function getLastIDF() external view returns (uint256 idf);\n48: \n49:     /// @dev Gets the service registry contract address\n50:     /// @return Service registry contract address;\n51:     function serviceRegistry() external view returns (address);\n52: }\n53: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L42-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n//@audit tokenAmount, olaMintAmount,  are not checked\n11:     function depositTokenForOLAS(address account, uint256 tokenAmount, address token, uint256 olaMintAmount) external;\n12: \n13:     /// @dev Deposits service donations in ETH.\n14:     /// @param serviceIds Set of service Ids.\n15:     /// @param amounts Set of corresponding amounts deposited on behalf of each service Id.\n16:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable;\n17: \n18:     /// @dev Gets information about token being enabled.\n19:     /// @param token Token address.\n20:     /// @return enabled True is token is enabled.\n21:     function isEnabled(address token) external view returns (bool enabled);\n22: \n23:     /// @dev Withdraws ETH and / or OLAS amounts to the requested account address.\n24:     /// @notice Only dispenser contract can call this function.\n25:     /// @notice Reentrancy guard is on a dispenser side.\n26:     /// @notice Zero account address is not possible, since the dispenser contract interacts with msg.sender.\n27:     /// @param account Account address.\n28:     /// @param accountRewards Amount of account rewards.\n29:     /// @param accountTopUps Amount of account top-ups.\n30:     /// @return success True if the function execution is successful.\n31:     function withdrawToAccount(address account, uint256 accountRewards, uint256 accountTopUps) external returns (bool success);\n32: \n33:     /// @dev Re-balances treasury funds to account for the treasury reward for a specific epoch.\n34:     /// @param treasuryRewards Treasury rewards.\n35:     /// @return success True, if the function execution is successful.\n36:     function rebalanceTreasury(uint256 treasuryRewards) external returns (bool success);\n37: }\n38: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L11-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n//@audit serviceIds, amounts,  are not checked\n16:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable;\n17: \n18:     /// @dev Gets information about token being enabled.\n19:     /// @param token Token address.\n20:     /// @return enabled True is token is enabled.\n21:     function isEnabled(address token) external view returns (bool enabled);\n22: \n23:     /// @dev Withdraws ETH and / or OLAS amounts to the requested account address.\n24:     /// @notice Only dispenser contract can call this function.\n25:     /// @notice Reentrancy guard is on a dispenser side.\n26:     /// @notice Zero account address is not possible, since the dispenser contract interacts with msg.sender.\n27:     /// @param account Account address.\n28:     /// @param accountRewards Amount of account rewards.\n29:     /// @param accountTopUps Amount of account top-ups.\n30:     /// @return success True if the function execution is successful.\n31:     function withdrawToAccount(address account, uint256 accountRewards, uint256 accountTopUps) external returns (bool success);\n32: \n33:     /// @dev Re-balances treasury funds to account for the treasury reward for a specific epoch.\n34:     /// @param treasuryRewards Treasury rewards.\n35:     /// @return success True, if the function execution is successful.\n36:     function rebalanceTreasury(uint256 treasuryRewards) external returns (bool success);\n37: }\n38: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L16-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n//@audit accountRewards, accountTopUps,  are not checked\n31:     function withdrawToAccount(address account, uint256 accountRewards, uint256 accountTopUps) external returns (bool success);\n32: \n33:     /// @dev Re-balances treasury funds to account for the treasury reward for a specific epoch.\n34:     /// @param treasuryRewards Treasury rewards.\n35:     /// @return success True, if the function execution is successful.\n36:     function rebalanceTreasury(uint256 treasuryRewards) external returns (bool success);\n37: }\n38: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L31-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n//@audit treasuryRewards,  are not checked\n36:     function rebalanceTreasury(uint256 treasuryRewards) external returns (bool success);\n37: }\n38: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L36-L38"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use a struct to encapsulate multiple function parameters",
      "description": "If a function has too many parameters, replacing them with a struct can improve code readability and maintainability, increase reusability, and reduce the likelihood of errors when passing the parameters.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n16:     constructor(\n17:         IVotes governanceToken,\n18:         TimelockController timelock,\n19:         uint256 initialVotingDelay,\n20:         uint256 initialVotingPeriod,\n21:         uint256 initialProposalThreshold,\n22:         uint256 quorumFraction\n23:     )\n24:         Governor(\"Governor OLAS\")\n25:         GovernorSettings(initialVotingDelay, initialVotingPeriod, initialProposalThreshold)\n26:         GovernorVotes(governanceToken)\n27:         GovernorVotesQuorumFraction(quorumFraction)\n28:         GovernorTimelockControl(timelock)\n29:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n800:     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n801:     external virtual override\n802:     {\n803:         revert NonDelegatable(address(this));\n804:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L804"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n328:     function delegateBySig(address, uint256, uint256, uint8, bytes32, bytes32) external\n329:     {\n330:         revert NonDelegatable(ve);\n331:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L328-L331"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n387:     function checkTransaction(\n388:         address to,\n389:         uint256,\n390:         bytes memory data,\n391:         Enum.Operation operation,\n392:         uint256,\n393:         uint256,\n394:         uint256,\n395:         address,\n396:         address payable,\n397:         bytes memory,\n398:         address\n399:     ) external {\n400:         // Just return if paused\n401:         if (paused == 1) {\n402:             // Call to the timelock\n403:             if (to == owner) {\n404:                 // No delegatecall is allowed\n405:                 if (operation == Enum.Operation.DelegateCall) {\n406:                     revert NoDelegateCall();\n407:                 }\n408: \n409:                 // Data needs to have enough bytes at least to fit the selector\n410:                 if (data.length < SELECTOR_DATA_LENGTH) {\n411:                     revert IncorrectDataLength(data.length, SELECTOR_DATA_LENGTH);\n412:                 }\n413: \n414:                 // Get the function signature\n415:                 bytes4 functionSig = bytes4(data);\n416:                 // Check the schedule or scheduleBatch function authorized parameters\n417:                 // All other functions are not checked for\n418:                 if (functionSig == SCHEDULE || functionSig == SCHEDULE_BATCH) {\n419:                     // Data length is too short: need to have enough bytes for the schedule() function\n420:                     // with one selector extracted from the payload\n421:                     if (data.length < MIN_SCHEDULE_DATA_LENGTH) {\n422:                         revert IncorrectDataLength(data.length, MIN_SCHEDULE_DATA_LENGTH);\n423:                     }\n424: \n425:                     _verifySchedule(data, functionSig);\n426:                 }\n427:             } else if (to == multisig) {\n428:                 // No self multisig call is allowed\n429:                 revert NoSelfCall();\n430:             }\n431:         }\n432:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L387-L432"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n264:     function initializeTokenomics(\n265:         address _olas,\n266:         address _treasury,\n267:         address _depository,\n268:         address _dispenser,\n269:         address _ve,\n270:         uint256 _epochLen,\n271:         address _componentRegistry,\n272:         address _agentRegistry,\n273:         address _serviceRegistry,\n274:         address _donatorBlacklist\n275:     ) external\n276:     {\n277:         // Check if the contract is already initialized\n278:         if (owner != address(0)) {\n279:             revert AlreadyInitialized();\n280:         }\n281: \n282:         // Check for at least one zero contract address\n283:         if (_olas == address(0) || _treasury == address(0) || _depository == address(0) || _dispenser == address(0) ||\n284:             _ve == address(0) || _componentRegistry == address(0) || _agentRegistry == address(0) ||\n285:             _serviceRegistry == address(0)) {\n286:             revert ZeroAddress();\n287:         }\n288: \n289:         // Initialize storage variables\n290:         owner = msg.sender;\n291:         _locked = 1;\n292:         epsilonRate = 1e17;\n293:         veOLASThreshold = 10_000e18;\n294: \n295:         // Check that the epoch length has at least a practical minimal value\n296:         if (uint32(_epochLen) < MIN_EPOCH_LENGTH) {\n297:             revert LowerThan(_epochLen, MIN_EPOCH_LENGTH);\n298:         }\n299: \n300:         // Check that the epoch length is not bigger than one year\n301:         if (uint32(_epochLen) > ONE_YEAR) {\n302:             revert Overflow(_epochLen, ONE_YEAR);\n303:         }\n304: \n305:         // Assign other input variables\n306:         olas = _olas;\n307:         treasury = _treasury;\n308:         depository = _depository;\n309:         dispenser = _dispenser;\n310:         ve = _ve;\n311:         epochLen = uint32(_epochLen);\n312:         componentRegistry = _componentRegistry;\n313:         agentRegistry = _agentRegistry;\n314:         serviceRegistry = _serviceRegistry;\n315:         donatorBlacklist = _donatorBlacklist;\n316: \n317:         // Time launch of the OLAS contract\n318:         uint256 _timeLaunch = IOLAS(_olas).timeLaunch();\n319:         // Check that the tokenomics contract is initialized no later than one year after the OLAS token is deployed\n320:         if (block.timestamp >= (_timeLaunch + ONE_YEAR)) {\n321:             revert Overflow(_timeLaunch + ONE_YEAR, block.timestamp);\n322:         }\n323:         // Seconds left in the deployment year for the zero year inflation schedule\n324:         // This value is necessary since it is different from a precise one year time, as the OLAS contract started earlier\n325:         uint256 zeroYearSecondsLeft = uint32(_timeLaunch + ONE_YEAR - block.timestamp);\n326:         // Calculating initial inflation per second: (mintable OLAS from getInflationForYear(0)) / (seconds left in a year)\n327:         // Note that we lose precision here dividing by the number of seconds right away, but to avoid complex calculations\n328:         // later we consider it less error-prone and sacrifice at most 6 insignificant digits (or 1e-12) of OLAS per year\n329:         uint256 _inflationPerSecond = getInflationForYear(0) / zeroYearSecondsLeft;\n330:         inflationPerSecond = uint96(_inflationPerSecond);\n331:         timeLaunch = uint32(_timeLaunch);\n332: \n333:         // The initial epoch start time is the end time of the zero epoch\n334:         mapEpochTokenomics[0].epochPoint.endTime = uint32(block.timestamp);\n335: \n336:         // The epoch counter starts from 1\n337:         epochCounter = 1;\n338:         TokenomicsPoint storage tp = mapEpochTokenomics[1];\n339: \n340:         // Setting initial parameters and fractions\n341:         devsPerCapital = 1e18;\n342:         tp.epochPoint.idf = 1e18;\n343: \n344:         // Reward fractions\n345:         // 0 stands for components and 1 for agents\n346:         // The initial target is to distribute around 2/3 of incentives reserved to fund owners of the code\n347:         // for components royalties and 1/3 for agents royalties\n348:         tp.unitPoints[0].rewardUnitFraction = 83;\n349:         tp.unitPoints[1].rewardUnitFraction = 17;\n350:         // tp.epochPoint.rewardTreasuryFraction is essentially equal to zero\n351: \n352:         // We consider a unit of code as n agents or m components.\n353:         // Initially we consider 1 unit of code as either 2 agents or 1 component.\n354:         // E.g. if we have 2 profitable components and 2 profitable agents, this means there are (2 x 2.0 + 2 x 1.0) / 3 = 2\n355:         // units of code.\n356:         // We assume that during one epoch the developer can contribute with one piece of code (1 component or 2 agents)\n357:         codePerDev = 1e18;\n358: \n359:         // Top-up fractions\n360:         uint256 _maxBondFraction = 50;\n361:         tp.epochPoint.maxBondFraction = uint8(_maxBondFraction);\n362:         tp.unitPoints[0].topUpUnitFraction = 41;\n363:         tp.unitPoints[1].topUpUnitFraction = 9;\n364: \n365:         // Calculate initial effectiveBond based on the maxBond during the first epoch\n366:         // maxBond = inflationPerSecond * epochLen * maxBondFraction / 100\n367:         uint256 _maxBond = (_inflationPerSecond * _epochLen * _maxBondFraction) / 100;\n368:         maxBond = uint96(_maxBond);\n369:         effectiveBond = uint96(_maxBond);\n370:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L264-L370"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Do not cache `constants`",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n103:         uint256 supplyCap = tenYearSupplyCap;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L103-L103"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Function state mutability can be restricted to `view`",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n572:     function checkAfterExecution(bytes32, bool) external {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L572"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Do not cache `immutable`",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n103:         uint256 supplyCap = tenYearSupplyCap;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L103-L103"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing NatSpec `@dev` from event declaration",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n18:     event MinterUpdated(address indexed minter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n94:     event Deposit(address indexed account, uint256 amount, uint256 locktime, DepositType depositType, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n95:     event Withdraw(address indexed account, uint256 amount, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n96:     event Supply(uint256 previousSupply, uint256 currentSupply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L96-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n89:     event GovernorUpdated(address indexed governor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n90:     event SetTargetSelectors(address[] indexed targets, bytes4[] indexed selectors, uint256[] chainIds, bool[] statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n91:     event SetBridgeMediators(address[] indexed bridgeMediatorL1s, address[] indexed bridgeMediatorL2s, uint256[] chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n92:     event GovernorCheckProposalIdChanged(uint256 indexed proposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n93:     event GuardPaused(address indexed account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n94:     event GuardUnpaused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n48:     event RootGovernorUpdated(address indexed rootMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n49:     event MessageReceived(uint256 indexed stateId, address indexed rootMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n48:     event ForeignGovernorUpdated(address indexed foreignMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n49:     event MessageReceived(address indexed foreignMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n10:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n11:     event ManagerUpdated(address indexed manager);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n12:     event BaseURIChanged(string baseURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n9:     event CreateUnit(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n10:     event UpdateUnitHash(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n9:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n10:     event Pause(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n11:     event Unpause(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n63:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n64:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n65:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n66:     event BondCalculatorUpdated(address indexed bondCalculator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L66-L66"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n67:     event CreateBond(address indexed token, uint256 indexed productId, address indexed owner, uint256 bondId,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n69:     event RedeemBond(uint256 indexed productId, address indexed owner, uint256 bondId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n70:     event CreateProduct(address indexed token, uint256 indexed productId, uint256 supply, uint256 priceLP,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L70-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n72:     event CloseProduct(address indexed token, uint256 indexed productId, uint256 supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n12:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n13:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n14:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n15:     event IncentivesClaimed(address indexed owner, uint256 reward, uint256 topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n21:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n22:     event DonatorBlacklistStatus(address indexed account, bool status);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n119:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n120:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n121:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n122:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n123:     event EpochLengthUpdated(uint256 epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n124:     event EffectiveBondUpdated(uint256 effectiveBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n125:     event IDFUpdated(uint256 idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n126:     event TokenomicsParametersUpdateRequested(uint256 indexed epochNumber, uint256 devsPerCapital, uint256 codePerDev,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n128:     event TokenomicsParametersUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n129:     event IncentiveFractionsUpdateRequested(uint256 indexed epochNumber, uint256 rewardComponentFraction,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L129-L129"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n131:     event IncentiveFractionsUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L131-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n132:     event ComponentRegistryUpdated(address indexed componentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n133:     event AgentRegistryUpdated(address indexed agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L133-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n134:     event ServiceRegistryUpdated(address indexed serviceRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n135:     event DonatorBlacklistUpdated(address indexed blacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n136:     event EpochSettled(uint256 indexed epochCounter, uint256 treasuryRewards, uint256 accountRewards, uint256 accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n137:     event TokenomicsImplementationUpdated(address indexed implementation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L137-L137"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n40:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n41:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n42:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n43:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n44:     event DepositTokenFromAccount(address indexed account, address indexed token, uint256 tokenAmount, uint256 olasAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n45:     event DonateToServicesETH(address indexed sender, uint256[] serviceIds, uint256[] amounts, uint256 donation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n46:     event Withdraw(address indexed token, address indexed to, uint256 tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n47:     event EnableToken(address indexed token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n48:     event DisableToken(address indexed token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n49:     event ReceiveETH(address indexed sender, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n50:     event UpdateTreasuryBalances(uint256 ETHOwned, uint256 ETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n51:     event PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n52:     event UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n53:     event MinAcceptedETHUpdated(uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L53-L53"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing NatSpec `@notice` from event declaration",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n18:     event MinterUpdated(address indexed minter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n94:     event Deposit(address indexed account, uint256 amount, uint256 locktime, DepositType depositType, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n95:     event Withdraw(address indexed account, uint256 amount, uint256 ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L95-L95"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n96:     event Supply(uint256 previousSupply, uint256 currentSupply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L96-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n89:     event GovernorUpdated(address indexed governor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n90:     event SetTargetSelectors(address[] indexed targets, bytes4[] indexed selectors, uint256[] chainIds, bool[] statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n91:     event SetBridgeMediators(address[] indexed bridgeMediatorL1s, address[] indexed bridgeMediatorL2s, uint256[] chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L91-L91"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n92:     event GovernorCheckProposalIdChanged(uint256 indexed proposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n93:     event GuardPaused(address indexed account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n94:     event GuardUnpaused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n48:     event RootGovernorUpdated(address indexed rootMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n49:     event MessageReceived(uint256 indexed stateId, address indexed rootMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n47:     event FundsReceived(address indexed sender, uint256 value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n48:     event ForeignGovernorUpdated(address indexed foreignMessageSender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n49:     event MessageReceived(address indexed foreignMessageSender, bytes data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n19:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n25:     event FxDepositERC20(address indexed childToken, address indexed rootToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n26:     event FxWithdrawERC20(address indexed rootToken, address indexed childToken, address from, address indexed to, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n10:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n11:     event ManagerUpdated(address indexed manager);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n12:     event BaseURIChanged(string baseURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n9:     event CreateUnit(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n10:     event UpdateUnitHash(uint256 unitId, UnitType uType, bytes32 unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n9:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n10:     event Pause(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n11:     event Unpause(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n63:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n64:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n65:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n66:     event BondCalculatorUpdated(address indexed bondCalculator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L66-L66"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n67:     event CreateBond(address indexed token, uint256 indexed productId, address indexed owner, uint256 bondId,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n69:     event RedeemBond(uint256 indexed productId, address indexed owner, uint256 bondId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n70:     event CreateProduct(address indexed token, uint256 indexed productId, uint256 supply, uint256 priceLP,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L70-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n72:     event CloseProduct(address indexed token, uint256 indexed productId, uint256 supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n12:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n13:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n14:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n15:     event IncentivesClaimed(address indexed owner, uint256 reward, uint256 topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n21:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n22:     event DonatorBlacklistStatus(address indexed account, bool status);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n119:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n120:     event TreasuryUpdated(address indexed treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n121:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n122:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n123:     event EpochLengthUpdated(uint256 epochLen);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L123-L123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n124:     event EffectiveBondUpdated(uint256 effectiveBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L124-L124"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n125:     event IDFUpdated(uint256 idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n126:     event TokenomicsParametersUpdateRequested(uint256 indexed epochNumber, uint256 devsPerCapital, uint256 codePerDev,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n128:     event TokenomicsParametersUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n129:     event IncentiveFractionsUpdateRequested(uint256 indexed epochNumber, uint256 rewardComponentFraction,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L129-L129"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n131:     event IncentiveFractionsUpdated(uint256 indexed epochNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L131-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n132:     event ComponentRegistryUpdated(address indexed componentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n133:     event AgentRegistryUpdated(address indexed agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L133-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n134:     event ServiceRegistryUpdated(address indexed serviceRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n135:     event DonatorBlacklistUpdated(address indexed blacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n136:     event EpochSettled(uint256 indexed epochCounter, uint256 treasuryRewards, uint256 accountRewards, uint256 accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n137:     event TokenomicsImplementationUpdated(address indexed implementation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L137-L137"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n40:     event OwnerUpdated(address indexed owner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n41:     event TokenomicsUpdated(address indexed tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n42:     event DepositoryUpdated(address indexed depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n43:     event DispenserUpdated(address indexed dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n44:     event DepositTokenFromAccount(address indexed account, address indexed token, uint256 tokenAmount, uint256 olasAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n45:     event DonateToServicesETH(address indexed sender, uint256[] serviceIds, uint256[] amounts, uint256 donation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n46:     event Withdraw(address indexed token, address indexed to, uint256 tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n47:     event EnableToken(address indexed token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n48:     event DisableToken(address indexed token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n49:     event ReceiveETH(address indexed sender, uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n50:     event UpdateTreasuryBalances(uint256 ETHOwned, uint256 ETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n51:     event PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L51-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n52:     event UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n53:     event MinAcceptedETHUpdated(uint256 amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L53-L53"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing NatSpec `@notice` from function declaration",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n16:     constructor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n31:     /// @dev Current state of a proposal, following Compoundb\u0000\u0019s convention.\n32:     /// @param proposalId Proposal Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L31-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n39:     /// @dev Create a new proposal to change the protocol / contract parameters.\n40:     /// @param targets The ordered list of target addresses for calls to be made during proposal execution.\n41:     /// @param values The ordered list of values to be passed to the calls made during proposal execution.\n42:     /// @param calldatas The ordered list of data to be passed to each individual function call during proposal execution.\n43:     /// @param description A human readable description of the proposal and the changes it will enact.\n44:     /// @return The Id of the newly created proposal.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L39-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n55:     /// @dev Gets the voting power for the proposal threshold.\n56:     /// @return The voting power required in order for a voter to become a proposer.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L55-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n62:     /// @dev Executes a proposal.\n63:     /// @param proposalId Proposal Id.\n64:     /// @param targets The ordered list of target addresses.\n65:     /// @param values The ordered list of values.\n66:     /// @param calldatas The ordered list of data to be passed to each individual function call.\n67:     /// @param descriptionHash Hashed description of the proposal.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L62-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n79:     /// @dev Cancels a proposal.\n80:     /// @param targets The ordered list of target addresses.\n81:     /// @param values The ordered list of values.\n82:     /// @param calldatas The ordered list of data to be passed to each individual function call.\n83:     /// @param descriptionHash Hashed description of the proposal.\n84:     /// @return The Id of the newly created proposal.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L79-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n95:     /// @dev Gets the executor address.\n96:     /// @return Executor address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L95-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n102:     /// @dev Gets information about the interface support.\n103:     /// @param interfaceId A specified interface Id.\n104:     /// @return True if this contract implements the interface defined by interfaceId.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L102-L104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n41:     /// @dev Changes the owner address.\n42:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L41-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n56:     /// @dev Changes the minter address.\n57:     /// @param newMinter Address of a new minter.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L56-L57"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n96:     /// @dev Gets the reminder of OLAS possible for the mint.\n97:     /// @return remainder OLAS token remainder.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L96-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n116:     /// @dev Burns OLAS tokens.\n117:     /// @param amount OLAS token amount to burn.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L116-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n128:     /// @dev Contract constructor\n129:     /// @param _token Token address.\n130:     /// @param _name Token name.\n131:     /// @param _symbol Token symbol.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L128-L131"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n142:     /// @dev Gets the most recently recorded user point for `account`.\n143:     /// @param account Account address.\n144:     /// @return pv Last checkpoint.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L142-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n152:     /// @dev Gets the number of user points.\n153:     /// @param account Account address.\n154:     /// @return accountNumPoints Number of user points.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L152-L154"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n168:     /// @dev Record global and per-user data to checkpoint.\n169:     /// @param account Account address. User checkpoint is skipped if the address is zero.\n170:     /// @param oldLocked Previous locked amount / end lock time for the user.\n171:     /// @param newLocked New locked amount / end lock time for the user.\n172:     /// @param curSupply Current total supply (to avoid using a storage total supply variable)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L168-L172"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n319:     /// @dev Record global data to checkpoint.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L319-L319"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n324:     /// @dev Deposits and locks tokens for a specified account.\n325:     /// @param account Target address for the locked amount.\n326:     /// @param amount Amount to deposit.\n327:     /// @param unlockTime New time when to unlock the tokens, or 0 if unchanged.\n328:     /// @param lockedBalance Previous locked amount / end time.\n329:     /// @param depositType Deposit type.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L324-L329"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n371:     /// @dev Deposits `amount` tokens for `account` and adds to the lock.\n372:     /// @dev Anyone (even a smart contract) can deposit for someone else, but\n373:     ///      cannot extend their locktime and deposit for a brand new user.\n374:     /// @param account Account address.\n375:     /// @param amount Amount to add.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L371-L375"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n399:     /// @dev Deposits `amount` tokens for `msg.sender` and locks for `unlockTime`.\n400:     /// @param amount Amount to deposit.\n401:     /// @param unlockTime Time when tokens unlock, rounded down to a whole week.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L399-L401"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n456:     /// @dev Deposits `amount` additional tokens for `msg.sender` without modifying the unlock time.\n457:     /// @param amount Amount of tokens to deposit and add to the lock.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L456-L457"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n481:     /// @dev Extends the unlock time.\n482:     /// @param unlockTime New tokens unlock time.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L481-L482"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n509:     /// @dev Withdraws all tokens for `msg.sender`. Only possible if the lock has expired.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L509-L509"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n537:     /// @dev Finds a closest point that has a specified block number.\n538:     /// @param blockNumber Block to find.\n539:     /// @param account Account address for user points.\n540:     /// @return point Point with the approximate index number for the specified block.\n541:     /// @return minPointNumber Point number.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L537-L541"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n589:     /// @dev Gets the voting power for an `account` at time `ts`.\n590:     /// @param account Account address.\n591:     /// @param ts Time to get voting power at.\n592:     /// @return vBalance Account voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L589-L592"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n604:     /// @dev Gets the account balance in native token.\n605:     /// @param account Account address.\n606:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L604-L606"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n611:     /// @dev Gets the `account`'s lock end time.\n612:     /// @param account Account address.\n613:     /// @return unlockTime Lock end time.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L611-L613"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n618:     /// @dev Gets the account balance at a specific block number.\n619:     /// @param account Account address.\n620:     /// @param blockNumber Block number.\n621:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L618-L621"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n631:     /// @dev Gets the voting power.\n632:     /// @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L631-L632"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n668:     /// @dev Gets voting power at a specific block number.\n669:     /// @param account Account address.\n670:     /// @param blockNumber Block number.\n671:     /// @return balance Voting balance / power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L668-L671"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n686:     /// @dev Calculate total voting power at some point in the past.\n687:     /// @param lastPoint The point (bias/slope) to start the search from.\n688:     /// @param ts Time to calculate the total voting power at.\n689:     /// @return vSupply Total voting power at that time.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L686-L689"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n717:     /// @dev Gets total token supply.\n718:     /// @return Total token supply.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L717-L718"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n723:     /// @dev Gets total token supply at a specific block number.\n724:     /// @param blockNumber Block number.\n725:     /// @return supplyAt Supply at the specified block number.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L723-L725"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n735:     /// @dev Calculates total voting power at time `ts`.\n736:     /// @param ts Time to get total voting power at.\n737:     /// @return Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L735-L737"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n743:     /// @dev Calculates current total voting power.\n744:     /// @return Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L743-L744"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n749:     /// @dev Calculate total voting power at some point in the past.\n750:     /// @param blockNumber Block number to calculate the total voting power at.\n751:     /// @return Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L749-L751"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n758:     /// @dev Gets information about the interface support.\n759:     /// @param interfaceId A specified interface Id.\n760:     /// @return True if this contract implements the interface defined by interfaceId.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L758-L760"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n766:     /// @dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L766-L766"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n771:     /// @dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L771-L771"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n776:     /// @dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L776-L776"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n781:     /// @dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L781-L781"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n787:     /// @dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L787-L787"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n793:     /// @dev Reverts delegate for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L793-L793"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n799:     /// @dev Reverts delegateBySig for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L799-L799"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n14:     /// @dev Gets the total number of supply points.\n15:     /// @return numPoints Number of supply points.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L14-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n18:     /// @dev Gets the supply point of a specified index.\n19:     /// @param idx Supply point number.\n20:     /// @return sPoint Supply point.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L18-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n23:     /// @dev Gets the slope change for a specific timestamp.\n24:     /// @param ts Timestamp.\n25:     /// @return slopeChange Signed slope change.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L23-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n28:     /// @dev Gets the most recently recorded user point for `account`.\n29:     /// @param account Account address.\n30:     /// @return pv Last checkpoint.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L28-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n33:     /// @dev Gets the number of user points.\n34:     /// @param account Account address.\n35:     /// @return userNumPoints Number of user points.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L33-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n45:     /// @dev Gets voting power at a specific block number.\n46:     /// @param account Account address.\n47:     /// @param blockNumber Block number.\n48:     /// @return balance Voting balance / power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L45-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n51:     /// @dev Gets the account balance in native token.\n52:     /// @param account Account address.\n53:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L51-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n56:     /// @dev Gets the account balance at a specific block number.\n57:     /// @param account Account address.\n58:     /// @param blockNumber Block number.\n59:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L56-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n62:     /// @dev Gets the `account`'s lock end time.\n63:     /// @param account Account address.\n64:     /// @return unlockTime Lock end time.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L62-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n67:     /// @dev Gets the voting power.\n68:     /// @param account Account address.\n69:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L67-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n72:     /// @dev Gets total token supply.\n73:     /// @return supply Total token supply.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L72-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n76:     /// @dev Gets total token supply at a specific block number.\n77:     /// @param blockNumber Block number.\n78:     /// @return supplyAt Supply at the specified block number.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L76-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n81:     /// @dev Calculates total voting power at time `ts`.\n82:     /// @param ts Time to get total voting power at.\n83:     /// @return vPower Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L81-L83"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n86:     /// @dev Calculates current total voting power.\n87:     /// @return vPower Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L86-L87"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n90:     /// @dev Calculate total voting power at some point in the past.\n91:     /// @param blockNumber Block number to calculate the total voting power at.\n92:     /// @return vPower Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L90-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n95:     /// @dev Gets information about the interface support.\n96:     /// @param interfaceId A specified interface Id.\n97:     /// @return True if this contract implements the interface defined by interfaceId.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L95-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n100:     /// @dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n103:     /// @dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n142:     /// @dev TokenomicsProxy constructor.\n143:     /// @param _ve veOLAS address.\n144:     /// @param _token OLAS address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L142-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n154:     /// @dev Gets the total number of supply points.\n155:     /// @return numPoints Number of supply points.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L154-L155"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n160:     /// @dev Gets the supply point of a specified index.\n161:     /// @param idx Supply point number.\n162:     /// @return sPoint Supply point.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L160-L162"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n167:     /// @dev Gets the slope change for a specific timestamp.\n168:     /// @param ts Timestamp.\n169:     /// @return slopeChange Signed slope change.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L167-L169"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n174:     /// @dev Gets the most recently recorded user point for `account`.\n175:     /// @param account Account address.\n176:     /// @return pv Last checkpoint.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L174-L176"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n181:     /// @dev Gets the number of user points.\n182:     /// @param account Account address.\n183:     /// @return userNumPoints Number of user points.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L181-L183"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n201:     /// @dev Gets the voting power.\n202:     /// @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L201-L202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n207:     /// @dev Gets voting power at a specific block number.\n208:     /// @param account Account address.\n209:     /// @param blockNumber Block number.\n210:     /// @return balance Voting balance / power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L207-L210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n220:     /// @dev Gets the account balance in native token.\n221:     /// @param account Account address.\n222:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L220-L222"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n227:     /// @dev Gets the account balance at a specific block number.\n228:     /// @param account Account address.\n229:     /// @param blockNumber Block number.\n230:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L227-L230"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n240:     /// @dev Gets the `account`'s lock end time.\n241:     /// @param account Account address.\n242:     /// @return unlockTime Lock end time.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L240-L242"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n247:     /// @dev Gets total token supply.\n248:     /// @return supply Total token supply.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L247-L248"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n253:     /// @dev Gets total token supply at a specific block number.\n254:     /// @param blockNumber Block number.\n255:     /// @return supplyAt Supply at the specified block number.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L253-L255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n260:     /// @dev Calculates total voting power at time `ts` that must be greater than the last supply point timestamp.\n261:     /// @param ts Time to get total voting power at.\n262:     /// @return vPower Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L260-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n275:     /// @dev Calculates current total voting power.\n276:     /// @return vPower Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L275-L276"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n289:     /// @dev Gets information about the interface support.\n290:     /// @param interfaceId A specified interface Id.\n291:     /// @return True if this contract implements the interface defined by interfaceId.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L289-L291"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n296:     /// @dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L296-L296"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n301:     /// @dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L301-L301"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n306:     /// @dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L306-L306"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n311:     /// @dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L311-L311"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n316:     /// @dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L316-L316"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n321:     /// @dev Reverts delegate for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L321-L321"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n327:     /// @dev Reverts delegateBySig for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L327-L327"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n333:     /// @dev Reverts other calls such that the original veOLAS is used.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L333-L333"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n7:     function state(uint256 proposalId) external returns (ProposalState);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n134:     /// @dev GuardCM constructor.\n135:     /// @param _timelock Timelock address.\n136:     /// @param _multisig Community multisig address.\n137:     /// @param _governor Governor address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L134-L137"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n152:     /// @dev Changes the governor.\n153:     /// @param newGovernor Address of a new governor.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L152-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n168:     /// @dev Changes the governor check proposal Id.\n169:     /// @param proposalId Governor check proposal Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L168-L169"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n248:     /// @dev Processes bridged data: checks the header and verifies the payload.\n249:     /// @param data Full data bytes with the header.\n250:     /// @param bridgeMediatorL2 Address of a bridged mediator on L2.\n251:     /// @param chainId L2 chain Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L248-L251"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n334:     /// @dev Verifies authorized target and selector in the schedule or scheduleBatch function call.\n335:     /// @param data Data in bytes.\n336:     /// @param selector Schedule function selector.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L334-L336"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n559:     /// @dev Unpauses the guard restricting the CM functionality back.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L559-L559"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n571:     /// @dev Guards the multisig call after its execution.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L571-L571"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n574:     /// @dev Gets the status of a target-selector-chainId combination.\n575:     /// @param target Target address.\n576:     /// @param selector Selector for a target.\n577:     /// @param chainId Corresponding chain Id.\n578:     /// @return status True, if the target-selector-chainId combination is authorized.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L574-L578"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n593:     /// @dev Gets the address of a bridge mediator contract address on L2 and corresponding L2 chain Id.\n594:     /// @param bridgeMediatorL1 Bridge mediator contract addresses on L1.\n595:     /// @return bridgeMediatorL2 Corresponding bridge mediator contract addresses on L2.\n596:     /// @return chainId Corresponding L2 chain Ids.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L593-L596"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n6:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n59:     /// @dev FxGovernorTunnel constructor.\n60:     /// @param _fxChild Fx Child address.\n61:     /// @param _rootGovernor Root Governor address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L59-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n72:     /// @dev Receives native network token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n6:     function messageSender() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n59:     /// @dev HomeMediator constructor.\n60:     /// @param _AMBContractProxyHome AMB Contract Proxy (Home) address (Gnosis).\n61:     /// @param _foreignGovernor Foreign Governor address (ETH).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L59-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n72:     /// @dev Receives native network token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n28:     /// @dev Changes the owner address.\n29:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L28-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n45:     /// @dev Mints bridged tokens.\n46:     /// @param account Account address.\n47:     /// @param amount Bridged token amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L45-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n57:     /// @dev Burns bridged tokens.\n58:     /// @param amount Bridged token amount to burn.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L57-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n33:     /// @dev FxERC20ChildTunnel constructor.\n34:     /// @param _fxChild Fx Child contract address.\n35:     /// @param _childToken L2 token address.\n36:     /// @param _rootToken Corresponding L1 token address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L33-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n54:     /// @dev Deposits tokens on L2 in order to obtain their corresponding bridged version on L1 by a specified address.\n55:     /// @param to Destination address on L1.\n56:     /// @param amount Token amount to be deposited.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L54-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n87:     /// @dev Deposits tokens on L2 to get their representation on L1 by a specified address.\n88:     /// @param to Destination address on L1.\n89:     /// @param amount Token amount to be deposited.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L87-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n33:     /// @dev FxERC20RootTunnel constructor.\n34:     /// @param _checkpointManager Checkpoint manager contract.\n35:     /// @param _fxRoot Fx Root contract address.\n36:     /// @param _childToken L2 token address.\n37:     /// @param _rootToken Corresponding L1 token address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L33-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n58:     /// @dev Withdraws bridged tokens on L1 in order to obtain their original version on L2 by a specified address.\n59:     /// @param to Destination address on L2.\n60:     /// @param amount Token amount to be withdrawn.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L58-L60"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n70:     /// @dev Receives the token message from L2 and transfers bridged tokens to a specified address.\n71:     /// @param message Incoming bridge message.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L70-L71"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n6:     /// @dev Gets the amount of tokens owned by a specified account.\n7:     /// @param account Account address.\n8:     /// @return Amount of tokens owned.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n11:     /// @dev Gets the total amount of tokens stored by the contract.\n12:     /// @return Amount of tokens.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L11-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n15:     /// @dev Gets remaining number of tokens that the `spender` can transfer on behalf of `owner`.\n16:     /// @param owner Token owner.\n17:     /// @param spender Account address that is able to transfer tokens on behalf of the owner.\n18:     /// @return Token amount allowed to be transferred.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L15-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n21:     /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n22:     /// @param spender Account address that will be able to transfer tokens on behalf of the caller.\n23:     /// @param amount Token amount.\n24:     /// @return True if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L21-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n27:     /// @dev Transfers the token amount.\n28:     /// @param to Address to transfer to.\n29:     /// @param amount The amount to transfer.\n30:     /// @return True if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L27-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n33:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n34:     /// @param from Account address to transfer from.\n35:     /// @param to Account address to transfer to.\n36:     /// @param amount Amount to transfer to.\n37:     /// @return True if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L33-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n40:     /// @dev Mints tokens.\n41:     /// @param account Account address.\n42:     /// @param amount Token amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L40-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n45:     /// @dev Burns tokens.\n46:     /// @param amount Token amount to burn.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L45-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n35:     /// @dev Changes the owner address.\n36:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L35-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n52:     /// @dev Changes the unit manager.\n53:     /// @param newManager Address of a new unit manager.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L52-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n76:     /// @dev Sets unit base URI.\n77:     /// @param bURI Base URI string.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L76-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n126:     /// @dev Gets the hash of the unit.\n127:     /// @param unitId Unit Id.\n128:     /// @return Unit hash.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L126-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n35:     constructor(UnitType _unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n39:     /// @dev Checks the provided component dependencies.\n40:     /// @param dependencies Set of component dependencies.\n41:     /// @param maxUnitId Maximum unit Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L39-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n44:     /// @dev Creates unit.\n45:     /// @param unitOwner Owner of the unit.\n46:     /// @param unitHash IPFS CID hash of the unit.\n47:     /// @param dependencies Set of unit dependencies in a sorted ascending order (unit Ids).\n48:     /// @return unitId The id of a minted unit.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L44-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n116:     /// @dev Updates the unit hash.\n117:     /// @param unitOwner Owner of the unit.\n118:     /// @param unitId Unit Id.\n119:     /// @param unitHash Updated IPFS hash of the unit.\n120:     /// @return success True, if function executed successfully.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L116-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n149:     /// @dev Gets the unit instance.\n150:     /// @param unitId Unit Id.\n151:     /// @return unit Corresponding Unit struct.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L149-L151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n156:     /// @dev Gets unit dependencies.\n157:     /// @param unitId Unit Id.\n158:     /// @return numDependencies The number of units in the dependency list.\n159:     /// @return dependencies The list of unit dependencies.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L156-L159"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n167:     /// @dev Gets updated unit hashes.\n168:     /// @param unitId Unit Id.\n169:     /// @return numHashes Number of hashes.\n170:     /// @return unitHashes The list of updated unit hashes (without the primary one).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L167-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n178:     /// @dev Gets the set of subcomponent Ids from a local map of subcomponent.\n179:     /// @param unitId Component Id.\n180:     /// @return subComponentIds Set of subcomponent Ids.\n181:     /// @return numSubComponents Number of subcomponents.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L178-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n189:     /// @dev Gets subcomponents of a provided unit Id.\n190:     /// @param subcomponentsFromType Type of the unit: component or agent.\n191:     /// @param unitId Unit Id.\n192:     /// @return subComponentIds Set of subcomponents.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L189-L192"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n196:     /// @dev Calculates the set of subcomponent Ids.\n197:     /// @param subcomponentsFromType Type of the unit: component or agent.\n198:     /// @param unitIds Unit Ids.\n199:     /// @return subComponentIds Subcomponent Ids.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L196-L199"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n267:     /// @dev Gets the hash of the unit.\n268:     /// @param unitId Unit Id.\n269:     /// @return Unit hash.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L267-L269"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n12:     /// @dev Component registry constructor.\n13:     /// @param _name Component registry contract name.\n14:     /// @param _symbol Component registry contract symbol.\n15:     /// @param _baseURI Component registry token base URI.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L12-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n24:     /// @dev Checks provided component dependencies.\n25:     /// @param dependencies Set of component dependencies.\n26:     /// @param maxComponentId Maximum component Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L24-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n15:     /// @dev Agent registry constructor.\n16:     /// @param _name Agent registry contract name.\n17:     /// @param _symbol Agent registry contract symbol.\n18:     /// @param _baseURI Agent registry token base URI.\n19:     /// @param _componentRegistry Component registry address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L15-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n29:     /// @dev Checks provided component dependencies.\n30:     /// @param dependencies Set of component dependencies.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L29-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n18:     /// @dev Changes the owner address.\n19:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L18-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n35:     /// @dev Pauses the contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n46:     /// @dev Unpauses the contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n15:     constructor(address _componentRegistry, address _agentRegistry) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n21:     /// @dev Creates component / agent.\n22:     /// @param unitType Unit type (component or agent).\n23:     /// @param unitOwner Owner of the component / agent.\n24:     /// @param unitHash IPFS hash of the component / agent.\n25:     /// @param dependencies Set of component dependencies in a sorted ascending order.\n26:     /// @return unitId The id of a created component / agent.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L21-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n45:     /// @dev Updates the component / agent hash.\n46:     /// @param unitType Unit type (component or agent).\n47:     /// @param unitId Agent Id.\n48:     /// @param unitHash Updated IPFS hash of the component / agent.\n49:     /// @return success True, if function executed successfully.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L45-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n6:     /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n7:     /// @param _singleton Address of singleton contract.\n8:     /// @param initializer Payload for message call sent to new proxy contract.\n9:     /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L6-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n34:     /// @dev GnosisSafeMultisig constructor.\n35:     /// @param _gnosisSafe Gnosis Safe address.\n36:     /// @param _gnosisSafeProxyFactory Gnosis Safe proxy factory address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L34-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n86:     /// @dev Creates a gnosis safe multisig.\n87:     /// @param owners Set of multisig owners.\n88:     /// @param threshold Number of required confirmations for a multisig transaction.\n89:     /// @param data Packed data related to the creation of a chosen multisig.\n90:     /// @return multisig Address of a created multisig.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L86-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n6:     /// @dev Gets set of owners.\n7:     /// @return Set of Safe owners.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L6-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n10:     /// @dev Gets threshold.\n11:     /// @return Threshold\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L10-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n58:     /// @dev GnosisSafeSameAddressMultisig constructor.\n59:     /// @param _proxyHash Approved multisig proxy hash.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L58-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n11:     /// @dev Creates component / agent.\n12:     /// @param unitOwner Owner of the component / agent.\n13:     /// @param unitHash IPFS hash of the component / agent.\n14:     /// @param dependencies Set of component dependencies in a sorted ascending order.\n15:     /// @return The id of a minted component / agent.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L11-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n22:     /// @dev Updates the component / agent hash.\n23:     /// @param owner Owner of the component / agent.\n24:     /// @param unitId Unit Id.\n25:     /// @param unitHash Updated IPFS hash of the component / agent.\n26:     /// @return success True, if function executed successfully.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L22-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n29:     /// @dev Gets subcomponents of a provided unit Id from a local public map.\n30:     /// @param unitId Unit Id.\n31:     /// @return subComponentIds Set of subcomponents.\n32:     /// @return numSubComponents Number of subcomponents.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L29-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n35:     /// @dev Calculates the set of subcomponent Ids.\n36:     /// @param unitIds Set of unit Ids.\n37:     /// @return subComponentIds Subcomponent Ids.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L35-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n40:     /// @dev Gets updated component / agent hashes.\n41:     /// @param unitId Unit Id.\n42:     /// @return numHashes Number of hashes.\n43:     /// @return unitHashes The list of component / agent hashes.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L40-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n46:     /// @dev Gets the total supply of components / agents.\n47:     /// @return Total supply.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L46-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n102:     /// @dev Depository constructor.\n103:     /// @param _olas OLAS token address.\n104:     /// @param _treasury Treasury address.\n105:     /// @param _tokenomics Tokenomics address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L102-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n120:     /// @dev Changes the owner address.\n121:     /// @param newOwner Address of a new owner.\n122:     /// #if_succeeds {:msg \"Changing owner\"} old(owner) == msg.sender ==> owner == newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L120-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n138:     /// @dev Changes various managing contract addresses.\n139:     /// @param _tokenomics Tokenomics address.\n140:     /// @param _treasury Treasury address.\n141:     /// #if_succeeds {:msg \"tokenomics changed\"} _tokenomics != address(0) ==> tokenomics == _tokenomics;\n142:     /// #if_succeeds {:msg \"treasury changed\"} _treasury != address(0) ==> treasury == _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L138-L142"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n161:     /// @dev Changes Bond Calculator contract address\n162:     /// #if_succeeds {:msg \"bondCalculator changed\"} _bondCalculator != address(0) ==> bondCalculator == _bondCalculator;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L161-L162"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n175:     /// @dev Creates a new bond product.\n176:     /// @param token LP token to be deposited for pairs like OLAS-DAI, OLAS-ETH, etc.\n177:     /// @param priceLP LP token price with 18 additional decimals.\n178:     /// @param supply Supply in OLAS tokens.\n179:     /// @param vesting Vesting period (in seconds).\n180:     /// @return productId New bond product Id.\n181:     /// #if_succeeds {:msg \"productCounter increases\"} productCounter == old(productCounter) + 1;\n182:     /// #if_succeeds {:msg \"isActive\"} mapBondProducts[productId].supply > 0 && mapBondProducts[productId].vesting == vesting;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L175-L182"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n279:     /// @dev Deposits tokens in exchange for a bond from a specified product.\n280:     /// @param productId Product Id.\n281:     /// @param tokenAmount Token amount to deposit for the bond.\n282:     /// @return payout The amount of OLAS tokens due.\n283:     /// @return maturity Timestamp for payout redemption.\n284:     /// @return bondId Id of a newly created bond.\n285:     /// #if_succeeds {:msg \"token is valid\"} mapBondProducts[productId].token != address(0);\n286:     /// #if_succeeds {:msg \"input supply is non-zero\"} old(mapBondProducts[productId].supply) > 0 && mapBondProducts[productId].supply <= type(uint96).max;\n287:     /// #if_succeeds {:msg \"vesting is non-zero\"} mapBondProducts[productId].vesting > 0 && mapBondProducts[productId].vesting + block.timestamp <= type(uint32).max;\n288:     /// #if_succeeds {:msg \"bond Id\"} bondCounter == old(bondCounter) + 1 && bondCounter <= type(uint32).max;\n289:     /// #if_succeeds {:msg \"payout\"} old(mapBondProducts[productId].supply) == mapBondProducts[productId].supply + payout;\n290:     /// #if_succeeds {:msg \"OLAS balances\"} IToken(mapBondProducts[productId].token).balanceOf(treasury) == old(IToken(mapBondProducts[productId].token).balanceOf(treasury)) + tokenAmount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L279-L290"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n348:     /// @dev Redeems account bonds.\n349:     /// @param bondIds Bond Ids to redeem.\n350:     /// @return payout Total payout sent in OLAS tokens.\n351:     /// #if_succeeds {:msg \"payout > 0\"} payout > 0;\n352:     /// #if_succeeds {:msg \"msg.sender is the only owner\"} old(forall (uint k in bondIds) mapUserBonds[bondIds[k]].account == msg.sender);\n353:     /// #if_succeeds {:msg \"accounts deleted\"} forall (uint k in bondIds) mapUserBonds[bondIds[k]].account == address(0);\n354:     /// #if_succeeds {:msg \"payouts are zeroed\"} forall (uint k in bondIds) mapUserBonds[bondIds[k]].payout == 0;\n355:     /// #if_succeeds {:msg \"maturities are zeroed\"} forall (uint k in bondIds) mapUserBonds[bondIds[k]].maturity == 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L348-L355"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n393:     /// @dev Gets an array of active or inactive product Ids.\n394:     /// @param active Flag to select active or inactive products.\n395:     /// @return productIds Product Ids.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L393-L395"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n421:     /// @dev Gets activity information about a given product.\n422:     /// @param productId Product Id.\n423:     /// @return status True if the product is active.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L421-L423"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n428:     /// @dev Gets bond Ids for the account address.\n429:     /// @param account Account address to query bonds for.\n430:     /// @param matured Flag to get matured bonds only or all of them.\n431:     /// @return bondIds Bond Ids.\n432:     /// @return payout Cumulative expected OLAS payout.\n433:     /// #if_succeeds {:msg \"matured bonds\"} matured == true ==> forall (uint k in bondIds)\n434:     /// mapUserBonds[bondIds[k]].account == account && block.timestamp >= mapUserBonds[bondIds[k]].maturity;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L428-L434"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n476:     /// @dev Calculates the maturity and payout to claim for a single bond.\n477:     /// @param bondId The account bond Id.\n478:     /// @return payout The payout amount in OLAS.\n479:     /// @return matured True if the payout can be redeemed.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L476-L479"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n488:     /// @dev Gets current reserves of OLAS / totalSupply of LP tokens.\n489:     /// @param token Token address.\n490:     /// @return priceLP Resulting reserveX / totalSupply ratio with 18 decimals.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L488-L490"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n27:     /// @dev Dispenser constructor.\n28:     /// @param _tokenomics Tokenomics address.\n29:     /// @param _treasury Treasury address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L27-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n44:     /// @dev Changes the owner address.\n45:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L44-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n61:     /// @dev Changes various managing contract addresses.\n62:     /// @param _tokenomics Tokenomics address.\n63:     /// @param _treasury Treasury address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L61-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n29:     /// @dev DonatorBlacklist constructor.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n34:     /// @dev Changes the owner address.\n35:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L34-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n79:     /// @dev Gets account blacklisting status.\n80:     /// @param account Account address.\n81:     /// @return status Blacklisting status.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L79-L81"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n26:     /// @dev Generic Bond Calcolator constructor\n27:     /// @param _olas OLAS contract address.\n28:     /// @param _tokenomics Tokenomics contract address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L26-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n67:     /// @dev Gets current reserves of OLAS / totalSupply of LP tokens.\n68:     /// @param token Token address.\n69:     /// @return priceLP Resulting reserveX / totalSupply ratio with 18 decimals.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L67-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n231:     /// @dev Tokenomics constructor.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n372:     /// @dev Gets the tokenomics implementation contract address.\n373:     /// @return implementation Tokenomics implementation contract address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L372-L373"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n402:     /// @dev Changes the owner address.\n403:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L402-L403"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n419:     /// @dev Changes various managing contract addresses.\n420:     /// @param _treasury Treasury address.\n421:     /// @param _depository Depository address.\n422:     /// @param _dispenser Dispenser address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L419-L422"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n446:     /// @dev Changes registries contract addresses.\n447:     /// @param _componentRegistry Component registry address.\n448:     /// @param _agentRegistry Agent registry address.\n449:     /// @param _serviceRegistry Service registry address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L446-L449"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n555:     /// @dev Sets incentive parameter fractions.\n556:     /// @param _rewardComponentFraction Fraction for component owner rewards funded by ETH donations.\n557:     /// @param _rewardAgentFraction Fraction for agent owner rewards funded by ETH donations.\n558:     /// @param _maxBondFraction Fraction for the maxBond that depends on the OLAS inflation.\n559:     /// @param _topUpComponentFraction Fraction for component owners OLAS top-up.\n560:     /// @param _topUpAgentFraction Fraction for agent owners OLAS top-up.\n561:     /// #if_succeeds {:msg \"maxBond\"} mapEpochTokenomics[epochCounter + 1].epochPoint.maxBondFraction == _maxBondFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L555-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n627:     /// @dev Refunds unused bond program amount when the program is closed.\n628:     /// @param amount Amount to be refunded from the closed bond program.\n629:     /// #if_succeeds {:msg \"effectiveBond\"} old(effectiveBond + amount) <= type(uint96).max ==> effectiveBond == old(effectiveBond) + amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L627-L629"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n646:     /// @dev Finalizes epoch incentives for a specified component / agent Id.\n647:     /// @param epochNum Epoch number to finalize incentives for.\n648:     /// @param unitType Unit type (component / agent).\n649:     /// @param unitId Unit Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L646-L649"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n682:     /// @dev Records service donations into corresponding data structures.\n683:     /// @param donator Donator account address.\n684:     /// @param serviceIds Set of service Ids.\n685:     /// @param amounts Correspondent set of ETH amounts provided by services.\n686:     /// @param curEpoch Current epoch number.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L682-L686"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n827:     /// @dev Gets the inverse discount factor value.\n828:     /// @param treasuryRewards Treasury rewards.\n829:     /// @param numNewOwners Number of new owners of components / agents registered during the epoch.\n830:     /// @return idf IDF value.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L827-L830"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1235:     /// @dev Gets inflation per last epoch.\n1236:     /// @return inflationPerEpoch Inflation value.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1235-L1236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1241:     /// @dev Gets component / agent point of a specified epoch number and a unit type.\n1242:     /// @param epoch Epoch number.\n1243:     /// @param unitType Component (0) or agent (1).\n1244:     /// @return up Unit point.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1241-L1244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1249:     /// @dev Gets inverse discount factor with the multiple of 1e18.\n1250:     /// @param epoch Epoch number.\n1251:     /// @return idf Discount factor with the multiple of 1e18.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1249-L1251"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1260:     /// @dev Gets inverse discount factor with the multiple of 1e18 of the last epoch.\n1261:     /// @return idf Discount factor with the multiple of 1e18.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1260-L1261"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n22:     /// @dev Gets an inflation cap for a specific year.\n23:     /// @param numYears Number of years passed from the launch date.\n24:     /// @return supplyCap Supply cap.\n25:     /// supplyCap = 1e27 * (1.02)^(x-9) for x >= 10\n26:     /// if_succeeds {:msg \"correct supplyCap\"} (numYears >= 10) ==> (supplyCap > 1e27);  \n27:     /// There is a bug in scribble tools, a broken instrumented version is as follows:\n28:     /// function getSupplyCapForYear(uint256 numYears) public returns (uint256 supplyCap)\n29:     /// And the test is waiting for a view / pure function, which would be correct\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L22-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n63:     /// @dev Gets an inflation amount for a specific year.\n64:     /// @param numYears Number of years passed from the launch date.\n65:     /// @return inflationAmount Inflation limit amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L63-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n30:     /// @dev TokenomicsProxy constructor.\n31:     /// @param tokenomics Tokenomics implementation address.\n32:     /// @param tokenomicsData Tokenomics initialization data.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L30-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n54:     /// @dev Delegatecall to all the incoming data.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n90:     /// @dev Treasury constructor.\n91:     /// @param _olas OLAS token address.\n92:     /// @param _tokenomics Tokenomics address.\n93:     /// @param _depository Depository address.\n94:     /// @param _dispenser Dispenser address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L90-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n115:     /// @dev Receives ETH.\n116:     /// #if_succeeds {:msg \"we do not touch the balance of developers\" } old(ETHFromServices) == ETHFromServices;\n117:     /// #if_succeeds {:msg \"conservation law\"} old(ETHOwned) + msg.value + old(ETHFromServices) <= type(uint96).max && ETHOwned == old(ETHOwned) + msg.value\n118:     /// ==> address(this).balance == ETHFromServices + ETHOwned;\n119:     /// #if_succeeds {:msg \"any paused\"} paused == 1 || paused == 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L115-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n135:     /// @dev Changes the owner address.\n136:     /// @param newOwner Address of a new owner.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L135-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n152:     /// @dev Changes various managing contract addresses.\n153:     /// @param _tokenomics Tokenomics address.\n154:     /// @param _depository Depository address.\n155:     /// @param _dispenser Dispenser address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L152-L155"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n179:     /// @dev Changes minimum accepted ETH amount by the Treasury.\n180:     /// @param _minAcceptedETH New minimum accepted ETH amount.\n181:     /// #if_succeeds {:msg \"Min accepted ETH\"} minAcceptedETH > 0 && minAcceptedETH <= type(uint96).max;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L179-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n303:     /// @dev Allows owner to transfer tokens from treasury reserves to a specified address.\n304:     /// @param to Address to transfer funds to.\n305:     /// @param tokenAmount Token amount to get reserves from.\n306:     /// @param token Token or ETH address.\n307:     /// @return success True if the transfer is successful.\n308:     /// #if_succeeds {:msg \"we do not touch the balance of developers\"} old(ETHFromServices) == ETHFromServices;\n309:     /// #if_succeeds {:msg \"updated ETHOwned\"} token == ETH_TOKEN_ADDRESS ==> ETHOwned == old(ETHOwned) - tokenAmount;\n310:     /// #if_succeeds {:msg \"ETH balance\"} token == ETH_TOKEN_ADDRESS ==> address(this).balance == old(address(this).balance) - tokenAmount;\n311:     /// #if_succeeds {:msg \"updated token reserves\"} token != ETH_TOKEN_ADDRESS ==> mapTokenReserves[token] == old(mapTokenReserves[token]) - tokenAmount;\n312:     /// #if_succeeds {:msg \"any paused\"} paused == 1 || paused == 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L303-L312"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n422:     /// @dev Re-balances treasury funds to account for the treasury reward for a specific epoch.\n423:     /// @param treasuryRewards Treasury rewards.\n424:     /// @return success True, if the function execution is successful.\n425:     /// #if_succeeds {:msg \"we do not touch the total eth balance\"} old(address(this).balance) == address(this).balance;\n426:     /// #if_succeeds {:msg \"conservation law\"} old(ETHFromServices + ETHOwned) == ETHFromServices + ETHOwned;\n427:     /// #if_succeeds {:msg \"unpaused\"} paused == 1;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L422-L427"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n460:     /// @dev Drains slashed funds from the service registry.\n461:     /// @return amount Drained amount.\n462:     /// #if_succeeds {:msg \"correct update total eth balance\"} address(this).balance == old(address(this).balance) + amount;\n463:     /// #if_succeeds {:msg \"conservation law\"} ETHFromServices + ETHOwned == old(ETHFromServices + ETHOwned) + amount;\n464:     ///if_succeeds {:msg \"slashed funds check\"} IServiceRegistry(ITokenomics(tokenomics).serviceRegistry()).slashedFunds() >= minAcceptedETH\n465:     /// ==> old(IServiceRegistry(ITokenomics(tokenomics).serviceRegistry()).slashedFunds()) == amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L460-L465"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n485:     /// @dev Enables an LP token to be bonded for OLAS.\n486:     /// @param token Token address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L485-L486"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n505:     /// @dev Disables an LP token from the ability to bond for OLAS.\n506:     /// @param token Token address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L505-L506"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n523:     /// @dev Gets information about token being enabled for bonding.\n524:     /// @param token Token address.\n525:     /// @return enabled True if token is enabled.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L523-L525"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n530:     /// @dev Pauses the contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L530-L530"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n541:     /// @dev Unpauses the contract.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L541-L541"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n6:     /// @dev Gets account blacklisting status.\n7:     /// @param account Account address.\n8:     /// @return status Blacklisting status.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n6:     /// @dev Calculates the amount of OLAS tokens based on the bonding calculator mechanism.\n7:     /// @param tokenAmount LP token amount.\n8:     /// @param priceLP LP token price.\n9:     /// @return amountOLAS Resulting amount of OLAS tokens.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L6-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n13:     /// @dev Get reserveX/reserveY at the time of product creation.\n14:     /// @param token Token address.\n15:     /// @return priceLP Resulting reserve ratio.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L13-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n5:     /// @dev Mints OLA tokens.\n6:     /// @param account Account address.\n7:     /// @param amount OLA token amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L5-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n10:     /// @dev Provides OLA token time launch.\n11:     /// @return Time launch.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L10-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n11:     /// @dev Checks if the service Id exists.\n12:     /// @param serviceId Service Id.\n13:     /// @return true if the service exists, false otherwise.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L11-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n24:     /// @dev Gets the value of slashed funds from the service registry.\n25:     /// @return amount Drained amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L24-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n28:     /// @dev Drains slashed funds.\n29:     /// @return amount Drained amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L28-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n6:     /// @dev Gets the amount of tokens owned by a specified account.\n7:     /// @param account Account address.\n8:     /// @return Amount of tokens owned.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L6-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n11:     /// @dev Gets the owner of the token Id.\n12:     /// @param tokenId Token Id.\n13:     /// @return Token Id owner address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L11-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n16:     /// @dev Gets the total amount of tokens stored by the contract.\n17:     /// @return Amount of tokens.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L16-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n20:     /// @dev Transfers the token amount.\n21:     /// @param to Address to transfer to.\n22:     /// @param amount The amount to transfer.\n23:     /// @return True if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L20-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n26:     /// @dev Gets remaining number of tokens that the `spender` can transfer on behalf of `owner`.\n27:     /// @param owner Token owner.\n28:     /// @param spender Account address that is able to transfer tokens on behalf of the owner.\n29:     /// @return Token amount allowed to be transferred.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L26-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n32:     /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n33:     /// @param spender Account address that will be able to transfer tokens on behalf of the caller.\n34:     /// @param amount Token amount.\n35:     /// @return True if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L32-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n38:     /// @dev Transfers the token amount that was previously approved up until the maximum allowance.\n39:     /// @param from Account address to transfer from.\n40:     /// @param to Account address to transfer to.\n41:     /// @param amount Amount to transfer to.\n42:     /// @return True if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L38-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n6:     /// @dev Gets effective bond (bond left).\n7:     /// @return Effective bond.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L6-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n10:     /// @dev Record global data to the checkpoint\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n32:     /// @dev Refunds unused bond program amount.\n33:     /// @param amount Amount to be refunded from the bond program.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L32-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n36:     /// @dev Gets component / agent owner incentives and clears the balances.\n37:     /// @param account Account address.\n38:     /// @param unitTypes Set of unit types (component / agent).\n39:     /// @param unitIds Set of corresponding unit Ids where account is the owner.\n40:     /// @return reward Reward amount.\n41:     /// @return topUp Top-up amount.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L36-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n45:     /// @dev Gets inverse discount factor with the multiple of 1e18 of the last epoch.\n46:     /// @return idf Discount factor with the multiple of 1e18.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L45-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n49:     /// @dev Gets the service registry contract address\n50:     /// @return Service registry contract address;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L49-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n06:     /// @dev Allows approved address to deposit an asset for OLAS.\n07:     /// @param account Account address making a deposit of LP tokens for OLAS.\n08:     /// @param tokenAmount Token amount to get OLAS for.\n09:     /// @param token Token address.\n10:     /// @param olaMintAmount Amount of OLAS token issued.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L6-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n13:     /// @dev Deposits service donations in ETH.\n14:     /// @param serviceIds Set of service Ids.\n15:     /// @param amounts Set of corresponding amounts deposited on behalf of each service Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L13-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n18:     /// @dev Gets information about token being enabled.\n19:     /// @param token Token address.\n20:     /// @return enabled True is token is enabled.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L18-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n33:     /// @dev Re-balances treasury funds to account for the treasury reward for a specific epoch.\n34:     /// @param treasuryRewards Treasury rewards.\n35:     /// @return success True, if the function execution is successful.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L33-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n6:     function totalSupply() external view returns (uint);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n7:     function token0() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n8:     function token1() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n6:     /// @dev Gets the voting power.\n7:     /// @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L6-L7"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Missing NatSpec `@dev` from function declaration",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n16:     constructor(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n7:     function state(uint256 proposalId) external returns (ProposalState);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n6:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n6:     function messageSender() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n35:     constructor(UnitType _unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n15:     constructor(address _componentRegistry, address _agentRegistry) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n6:     function totalSupply() external view returns (uint);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n7:     function token0() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L7-L7"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n8:     function token1() external view returns (address);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use `@inheritdoc` for overridden functions",
      "description": " ",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n31:     /// @dev Current state of a proposal, following Compoundb\u0000\u0019s convention.\n32:     /// @param proposalId Proposal Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L31-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n39:     /// @dev Create a new proposal to change the protocol / contract parameters.\n40:     /// @param targets The ordered list of target addresses for calls to be made during proposal execution.\n41:     /// @param values The ordered list of values to be passed to the calls made during proposal execution.\n42:     /// @param calldatas The ordered list of data to be passed to each individual function call during proposal execution.\n43:     /// @param description A human readable description of the proposal and the changes it will enact.\n44:     /// @return The Id of the newly created proposal.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L39-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n55:     /// @dev Gets the voting power for the proposal threshold.\n56:     /// @return The voting power required in order for a voter to become a proposer.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L55-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n62:     /// @dev Executes a proposal.\n63:     /// @param proposalId Proposal Id.\n64:     /// @param targets The ordered list of target addresses.\n65:     /// @param values The ordered list of values.\n66:     /// @param calldatas The ordered list of data to be passed to each individual function call.\n67:     /// @param descriptionHash Hashed description of the proposal.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L62-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n79:     /// @dev Cancels a proposal.\n80:     /// @param targets The ordered list of target addresses.\n81:     /// @param values The ordered list of values.\n82:     /// @param calldatas The ordered list of data to be passed to each individual function call.\n83:     /// @param descriptionHash Hashed description of the proposal.\n84:     /// @return The Id of the newly created proposal.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L79-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n95:     /// @dev Gets the executor address.\n96:     /// @return Executor address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L95-L96"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n102:     /// @dev Gets information about the interface support.\n103:     /// @param interfaceId A specified interface Id.\n104:     /// @return True if this contract implements the interface defined by interfaceId.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L102-L104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n604:     /// @dev Gets the account balance in native token.\n605:     /// @param account Account address.\n606:     /// @return balance Account balance.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L604-L606"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n631:     /// @dev Gets the voting power.\n632:     /// @param account Account address.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L631-L632"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n668:     /// @dev Gets voting power at a specific block number.\n669:     /// @param account Account address.\n670:     /// @param blockNumber Block number.\n671:     /// @return balance Voting balance / power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L668-L671"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n717:     /// @dev Gets total token supply.\n718:     /// @return Total token supply.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L717-L718"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n749:     /// @dev Calculate total voting power at some point in the past.\n750:     /// @param blockNumber Block number to calculate the total voting power at.\n751:     /// @return Total voting power.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L749-L751"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n758:     /// @dev Gets information about the interface support.\n759:     /// @param interfaceId A specified interface Id.\n760:     /// @return True if this contract implements the interface defined by interfaceId.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L758-L760"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n766:     /// @dev Reverts the transfer of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L766-L766"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n771:     /// @dev Reverts the approval of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L771-L771"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n776:     /// @dev Reverts the transferFrom of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L776-L776"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n781:     /// @dev Reverts the allowance of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L781-L781"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n787:     /// @dev Reverts delegates of this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L787-L787"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n793:     /// @dev Reverts delegate for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L793-L793"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n799:     /// @dev Reverts delegateBySig for this token.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L799-L799"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n097:     /// @dev Process message received from the Root Tunnel.\n098:     /// @notice This is called by onStateReceive function. The sender must be the Root Governor address (Timelock).\n099:     /// @param stateId Unique state id.\n100:     /// @param rootMessageSender Root message sender.\n101:     /// @param data Bytes message sent from the Root Tunnel. The data must be encoded as a set of continuous\n102:     ///        transactions packed into a single buffer, where each transaction is composed as follows:\n103:     ///        - target address of 20 bytes (160 bits);\n104:     ///        - value of 12 bytes (96 bits), as a limit for all of Autonolas ecosystem contracts;\n105:     ///        - payload length of 4 bytes (32 bits), as 2^32 - 1 characters is more than enough to fill a whole block;\n106:     ///        - payload as bytes, with the length equal to the specified payload length.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L97-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n66:     /// @dev Receives the token message from L1 and transfers L2 tokens to a specified address.\n67:     /// @notice Reentrancy is not possible as tokens are verified before the contract deployment.\n68:     /// @param sender FxERC20RootTunnel contract address from L1.\n69:     /// @param message Incoming bridge message.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L66-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n70:     /// @dev Receives the token message from L2 and transfers bridged tokens to a specified address.\n71:     /// @param message Incoming bridge message.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L70-L71"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n131:     /// @dev Returns unit token URI.\n132:     /// @notice Expected multicodec: dag-pb; hashing function: sha2-256, with base16 encoding and leading CID_PREFIX removed.\n133:     /// @param unitId Unit Id.\n134:     /// @return Unit token URI string.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L131-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n267:     /// @dev Gets the hash of the unit.\n268:     /// @param unitId Unit Id.\n269:     /// @return Unit hash.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L267-L269"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n24:     /// @dev Checks provided component dependencies.\n25:     /// @param dependencies Set of component dependencies.\n26:     /// @param maxComponentId Maximum component Id.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L24-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n37:     /// @dev Gets subcomponents of a provided component Id.\n38:     /// @notice For components this means getting the linearized map of components from the local map of subcomponents.\n39:     /// @param componentId Component Id.\n40:     /// @return subComponentIds Set of subcomponents.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L37-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n29:     /// @dev Checks provided component dependencies.\n30:     /// @param dependencies Set of component dependencies.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L29-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n48:     /// @dev Gets linearized set of subcomponents of a provided unit Id and a type of a component.\n49:     /// @notice (0) For components this means getting the linearized map of components from the componentRegistry contract.\n50:     /// @notice (1) For agents this means getting the linearized map of components from the local map of subcomponents.\n51:     /// @param subcomponentsFromType Type of the unit: component or agent.\n52:     /// @param unitId Component Id.\n53:     /// @return subComponentIds Set of subcomponents.\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L48-L53"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Multiple mappings with same keys can be combined into a single struct mapping for readability",
      "description": "Well-organized data structures make code reviews easier, which may lead to fewer bugs. Consider combining related mappings into mappings to structs, so it's clear what data is related.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n112:     mapping(address => LockedBalance) public mapLockedBalances;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n119:     mapping(address => PointVoting[]) public mapUserPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n219:     mapping(address => uint256) public mapOwnerRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L219-L219"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n221:     mapping(address => uint256) public mapOwnerTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L221-L221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n227:     mapping(address => bool) public mapNewOwners;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n86:     mapping(address => uint256) public mapTokenReserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n88:     mapping(address => bool) public mapEnabledTokens;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L88-L88"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "constructor should emit an event",
      "description": "Use events to signal significant changes to off-chain monitoring tools.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n16:     constructor(\n17:         IVotes governanceToken,\n18:         TimelockController timelock,\n19:         uint256 initialVotingDelay,\n20:         uint256 initialVotingPeriod,\n21:         uint256 initialProposalThreshold,\n22:         uint256 quorumFraction\n23:     )\n24:         Governor(\"Governor OLAS\")\n25:         GovernorSettings(initialVotingDelay, initialVotingPeriod, initialProposalThreshold)\n26:         GovernorVotes(governanceToken)\n27:         GovernorVotesQuorumFraction(quorumFraction)\n28:         GovernorTimelockControl(timelock)\n29:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n11:         TimelockController(minDelay, proposers, executors, msg.sender)\n12:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n36:         owner = msg.sender;\n37:         minter = msg.sender;\n38:         timeLaunch = block.timestamp;\n39:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n132:     constructor(address _token, string memory _name, string memory _symbol)\n133:     {\n134:         token = _token;\n135:         name = _name;\n136:         symbol = _symbol;\n137:         // Create initial point such that default timestamp and block number are not zero\n138:         // See cast specification in the PointVoting structure\n139:         mapSupplyPoints[0] = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n140:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L132-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n145:     constructor(address _ve, address _token) {\n146:         // Check for the zero address\n147:         if (_ve == address(0) || _token == address(0)) {\n148:             revert ZeroAddress();\n149:         }\n150:         ve = _ve;\n151:         token = _token;\n152:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L145-L152"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n138:     constructor(\n139:         address _timelock,\n140:         address _multisig,\n141:         address _governor\n142:     ) {\n143:         // Check for zero addresses\n144:         if (_timelock == address(0) || _multisig == address(0) || _governor == address(0)) {\n145:             revert ZeroAddress();\n146:         }\n147:         owner = _timelock;\n148:         multisig = _multisig;\n149:         governor = _governor;\n150:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L138-L150"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n62:     constructor(address _fxChild, address _rootGovernor) {\n63:         // Check fo zero addresses\n64:         if (_fxChild == address(0) || _rootGovernor == address(0)) {\n65:             revert ZeroAddress();\n66:         }\n67: \n68:         fxChild = _fxChild;\n69:         rootGovernor = _rootGovernor;\n70:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L62-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n62:     constructor(address _AMBContractProxyHome, address _foreignGovernor) {\n63:         // Check fo zero addresses\n64:         if (_AMBContractProxyHome == address(0) || _foreignGovernor == address(0)) {\n65:             revert ZeroAddress();\n66:         }\n67: \n68:         AMBContractProxyHome = _AMBContractProxyHome;\n69:         foreignGovernor = _foreignGovernor;\n70:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L62-L70"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n25:         owner = msg.sender;\n26:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n37:     constructor(address _fxChild, address _childToken, address _rootToken) FxBaseChildTunnel(_fxChild) {\n38:         // Check for zero addresses\n39:         if (_fxChild == address(0) || _childToken == address(0) || _rootToken == address(0)) {\n40:             revert ZeroAddress();\n41:         }\n42: \n43:         childToken = _childToken;\n44:         rootToken = _rootToken;\n45:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L37-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n38:     constructor(address _checkpointManager, address _fxRoot, address _childToken, address _rootToken)\n39:         FxBaseRootTunnel(_checkpointManager, _fxRoot)\n40:     {\n41:         // Check for zero addresses\n42:         if (_checkpointManager == address(0) || _fxRoot == address(0) || _childToken == address(0) ||\n43:             _rootToken == address(0)) {\n44:             revert ZeroAddress();\n45:         }\n46: \n47:         childToken = _childToken;\n48:         rootToken = _rootToken;\n49:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L38-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n35:     constructor(UnitType _unitType) {\n36:         unitType = _unitType;\n37:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n16:     constructor(string memory _name, string memory _symbol, string memory _baseURI)\n17:         UnitRegistry(UnitType.Component)\n18:         ERC721(_name, _symbol)\n19:     {\n20:         baseURI = _baseURI;\n21:         owner = msg.sender;\n22:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L16-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n20:     constructor(string memory _name, string memory _symbol, string memory _baseURI, address _componentRegistry)\n21:         UnitRegistry(UnitType.Agent)\n22:         ERC721(_name, _symbol)\n23:     {\n24:         baseURI = _baseURI;\n25:         componentRegistry = _componentRegistry;\n26:         owner = msg.sender;\n27:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L20-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n15:     constructor(address _componentRegistry, address _agentRegistry) {\n16:         componentRegistry = _componentRegistry;\n17:         agentRegistry = _agentRegistry;\n18:         owner = msg.sender;\n19:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L15-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n37:     constructor (address payable _gnosisSafe, address _gnosisSafeProxyFactory) {\n38:         gnosisSafe = _gnosisSafe;\n39:         gnosisSafeProxyFactory = _gnosisSafeProxyFactory;\n40:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L37-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n60:     constructor(bytes32 _proxyHash) {\n61:         if (_proxyHash == bytes32(0)) {\n62:             revert ZeroValue();\n63:         }\n64: \n65:         // Record provided multisig proxy bytecode hash\n66:         proxyHash = _proxyHash;\n67:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L60-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n106:     constructor(address _olas, address _tokenomics, address _treasury, address _bondCalculator)\n107:     {\n108:         owner = msg.sender;\n109: \n110:         // Check for at least one zero contract address\n111:         if (_olas == address(0) || _tokenomics == address(0) || _treasury == address(0) || _bondCalculator == address(0)) {\n112:             revert ZeroAddress();\n113:         }\n114:         olas = _olas;\n115:         tokenomics = _tokenomics;\n116:         treasury = _treasury;\n117:         bondCalculator = _bondCalculator;\n118:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L106-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n30:     constructor(address _tokenomics, address _treasury)\n31:     {\n32:         owner = msg.sender;\n33:         _locked = 1;\n34: \n35:         // Check for at least one zero contract address\n36:         if (_tokenomics == address(0) || _treasury == address(0)) {\n37:             revert ZeroAddress();\n38:         }\n39: \n40:         tokenomics = _tokenomics;\n41:         treasury = _treasury;\n42:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L30-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n30:     constructor() {\n31:         owner = msg.sender;\n32:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L30-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n29:     constructor(address _olas, address _tokenomics) {\n30:         // Check for at least one zero contract address\n31:         if (_olas == address(0) || _tokenomics == address(0)) {\n32:             revert ZeroAddress();\n33:         }\n34: \n35:         olas = _olas;\n36:         tokenomics = _tokenomics;\n37:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L29-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n232:     constructor()\n233:         TokenomicsConstants()\n234:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L232-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n33:     constructor(address tokenomics, bytes memory tokenomicsData) {\n34:         // Check for the zero address, since the delegatecall works even with the zero one\n35:         if (tokenomics == address(0)) {\n36:             revert ZeroTokenomicsAddress();\n37:         }\n38: \n39:         // Check for the zero data\n40:         if (tokenomicsData.length == 0) {\n41:             revert ZeroTokenomicsData();\n42:         }\n43: \n44:         assembly {\n45:             sstore(PROXY_TOKENOMICS, tokenomics)\n46:         }\n47:         // Initialize proxy tokenomics storage\n48:         (bool success, ) = tokenomics.delegatecall(tokenomicsData);\n49:         if (!success) {\n50:             revert InitializationFailed();\n51:         }\n52:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L33-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n095:     constructor(address _olas, address _tokenomics, address _depository, address _dispenser) payable {\n096:         owner = msg.sender;\n097:         _locked = 1;\n098: \n099:         // Check for at least one zero contract address\n100:         if (_olas == address(0) || _tokenomics == address(0) || _depository == address(0) || _dispenser == address(0)) {\n101:             revert ZeroAddress();\n102:         }\n103: \n104:         olas = _olas;\n105:         tokenomics = _tokenomics;\n106:         depository = _depository;\n107:         dispenser = _dispenser;\n108: \n109:         // Assign an initial contract address ETH balance\n110:         // If msg.value is passed in the constructor, it is already accounted for in the address balance\n111:         // This way the balance also accounts for possible transfers before the contract was created\n112:         ETHOwned = uint96(address(this).balance);\n113:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L95-L113"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use `ERC1155Holder` over `ERC1155Receiver`",
      "description": "View OpenZeppelin's v5.0 release candidate changes [here](https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v5.0.0-rc.0).",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n15: contract GovernorOLAS is Governor, GovernorSettings, GovernorCompatibilityBravo, GovernorVotes, GovernorVotesQuorumFraction, GovernorTimelockControl {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L15-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n9: contract Timelock is TimelockController {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "Use a `struct` instead of returning multiple values",
      "description": "Functions that return many variables can become difficult to read and maintain. Using a struct to encapsulate these return values can improve code readability, increase reusability, and reduce the likelihood of errors. Consider refactoring functions that return more than three variables to use a struct instead.",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n45:     function _parseData(bytes memory data) internal pure\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L45-L45"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n291:     function deposit(uint256 productId, uint256 tokenAmount) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L291-L291"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "[Solidity]: Bug in Legacy Code Generation When Accessing the .selector Member on Expressions with Side Effects",
      "description": "This version of solidity is vulnerable to a bug in the legacy code generation pipeline of the Solidity compiler that was found during investigation of a security report On June 26, 2023. For more details check the following [link](https://soliditylang.org/blog/2023/07/19/missing-side-effects-on-selector-access-bug/)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "NonCritical",
      "title": "[Solidity]: All `verbatim` blocks are considered identical by deduplicator and can incorrectly be unified",
      "description": "The block deduplicator is a step of the opcode-based optimizer which identifies equivalent assembly blocks and merges them into a single one. However, when blocks contained `verbatim`, their comparison was performed incorrectly, leading to the collapse of assembly blocks which are identical except for the contents of the ``verbatim`` items. Since `verbatim` is only available in Yul, compilation of Solidity sources is not affected. For more details check the following [link](https://blog.soliditylang.org/2023/11/08/verbatim-invalid-deduplication-bug/)",
      "gasSavings": null,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n2: pragma solidity ^0.8.19;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n2: pragma solidity ^0.8.21;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n2: pragma solidity ^0.8.21;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n2: pragma solidity ^0.8.20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "State variable read in a loop",
      "description": "The state variable should be cached in a local variable rather than reading it on every iteration of the for-loop, which will replace each Gwarmaccess (**100 gas**) with a much cheaper stack read.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `tokenomics` is read in this loop\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n256:             uint256 productId = productIds[i];\n257:             // Check if the product is still open by getting its supply amount\n258:             uint256 supply = mapBondProducts[productId].supply;\n259:             // The supply is greater than zero only if the product is active, otherwise it is already closed\n260:             if (supply > 0) {\n261:                 // Refund unused OLAS supply from the product if it was not used by the product completely\n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L255-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is read in this loop\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L708"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is read in this loop\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n711:             }\n712: \n713:             // Loop over component and agent Ids\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n715:                 // Get the number and set of units in the service\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `veOLASThreshold` is read in this loop\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L709"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `veOLASThreshold` is read in this loop\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `ve` is read in this loop\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L709"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `ve` is read in this loop\n702:         for (uint256 i = 0; i < numServices; ++i) {\n703:             // Check if the service owner or donator stakes enough OLAS for its components / agents to get a top-up\n704:             // If both component and agent owner top-up fractions are zero, there is no need to call external contract\n705:             // functions to check each service owner veOLAS balance\n706:             bool topUpEligible;\n707:             if (incentiveFlags[2] || incentiveFlags[3]) {\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is read in this loop\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n715:                 // Get the number and set of units in the service\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L714-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is read in this loop\n808:         for (uint256 i = 0; i < numServices; ++i) {\n809:             // Check for the service Id existence\n810:             if (!IServiceRegistry(serviceRegistry).exists(serviceIds[i])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L808-L810"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Multiple accesses of a mapping/array should use a local variable cache",
      "description": "The instances below point to the second+ access of a value inside a mapping/array, within a function. Caching a mapping's value in a local `storage` or `calldata` variable when the value is accessed [multiple times](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0), saves **~42 gas per access** due to not having to recalculate the key's keccak256 hash (Gkeccak256 - **30 gas**) and that calculation's associated stack operations. Caching an array's struct avoids recalculating the array offsets into memory/calldata",
      "gasSavings": 5922,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n319:                 payload[i] = data[i + SELECTOR_DATA_LENGTH];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L319-L319"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n373:                 _processBridgeData(callDatas[i], bridgeMediatorL2, chainId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L373-L373"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n376:                 _verifyData(targets[i], callDatas[i], block.chainid);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L376-L376"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n476:             uint256 targetSelectorChainId = uint256(uint160(targets[i]));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L476-L476"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n478:             targetSelectorChainId |= uint256(uint32(selectors[i])) << 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L478-L478"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n480:             targetSelectorChainId |= chainIds[i] << 192;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L480-L480"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n525:             uint256 bridgeMediatorL2ChainId = uint256(uint160(bridgeMediatorL2s[i]));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L525-L525"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n528:             mapBridgeMediatorL1L2ChainIds[bridgeMediatorL1s[i]] = bridgeMediatorL2ChainId;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L528-L528"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n148:             pv = mapUserPoints[account][lastPointNumber - 1];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L148-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n212:             lastPoint = mapSupplyPoints[curNumPoint];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L212-L212"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n270:                     mapSupplyPoints[curNumPoint] = lastPoint;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L270-L270"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n571:                 point = mapUserPoints[account][mid];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L571-L571"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n585:             point = mapUserPoints[account][minPointNumber];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L585-L585"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n596:             PointVoting memory uPoint = mapUserPoints[account][pointNumber - 1];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L596-L596"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n41:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > componentTotalSupply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n41:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > componentTotalSupply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n42:                 revert ComponentNotFound(dependencies[iDep]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n30:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > maxComponentId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n30:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > maxComponentId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n31:                 revert ComponentNotFound(dependencies[iDep]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n214:             numComponents[i] = uint32(components[i].length);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n215:             maxNumComponents += numComponents[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n236:                 for (; processedComponents[i] < numComponents[i]; ++processedComponents[i]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L236-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n236:                 for (; processedComponents[i] < numComponents[i]; ++processedComponents[i]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L236-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n237:                     if (minComponent < components[i][processedComponents[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n237:                     if (minComponent < components[i][processedComponents[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n239:                         if (components[i][processedComponents[i]] < tryMinComponent) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L239-L239"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n239:                         if (components[i][processedComponents[i]] < tryMinComponent) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L239-L239"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n240:                             tryMinComponent = components[i][processedComponents[i]];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L240-L240"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n240:                             tryMinComponent = components[i][processedComponents[i]];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L240-L240"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n141:                 revert WrongOwner(owners[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L141-L141"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n263:                 address token = mapBondProducts[productId].token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L263-L263"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n264:                 delete mapBondProducts[productId];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L264-L264"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n266:                 ids[numClosedProducts] = productIds[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L266-L266"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n341:             delete mapBondProducts[productId];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L341-L341"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n359:             uint256 pay = mapUserBonds[bondIds[i]].payout;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L359-L359"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n360:             bool matured = block.timestamp >= mapUserBonds[bondIds[i]].maturity;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n364:                 revert BondNotRedeemable(bondIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L364-L364"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n368:             if (mapUserBonds[bondIds[i]].account != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L368-L368"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n369:                 revert OwnerOnly(msg.sender, mapUserBonds[bondIds[i]].account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L369-L369"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n376:             uint256 productId = mapUserBonds[bondIds[i]].productId;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L376-L376"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n379:             delete mapUserBonds[bondIds[i]];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L379-L379"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n405:                 positions[i] = true;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L405-L405"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n455:                     block.timestamp >= mapUserBonds[i].maturity)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L455-L455"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n457:                     positions[i] = true;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L457-L457"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n460:                     payout += mapUserBonds[i].payout;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L460-L460"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n484:             matured = block.timestamp >= mapUserBonds[bondId].maturity;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L484-L484"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n73:             mapBlacklistedDonators[accounts[i]] = statuses[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n657:             totalIncentives *= mapEpochTokenomics[epochNum].unitPoints[unitType].rewardUnitFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L657-L657"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n659:             totalIncentives = mapUnitIncentives[unitType][unitId].reward + totalIncentives / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L659-L659"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n660:             mapUnitIncentives[unitType][unitId].reward = uint96(totalIncentives);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L660-L660"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n662:             mapUnitIncentives[unitType][unitId].pendingRelativeReward = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L662-L662"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n666:         totalIncentives = mapUnitIncentives[unitType][unitId].pendingRelativeTopUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L666-L666"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n673:             totalIncentives *= mapEpochTokenomics[epochNum].unitPoints[unitType].topUpUnitFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L673-L673"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n674:             uint256 sumUnitIncentives = uint256(mapEpochTokenomics[epochNum].unitPoints[unitType].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L674-L674"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n675:             totalIncentives = mapUnitIncentives[unitType][unitId].topUp + totalIncentives / sumUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L675-L675"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n676:             mapUnitIncentives[unitType][unitId].topUp = uint96(totalIncentives);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L676-L676"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n678:             mapUnitIncentives[unitType][unitId].pendingRelativeTopUp = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L678-L678"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n695:         incentiveFlags[1] = (mapEpochTokenomics[curEpoch].unitPoints[1].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L695-L695"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n696:         incentiveFlags[2] = (mapEpochTokenomics[curEpoch].unitPoints[0].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L696-L696"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n697:         incentiveFlags[3] = (mapEpochTokenomics[curEpoch].unitPoints[1].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L697-L697"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n717:                     getUnitIdsOfService(IServiceRegistry.UnitType(unitType), serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L717-L717"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n721:                     revert ServiceNeverDeployed(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L721-L721"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n730:                         uint256 lastEpoch = mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L730-L730"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n733:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L733-L733"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n733:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L733-L733"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n739:                             _finalizeIncentivesForUnitId(lastEpoch, unitType, serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L739-L739"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n741:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L741-L741"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n741:                             mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch = uint32(curEpoch);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L741-L741"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n744:                         if (incentiveFlags[unitType]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L744-L744"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n745:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeReward += amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L745-L745"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n745:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeReward += amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L745-L745"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n751:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeTopUp += amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L751-L751"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n751:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeTopUp += amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L751-L751"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n752:                             mapEpochTokenomics[curEpoch].unitPoints[unitType].sumUnitTopUpsOLAS += amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L752-L752"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n761:                         mapNewUnits[unitType][serviceUnitIds[j]] = true;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L761-L761"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n761:                         mapNewUnits[unitType][serviceUnitIds[j]] = true;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L761-L761"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n762:                         mapEpochTokenomics[curEpoch].unitPoints[unitType].numNewUnits++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L762-L762"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L765-L765"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n767:                             mapNewOwners[unitOwner] = true;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L767-L767"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n768:                             mapEpochTokenomics[curEpoch].epochPoint.numNewOwners++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L768-L768"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n811:                 revert ServiceDoesNotExist(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L811-L811"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n818:         mapEpochTokenomics[curEpoch].epochPoint.totalDonationsETH = uint96(donationETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L818-L818"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1113:                 revert Overflow(unitTypes[i], 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1113-L1113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1117-L1117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1117-L1117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1117-L1117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1117-L1117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1118:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1118-L1118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1118:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1118-L1118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1120:             lastIds[unitTypes[i]] = unitIds[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1120-L1120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1123-L1123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1123-L1123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1134:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1134-L1134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1134:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1134-L1134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1139-L1139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1139-L1139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1141:                 mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1141-L1141"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1141:                 mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1141-L1141"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1145:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1145-L1145"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1145:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1145-L1145"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1146:             mapUnitIncentives[unitTypes[i]][unitIds[i]].reward = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1146-L1146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1146:             mapUnitIncentives[unitTypes[i]][unitIds[i]].reward = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1146-L1146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1148:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1148-L1148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1148:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1148-L1148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1149:             mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1149-L1149"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1149:             mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp = 0;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1149-L1149"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1183:                 revert Overflow(unitTypes[i], 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1183-L1183"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1187-L1187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1187-L1187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1187-L1187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1187-L1187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1188:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1188-L1188"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1188:                 revert WrongUnitId(unitIds[i], unitTypes[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1188-L1188"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1190:             lastIds[unitTypes[i]] = unitIds[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1190-L1190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1193-L1193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1193-L1193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1204:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1204-L1204"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1204:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1204-L1204"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1209-L1209"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1209-L1209"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1211:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].rewardUnitFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1211-L1211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1211:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].rewardUnitFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1211-L1211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1216:                 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeTopUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1216-L1216"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1216:                 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeTopUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1216-L1216"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1221:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].topUpUnitFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1221-L1221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1221:                     totalIncentives *= mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].topUpUnitFraction;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1221-L1221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1222-L1222"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1222-L1222"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1229:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1229-L1229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1229:             reward += mapUnitIncentives[unitTypes[i]][unitIds[i]].reward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1229-L1229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1231:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1231-L1231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1231:             topUp += mapUnitIncentives[unitTypes[i]][unitIds[i]].topUp;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1231-L1231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n225:         mapTokenReserves[token] = reserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n280:             totalAmount += amounts[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L280-L280"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n356:                 mapTokenReserves[token] = reserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L356-L356"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n500:             mapEnabledTokens[token] = true;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L500-L500"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n518:             mapEnabledTokens[token] = false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L518-L518"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use assembly to calculate hashes to save gas",
      "description": "Using assembly to calculate hashes can save *** 80 gas *** per instance",
      "gasSavings": 480,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n103:     bytes4 public constant PROCESS_MESSAGE_FROM_FOREIGN = bytes4(keccak256(bytes(\"processMessageFromForeign(bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n105:     bytes4 public constant SEND_MESSAGE_TO_CHILD = bytes4(keccak256(bytes(\"sendMessageToChild(address,bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n103:         bytes32 multisigProxyHash = keccak256(multisig.code);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L103-L103"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use assembly to check for `address(0)`",
      "description": "*Saves 6 gas per instance*",
      "gasSavings": 546,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n48:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n63:         if (newMinter == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n37:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L37-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n39:         if (_fxChild == address(0) || _childToken == address(0) || _rootToken == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n39:         if (_fxChild == address(0) || _childToken == address(0) || _rootToken == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n39:         if (_fxChild == address(0) || _childToken == address(0) || _rootToken == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n59:         if (to == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L59-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n42:         if (_checkpointManager == address(0) || _fxRoot == address(0) || _childToken == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n42:         if (_checkpointManager == address(0) || _fxRoot == address(0) || _childToken == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n42:         if (_checkpointManager == address(0) || _fxRoot == address(0) || _childToken == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n43:             _rootToken == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n63:         if (to == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L63-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n64:         if (_fxChild == address(0) || _rootGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n64:         if (_fxChild == address(0) || _rootGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n89:         if (newRootGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n143:             if (target == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n64:         if (_AMBContractProxyHome == address(0) || _foreignGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n64:         if (_AMBContractProxyHome == address(0) || _foreignGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n89:         if (newForeignGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n143:             if (target == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n144:         if (_timelock == address(0) || _multisig == address(0) || _governor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L144-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n144:         if (_timelock == address(0) || _multisig == address(0) || _governor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L144-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n144:         if (_timelock == address(0) || _multisig == address(0) || _governor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L144-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n160:         if (newGovernor == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n226:             if (target == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L226-L226"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n367:             if (bridgeMediatorL2 != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L367-L367"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n460:             if (targets[i] == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L460-L460"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n465:             if (selectors[i] == bytes4(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L465-L465"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n513:             if (bridgeMediatorL1s[i] == address(0) || bridgeMediatorL2s[i] == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L513-L513"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n513:             if (bridgeMediatorL1s[i] == address(0) || bridgeMediatorL2s[i] == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L513-L513"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n185:         if (account != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L185-L185"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n278:         if (account != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L278-L278"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n293:         if (account != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L293-L293"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n413:         if (account == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L413-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n547:         if (account == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L547-L547"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n568:             if (account == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L568-L568"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n582:         if (account == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L582-L582"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n147:         if (_ve == address(0) || _token == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n147:         if (_ve == address(0) || _token == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n27:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n44:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n60:         if (newManager == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L60-L60"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n64:         if(unitOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n61:         if (_proxyHash == bytes32(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L61-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n111:         if (_olas == address(0) || _tokenomics == address(0) || _treasury == address(0) || _bondCalculator == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n111:         if (_olas == address(0) || _tokenomics == address(0) || _treasury == address(0) || _bondCalculator == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n111:         if (_olas == address(0) || _tokenomics == address(0) || _treasury == address(0) || _bondCalculator == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n111:         if (_olas == address(0) || _tokenomics == address(0) || _treasury == address(0) || _bondCalculator == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n130:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n150:         if (_tokenomics != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L150-L150"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n155:         if (_treasury != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L155-L155"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n169:         if (_bondCalculator != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L169-L169"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n439:         if (account == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L439-L439"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n36:         if (_tokenomics == address(0) || _treasury == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n36:         if (_tokenomics == address(0) || _treasury == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n53:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n71:         if (_tokenomics != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L71-L71"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n76:         if (_treasury != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n43:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n69:             if (accounts[i] == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n31:         if (_olas == address(0) || _tokenomics == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n31:         if (_olas == address(0) || _tokenomics == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n278:         if (owner != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L278-L278"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n283:         if (_olas == address(0) || _treasury == address(0) || _depository == address(0) || _dispenser == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L283-L283"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n283:         if (_olas == address(0) || _treasury == address(0) || _depository == address(0) || _dispenser == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L283-L283"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n283:         if (_olas == address(0) || _treasury == address(0) || _depository == address(0) || _dispenser == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L283-L283"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n283:         if (_olas == address(0) || _treasury == address(0) || _depository == address(0) || _dispenser == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L283-L283"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n284:             _ve == address(0) || _componentRegistry == address(0) || _agentRegistry == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L284-L284"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n284:             _ve == address(0) || _componentRegistry == address(0) || _agentRegistry == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L284-L284"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n284:             _ve == address(0) || _componentRegistry == address(0) || _agentRegistry == address(0) ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L284-L284"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n285:             _serviceRegistry == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L285-L285"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n391:         if (implementation == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L391-L391"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n411:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L411-L411"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n430:         if (_treasury != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L430-L430"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n435:         if (_depository != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L435-L435"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n440:         if (_dispenser != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L440-L440"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n457:         if (_componentRegistry != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L457-L457"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n461:         if (_agentRegistry != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L461-L461"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n465:         if (_serviceRegistry != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L465-L465"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n801:         if (bList != address(0) && IDonatorBlacklist(bList).isDonatorBlacklisted(donator)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L801-L801"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n887:         if (implementation == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L887-L887"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n35:         if (tokenomics == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L35-L35"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n100:         if (_olas == address(0) || _tokenomics == address(0) || _depository == address(0) || _dispenser == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n100:         if (_olas == address(0) || _tokenomics == address(0) || _depository == address(0) || _dispenser == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n100:         if (_olas == address(0) || _tokenomics == address(0) || _depository == address(0) || _dispenser == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n100:         if (_olas == address(0) || _tokenomics == address(0) || _depository == address(0) || _dispenser == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n144:         if (newOwner == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L144-L144"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n163:         if (_tokenomics != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L163-L163"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n168:         if (_depository != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L168-L168"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n173:         if (_dispenser != address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L173-L173"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n494:         if (token == address(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L494-L494"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use assembly in place of `abi.decode` to extract `calldata` values more efficiently",
      "description": "Instead of using abi.decode, we can use assembly to decode our desired calldata values directly. This will allow us to avoid decoding calldata values that we will not use.\nFor more details on how to implement this, check the following [report](https://code4rena.com/reports/2023-05-juicebox#g-04-use-assembly-in-place-of-abidecode-to-extract-calldata-values-more-efficiently)",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n278:             (address homeMediator, bytes memory mediatorPayload, ) = abi.decode(payload, (address, bytes, uint256));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L278-L278"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Optimize Address Storage Value Management with `assembly`",
      "description": " ",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n36:         owner = msg.sender;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L36-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n37:         minter = msg.sender;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L37-L37"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n52:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n67:         minter = newMinter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n25:         owner = msg.sender;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n41:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n43:         childToken = _childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n44:         rootToken = _rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n47:         childToken = _childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L47-L47"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n48:         rootToken = _rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n68:         fxChild = _fxChild;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n69:         rootGovernor = _rootGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n93:         rootGovernor = newRootGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n68:         AMBContractProxyHome = _AMBContractProxyHome;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n69:         foreignGovernor = _foreignGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L69-L69"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n93:         foreignGovernor = newForeignGovernor;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n147:         owner = _timelock;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n148:         multisig = _multisig;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L148-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n150:         ve = _ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L150-L150"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n151:         token = _token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L151-L151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n25:         componentRegistry = _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L25-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n48:         owner = newOwner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n64:         manager = newManager;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n16:         componentRegistry = _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n17:         agentRegistry = _agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n38:         gnosisSafe = _gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n114:         olas = _olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L114-L114"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n115:         tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n116:         treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L116-L116"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n151:             tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L151-L151"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n156:             treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L156-L156"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n40:         tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n41:         treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n72:             tokenomics = _tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L72-L72"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n77:             treasury = _treasury;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n35:         olas = _olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L35-L35"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use assembly to emit events",
      "description": "We can use assembly to emit events efficiently by utilizing `scratch space` and the `free memory pointer`. This will allow us to potentially avoid memory expansion costs. Note: In order to do this optimization safely, we will need to cache and restore the free memory pointer.",
      "gasSavings": 3116,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n53:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n68:         emit MinterUpdated(newMinter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n134:             emit Approval(msg.sender, spender, spenderAllowance);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n150:         emit Approval(msg.sender, spender, spenderAllowance);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L150-L150"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n42:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n84:         emit FxWithdrawERC20(rootToken, childToken, from, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L84-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n107:         emit FxDepositERC20(childToken, rootToken, msg.sender, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L107-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n79:         emit FxDepositERC20(childToken, rootToken, from, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n106:         emit FxWithdrawERC20(rootToken, childToken, msg.sender, to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L106-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n74:         emit FundsReceived(msg.sender, msg.value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n94:         emit RootGovernorUpdated(newRootGovernor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n167:         emit MessageReceived(stateId, rootMessageSender, data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n74:         emit FundsReceived(msg.sender, msg.value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n94:         emit ForeignGovernorUpdated(newForeignGovernor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L94-L94"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n167:         emit MessageReceived(governor, data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n165:         emit GovernorUpdated(newGovernor);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L165-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n181:         emit GovernorCheckProposalIdChanged(proposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L181-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n486:         emit SetTargetSelectors(targets, selectors, chainIds, statuses);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L486-L486"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n531:         emit SetBridgeMediators(bridgeMediatorL1s, bridgeMediatorL2s, chainIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L531-L531"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n556:         emit GuardPaused(msg.sender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L556-L556"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n568:         emit GuardUnpaused();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L568-L568"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n367:         emit Deposit(account, amount, lockedBalance.endTime, depositType, block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L367-L367"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n368:         emit Supply(supplyBefore, supplyAfter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L368-L368"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n530:         emit Withdraw(msg.sender, amount, block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L530-L530"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n531:         emit Supply(supplyBefore, supplyAfter);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L531-L531"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n32:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n43:         emit Pause(msg.sender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L43-L43"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n54:         emit Unpause(msg.sender);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n49:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n65:         emit ManagerUpdated(newManager);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L65-L65"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n90:         emit BaseURIChanged(bURI);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L90-L90"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n112:         emit CreateUnit(unitId, unitType, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n146:         emit UpdateUnitHash(unitId, unitType, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L146-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n135:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n152:             emit TokenomicsUpdated(_tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L152-L152"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n157:             emit TreasuryUpdated(_treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L157-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n171:             emit BondCalculatorUpdated(_bondCalculator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n235:         emit CreateProduct(token, productId, supply, priceLP, vesting);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L235-L235"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n268:                 emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L268-L268"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n342:             emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L342-L342"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n345:         emit CreateBond(token, productId, msg.sender, bondId, payout, tokenAmount, maturity);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L345-L345"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n380:             emit RedeemBond(productId, msg.sender, bondIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L380-L380"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n58:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L58-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n73:             emit TokenomicsUpdated(_tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n78:             emit TreasuryUpdated(_treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n112:         emit IncentivesClaimed(msg.sender, reward, topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n48:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n399:         emit TokenomicsImplementationUpdated(implementation);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L399-L399"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n416:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L416-L416"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n432:             emit TreasuryUpdated(_treasury);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L432-L432"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n437:             emit DepositoryUpdated(_depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L437-L437"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n442:             emit DispenserUpdated(_dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L442-L442"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n459:             emit ComponentRegistryUpdated(_componentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L459-L459"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n463:             emit AgentRegistryUpdated(_agentRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L463-L463"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n467:             emit ServiceRegistryUpdated(_serviceRegistry);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L467-L467"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n481:         emit DonatorBlacklistUpdated(_donatorBlacklist);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L481-L481"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n551:         emit TokenomicsParametersUpdateRequested(epochCounter + 1, _devsPerCapital, _codePerDev, _epsilonRate, _epochLen,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L551-L551"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n600:         emit IncentiveFractionsUpdateRequested(eCounter, _rewardComponentFraction, _rewardAgentFraction,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L600-L600"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n623:             emit EffectiveBondUpdated(eBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L623-L623"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n643:         emit EffectiveBondUpdated(eBond);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L643-L643"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n975:             emit IncentiveFractionsUpdated(eCounter + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L975-L975"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1002:             emit TokenomicsParametersUpdated(eCounter + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1002-L1002"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1045:             emit IDFUpdated(idf);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1045-L1045"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1065:             emit EpochSettled(eCounter, incentives[1], accountRewards, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1065-L1065"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n132:         emit ReceiveETH(msg.sender, msg.value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n149:         emit OwnerUpdated(newOwner);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L149-L149"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n165:             emit TokenomicsUpdated(_tokenomics);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L165-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n170:             emit DepositoryUpdated(_depository);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n175:             emit DispenserUpdated(_dispenser);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L175-L175"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n199:         emit MinAcceptedETHUpdated(_minAcceptedETH);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L199-L199"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n244:         emit DepositTokenFromAccount(account, token, tokenAmount, olasMintAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n295:         emit DonateToServicesETH(msg.sender, serviceIds, amounts, msg.value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L295-L295"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n337:                 emit Withdraw(ETH_TOKEN_ADDRESS, to, tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L337-L337"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n358:                 emit Withdraw(token, to, tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L358-L358"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n405:             emit Withdraw(ETH_TOKEN_ADDRESS, account, accountRewards);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L405-L405"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n418:             emit Withdraw(olas, account, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L418-L418"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n452:                 emit UpdateTreasuryBalances(amountETHOwned, amountETHFromServices);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L452-L452"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n501:             emit EnableToken(token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L501-L501"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n519:             emit DisableToken(token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n538:         emit PauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L538-L538"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n549:         emit UnpauseTreasury();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L549-L549"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Avoid contract existence checks by using low level calls",
      "description": "Prior to 0.8.10 the compiler inserted extra code, including `EXTCODESIZE` (100 gas), to check for contract existence for external function calls. In more recent solidity versions, the compiler will not insert these checks if the external call has a return value. Similar behavior can be achieved in earlier versions by using low-level calls, since low level calls never check for contract existence",
      "gasSavings": 5700,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit transfer() \n79:         bool success = IERC20(childToken).transfer(to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n//@audit transferFrom() \n102:         bool success = IERC20(childToken).transferFrom(msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L102-L102"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit mint() \n77:         IERC20(rootToken).mint(to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit transferFrom() \n98:         bool success = IERC20(rootToken).transferFrom(msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n//@audit burn() \n104:         IERC20(rootToken).burn(amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L104-L104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit messageSender() \n113:         address bridgeGovernor = IAMB(AMBContractProxyHome).messageSender();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit state() \n545:             ProposalState state = IGovernor(governor).state(governorCheckProposalId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L545-L545"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit transferFrom() \n364:             IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L364-L364"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit transfer() \n534:         IERC20(token).transfer(msg.sender, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L534-L534"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit totalNumPoints() \n157:         numPoints = IVEOLAS(ve).totalNumPoints();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L157-L157"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit mapSupplyPoints() \n164:         sPoint = IVEOLAS(ve).mapSupplyPoints(idx);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L164-L164"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit mapSlopeChanges() \n171:         slopeChange = IVEOLAS(ve).mapSlopeChanges(ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getLastUserPoint() \n178:         pv = IVEOLAS(ve).getLastUserPoint(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L178-L178"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getNumUserPoints() \n185:         userNumPoints = IVEOLAS(ve).getNumUserPoints(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L185-L185"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getNumUserPoints() \n195:         uint256 userNumPoints = IVEOLAS(ve).getNumUserPoints(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L195-L195"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getUserPoint() \n197:             uPoint = IVEOLAS(ve).getUserPoint(account, idx);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L197-L197"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getVotes() \n204:         balance = IVEOLAS(ve).getVotes(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L204-L204"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getPastVotes() \n216:             balance = IVEOLAS(ve).getPastVotes(account, blockNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L216-L216"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit balanceOf() \n224:         balance = IVEOLAS(ve).balanceOf(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L224-L224"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit balanceOfAt() \n236:             balance = IVEOLAS(ve).balanceOfAt(account, blockNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L236-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit lockedEnd() \n244:         unlockTime = IVEOLAS(ve).lockedEnd(account);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit totalSupply() \n250:         supply = IVEOLAS(ve).totalSupply();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L250-L250"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit totalSupplyAt() \n257:         supplyAt = IVEOLAS(ve).totalSupplyAt(blockNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L257-L257"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit totalNumPoints() \n265:         uint256 numPoints = IVEOLAS(ve).totalNumPoints();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L265-L265"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit mapSupplyPoints() \n266:         PointVoting memory sPoint = IVEOLAS(ve).mapSupplyPoints(numPoints);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L266-L266"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit totalSupplyLockedAtT() \n269:             vPower = IVEOLAS(ve).totalSupplyLockedAtT(ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L269-L269"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit totalSupplyLocked() \n278:         vPower = IVEOLAS(ve).totalSupplyLocked();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L278-L278"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit getPastTotalSupply() \n286:         vPower = IVEOLAS(ve).getPastTotalSupply(blockNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L286-L286"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit supportsInterface() \n293:         return IVEOLAS(ve).supportsInterface(interfaceId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L293-L293"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit totalSupply() \n38:         uint32 componentTotalSupply = uint32(IRegistry(componentRegistry).totalSupply());\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit getLocalSubComponents() \n60:             (subComponentIds, ) = IRegistry(componentRegistry).getLocalSubComponents(uint256(unitId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L60-L60"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit create() \n39:             unitId = IRegistry(componentRegistry).create(unitOwner, unitHash, dependencies);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit create() \n41:             unitId = IRegistry(agentRegistry).create(unitOwner, unitHash, dependencies);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit updateHash() \n52:             success = IRegistry(componentRegistry).updateHash(msg.sender, unitId, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n//@audit updateHash() \n54:             success = IRegistry(agentRegistry).updateHash(msg.sender, unitId, unitHash);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit createProxyWithNonce() \n106:         multisig = IGnosisSafeProxyFactory(gnosisSafeProxyFactory).createProxyWithNonce(gnosisSafe, safeParams, nonce);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L106-L106"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit isEnabled() \n221:         if (!ITreasury(treasury).isEnabled(token)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L221-L221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit reserveAmountForBondProgram() \n226:         if (!ITokenomics(tokenomics).reserveAmountForBondProgram(supply)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L226-L226"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit effectiveBond() \n227:             revert LowerThan(ITokenomics(tokenomics).effectiveBond(), supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit refundFromBondProgram() \n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit calculatePayoutOLAS() \n320:         payout = IGenericBondCalculator(bondCalculator).calculatePayoutOLAS(tokenAmount, product.priceLP);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L320-L320"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit depositTokenForOLAS() \n337:         ITreasury(treasury).depositTokenForOLAS(msg.sender, tokenAmount, token, payout);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L337-L337"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit transfer() \n390:         IToken(olas).transfer(msg.sender, payout);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L390-L390"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit getCurrentPriceLP() \n492:         return IGenericBondCalculator(bondCalculator).getCurrentPriceLP(token);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L492-L492"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit accountOwnerIncentives() \n99:         (reward, topUp) = ITokenomics(tokenomics).accountOwnerIncentives(msg.sender, unitTypes, unitIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n//@audit withdrawToAccount() \n104:             success = ITreasury(treasury).withdrawToAccount(msg.sender, reward, topUp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L104-L104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n//@audit getLastIDF() \n64:         amountOLAS = ITokenomics(tokenomics).getLastIDF() * totalTokenValue / 1e36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit ownerOf() \n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L708-L708"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit getVotes() \n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L709-L709"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit getVotes() \n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L710-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit getUnitIdsOfService() \n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit exists() \n810:             if (!IServiceRegistry(serviceRegistry).exists(serviceIds[i])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L810-L810"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit rebalanceTreasury() \n1063:         if (incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1063-L1063"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit mint() \n242:         IOLAS(olas).mint(msg.sender, olasMintAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L242-L242"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit trackServiceDonations() \n298:         ITokenomics(tokenomics).trackServiceDonations(msg.sender, serviceIds, amounts, msg.value);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L298-L298"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit mint() \n416:             IOLAS(olas).mint(account, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L416-L416"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit serviceRegistry() \n473:         address serviceRegistry = ITokenomics(tokenomics).serviceRegistry();\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L473-L473"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Using bools for storage incurs overhead",
      "description": "Use uint256(1) and uint256(2) for true/false to avoid a Gwarmaccess (100 gas), and to avoid Gsset (20000 gas) when changing from 'false' to 'true', after having been 'true' in the past. See [source](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27).",
      "gasSavings": 600,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit avoid using `bool` type for mapping values\n130:     mapping(uint256 => bool) public mapAllowedTargetSelectorChainIds;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n//@audit avoid using `bool` type for paused\n16:     bool public paused;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit avoid using `bool` type for mapping values\n27:     mapping(address => bool) public mapBlacklistedDonators;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit avoid using `bool` type for mapping values\n225:     mapping(uint256 => mapping(uint256 => bool)) public mapNewUnits;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit avoid using `bool` type for mapping values\n227:     mapping(address => bool) public mapNewOwners;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n//@audit avoid using `bool` type for mapping values\n88:     mapping(address => bool) public mapEnabledTokens;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L88-L88"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use byte32 in place of string",
      "description": "For strings of 32 char strings and below you can use bytes32 instead as it's more gas efficient",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n139:         return string(abi.encodePacked(baseURI, CID_PREFIX, _toHex16(bytes16(unitHash)),\n140:             _toHex16(bytes16(unitHash << 128))));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L139-L140"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Cache array length outside of loop",
      "description": "If not cached, the solidity compiler will always read the length of the array during each iteration. That is, if it is a storage array, this is an extra sload operation (100 additional extra gas for each iteration except for the first) and if it is a memory array, this is an extra mload operation (3 additional gas for each iteration except for the first).",
      "gasSavings": 1552,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n212:         for (uint256 i = 0; i < data.length;) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L212-L212"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n273:             for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L273-L273"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n292:             for (uint256 i = 0; i < bridgePayload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L292-L292"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n318:             for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L318-L318"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n340:         for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L340-L340"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n360:         for (uint i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L458-L458"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L511-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n40:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n29:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L357-L357"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1110-L1110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1132-L1132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1180-L1180"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1202-L1202"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "State variables should be cached in stack variables rather than re-reading them from storage",
      "description": "The instances below point to the second+ access of a state variable within a function. Caching of a state variable replaces each Gwarmaccess (100 gas) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.\n\n*Saves 100 gas per instance*",
      "gasSavings": 291,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n549:                 revert NotDefeated(governorCheckProposalId, state);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L549-L549"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L710-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n418:             emit Withdraw(olas, account, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L418-L418"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use calldata instead of memory for function arguments that do not get mutated",
      "description": "Mark data types as `calldata` instead of `memory` where possible. This makes it so that the data is not automatically loaded into memory. If the data passed into the function does not need to be changed (like updating values in an array), it can be passed in as `calldata`. The one exception to this is if the argument must later be passed into another function that takes an argument that specifies `memory` storage.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit Make `data` as a calldata\n6:     function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes memory data) external;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit Make `dependencies` as a calldata\n19:         uint32[] memory dependencies\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L19-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n//@audit Make `unitIds` as a calldata\n38:     function calculateSubComponents(uint32[] memory unitIds) external view returns (uint32[] memory subComponentIds);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n//@audit Make `initializer` as a calldata\n12:         bytes memory initializer,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L12-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit Make `owners` as a calldata\n86:         address[] memory owners,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n//@audit Make `data` as a calldata\n88:         bytes memory data\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L88-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit Make `productIds` as a calldata\n244:     function close(uint256[] memory productIds) external returns (uint256[] memory closedProductIds) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit Make `bondIds` as a calldata\n356:     function redeem(uint256[] memory bondIds) external returns (uint256 payout) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L356-L356"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit Make `accounts` as a calldata\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit Make `statuses` as a calldata\n56:     function setDonatorsStatuses(address[] memory accounts, bool[] memory statuses) external returns (bool success) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Make `unitTypes` as a calldata\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1085"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Make `unitIds` as a calldata\n1085:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1085-L1085"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Make `unitTypes` as a calldata\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit Make `unitIds` as a calldata\n1160:     function getOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external view\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1160-L1160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit Make `serviceIds` as a calldata\n21:         uint256[] memory serviceIds,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L21-L21"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit Make `amounts` as a calldata\n22:         uint256[] memory amounts,\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit Make `unitTypes` as a calldata\n42:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n//@audit Make `unitIds` as a calldata\n42:     function accountOwnerIncentives(address account, uint256[] memory unitTypes, uint256[] memory unitIds) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n//@audit Make `serviceIds` as a calldata\n16:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n//@audit Make `amounts` as a calldata\n16:     function depositServiceDonationsETH(uint256[] memory serviceIds, uint256[] memory amounts) external payable;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L16-L16"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "With assembly, `.call (bool success)` transfer can be done gas-optimized",
      "description": "`return` data `(bool success,)` has to be stored due to EVM architecture, but in a usage like below, `out` and `outsize` values are given (0,0), this storage disappears and gas optimization is provided.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n339:                 (success, ) = to.call{value: tokenAmount}(\"\");\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L339-L339"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n406:             (success, ) = account.call{value: accountRewards}(\"\");\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L406-L406"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement",
      "description": "`require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`",
      "gasSavings": 255,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n77:                 uint256 payloadLength = dataLength - DEFAULT_DATA_LENGTH;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n111:             uint256 payloadLength = dataLength - DEFAULT_DATA_LENGTH;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n140:             if (owners[i] != checkOwners[numOwners - i - 1]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L140-L140"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Divisions which do not divide by -X cannot overflow or overflow so such operations can be unchecked to save gas",
      "description": "Make such found divisions are unchecked when ensured it is safe to do so",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n101:         uint256 numYears = (block.timestamp - timeLaunch) / oneYear;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n109:                 supplyCap += (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L109-L109"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n225:             block_slope = (1e18 * uint256(block.number - lastPoint.blockNumber)) / uint256(block.timestamp - lastPoint.ts);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n231:             uint64 tStep = (lastCheckpoint / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n258:                 lastPoint.blockNumber = initialPoint.blockNumber + uint64((block_slope * uint256(tStep - initialPoint.ts)) / 1e18);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L258-L258"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n433:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L433-L433"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n487:             unlockTime = ((block.timestamp + unlockTime) / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L487-L487"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n565:             uint256 mid = (minPointNumber + maxPointNumber + 1) / 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L565-L565"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n664:             blockTime += (dt * (blockNumber - point.blockNumber)) / dBlock;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L664-L664"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n692:         uint64 tStep = (lastPoint.ts / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L692-L692"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n64:         amountOLAS = ITokenomics(tokenomics).getLastIDF() * totalTokenValue / 1e36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n89:                 priceLP = (reserve1 * 1e18) / totalSupply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n329:         uint256 _inflationPerSecond = getInflationForYear(0) / zeroYearSecondsLeft;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L329-L329"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n367:         uint256 _maxBond = (_inflationPerSecond * _epochLen * _maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L367-L367"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n659:             totalIncentives = mapUnitIncentives[unitType][unitId].reward + totalIncentives / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L659-L659"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n675:             totalIncentives = mapUnitIncentives[unitType][unitId].topUp + totalIncentives / sumUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L675-L675"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n726:                     uint96 amount = uint96(amounts[i] / numServiceUnits);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L726-L726"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n915:         incentives[1] = (incentives[0] * tp.epochPoint.rewardTreasuryFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L915-L915"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n917:         incentives[2] = (incentives[0] * tp.unitPoints[0].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L917-L917"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n918:         incentives[3] = (incentives[0] * tp.unitPoints[1].rewardUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L918-L918"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n925:         uint256 numYears = (block.timestamp - timeLaunch) / ONE_YEAR;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L925-L925"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n935:             curInflationPerSecond = getInflationForYear(numYears) / ONE_YEAR;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L935-L935"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n951:         incentives[4] = (inflationPerEpoch * tp.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L951-L951"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1010:         numYears = (block.timestamp + curEpochLen - timeLaunch) / ONE_YEAR;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1010-L1010"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1019:             curInflationPerSecond = getInflationForYear(numYears) / ONE_YEAR;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1019-L1019"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1023:             curMaxBond = (inflationPerEpoch * nextEpochPoint.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1023-L1023"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1030:             curMaxBond = (curEpochLen * curInflationPerSecond * nextEpochPoint.epochPoint.maxBondFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1030-L1030"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1054:         incentives[5] = (inflationPerEpoch * tp.unitPoints[0].topUpUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1054-L1054"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1056:         incentives[6] = (inflationPerEpoch * tp.unitPoints[1].topUpUnitFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1056-L1056"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1213:                     reward += totalIncentives / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1213-L1213"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1224:                     topUp += totalIncentives / sumUnitIncentives;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1224-L1224"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n56:                 supplyCap += (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n93:                 supplyCap += (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n97:             inflationAmount = (supplyCap * maxMintCapFraction) / 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L97-L97"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Do not calculate constants",
      "description": "Due to how constant variables are implemented (replacements at compile-time), an expression assigned to a constant variable is recomputed each time that the variable is used, which wastes some gas.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n16:     uint256 public constant ONE_YEAR = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L16-L16"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Stack variable cost less while used in emiting event",
      "description": "Even if the variable is going to be used only one time, caching a state variable and use its cache in an emit would help you reduce the cost by at least ***9 gas***",
      "gasSavings": 600,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n// @audit `governor` is a state variable\n167:         emit MessageReceived(governor, data);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L167-L167"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit `supply` is a state variable\n235:         emit CreateProduct(token, productId, supply, priceLP, vesting);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L235-L235"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit `supply` is a state variable\n268:                 emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L268-L268"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit `supply` is a state variable\n342:             emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L342-L342"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n// @audit `epochCounter` is a state variable\n551:         emit TokenomicsParametersUpdateRequested(epochCounter + 1, _devsPerCapital, _codePerDev, _epsilonRate, _epochLen,\n552:             _veOLASThreshold);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L551-L552"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n// @audit `olas` is a state variable\n418:             emit Withdraw(olas, account, accountTopUps);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L418-L418"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Superfluous event fields",
      "description": "`block.timestamp` and `block.number` are added to event information by default so adding them manually wastes gas",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n367:         emit Deposit(account, amount, lockedBalance.endTime, depositType, block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L367-L367"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n530:         emit Withdraw(msg.sender, amount, block.timestamp);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L530-L530"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Events should be emitted outside of loops",
      "description": "Emitting an event has an overhead of **375 gas**, which will be incurred on every iteration of the loop. It is cheaper to `emit` only [once](https://github.com/ethereum/EIPs/blob/adad5968fd6de29902174e0cb51c8fc3dceb9ab5/EIPS/eip-1155.md?plain=1#L68) after the loop has finished.",
      "gasSavings": 1125,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit CloseProduct is emited inside this loop\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n256:             uint256 productId = productIds[i];\n257:             // Check if the product is still open by getting its supply amount\n258:             uint256 supply = mapBondProducts[productId].supply;\n259:             // The supply is greater than zero only if the product is active, otherwise it is already closed\n260:             if (supply > 0) {\n261:                 // Refund unused OLAS supply from the product if it was not used by the product completely\n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n263:                 address token = mapBondProducts[productId].token;\n264:                 delete mapBondProducts[productId];\n265: \n266:                 ids[numClosedProducts] = productIds[i];\n267:                 ++numClosedProducts;\n268:                 emit CloseProduct(token, productId, supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L255-L268"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit RedeemBond is emited inside this loop\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n358:             // Get the amount to pay and the maturity status\n359:             uint256 pay = mapUserBonds[bondIds[i]].payout;\n360:             bool matured = block.timestamp >= mapUserBonds[bondIds[i]].maturity;\n361: \n362:             // Revert if the bond does not exist or is not matured yet\n363:             if (pay == 0 || !matured) {\n364:                 revert BondNotRedeemable(bondIds[i]);\n365:             }\n366: \n367:             // Check that the msg.sender is the owner of the bond\n368:             if (mapUserBonds[bondIds[i]].account != msg.sender) {\n369:                 revert OwnerOnly(msg.sender, mapUserBonds[bondIds[i]].account);\n370:             }\n371: \n372:             // Increase the payout\n373:             payout += pay;\n374: \n375:             // Get the productId\n376:             uint256 productId = mapUserBonds[bondIds[i]].productId;\n377: \n378:             // Delete the Bond struct and release the gas\n379:             delete mapUserBonds[bondIds[i]];\n380:             emit RedeemBond(productId, msg.sender, bondIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L357-L380"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n//@audit DonatorBlacklistStatus is emited inside this loop\n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n68:             // Check for the zero address\n69:             if (accounts[i] == address(0)) {\n70:                 revert ZeroAddress();\n71:             }\n72:             // Set the account blacklisting status\n73:             mapBlacklistedDonators[accounts[i]] = statuses[i];\n74:             emit DonatorBlacklistStatus(accounts[i], statuses[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L67-L74"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Empty blocks should be removed or emit something",
      "description": "The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be `abstract` and the function signatures be added without any default implementation. If the block is an empty `if`-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (`if (x) {...} else if (y) {...} else {...}` => `if (!x) { if (y) {...} else {...} }`). Empty `receive()`/`fallback() payable` functions that are not used, can be removed to save deployment gas.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n572:     function checkAfterExecution(bytes32, bool) external {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L572-L572"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use `ERC721A` instead `ERC721`",
      "description": "`ERC721A` is an improvement standard for `ERC721` tokens. It was proposed by the Azuki team and used for developing their NFT collection. Compared with `ERC721`, `ERC721A` is a more gas-efficient standard to mint a lot of of NFTs simultaneously. It allows developers to mint multiple NFTs at the same gas price. This has been a great improvement due to Ethereum’s sky-rocketing gas fee. Reference: https://nextrope.com/erc721-vs-erc721a-2/.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n4: import \"../lib/solmate/src/tokens/ERC721.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L4-L4"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "`internal` functions only called once can be inlined to save gas",
      "description": "Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.",
      "gasSavings": 200,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n252:     function _processBridgeData(\n253:         bytes memory data,\n254:         address bridgeMediatorL2,\n255:         uint256 chainId\n256:     ) internal\n257:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L252-L257"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n337:     function _verifySchedule(bytes memory data, bytes4 selector) internal {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L337-L337"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n593:     function _balanceOfLocked(address account, uint64 ts) internal view returns (uint256 vBalance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L593-L593"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n129:     function _getUnitHash(uint256 unitId) internal view virtual returns (bytes32);\n130: \n131:     /// @dev Returns unit token URI.\n132:     /// @notice Expected multicodec: dag-pb; hashing function: sha2-256, with base16 encoding and leading CID_PREFIX removed.\n133:     /// @param unitId Unit Id.\n134:     /// @return Unit token URI string.\n135:     function tokenURI(uint256 unitId) public view virtual override returns (string memory) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L129-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n42:     function _checkDependencies(uint32[] memory dependencies, uint32 maxUnitId) internal virtual;\n43: \n44:     /// @dev Creates unit.\n45:     /// @param unitOwner Owner of the unit.\n46:     /// @param unitHash IPFS CID hash of the unit.\n47:     /// @param dependencies Set of unit dependencies in a sorted ascending order (unit Ids).\n48:     /// @return unitId The id of a minted unit.\n49:     function create(address unitOwner, bytes32 unitHash, uint32[] memory dependencies)\n50:         external virtual returns (uint256 unitId)\n51:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L42-L51"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n193:     function _getSubComponents(UnitType subcomponentsFromType, uint32 unitId) internal view virtual\n194:         returns (uint32[] memory subComponentIds);\n195: \n196:     /// @dev Calculates the set of subcomponent Ids.\n197:     /// @param subcomponentsFromType Type of the unit: component or agent.\n198:     /// @param unitIds Unit Ids.\n199:     /// @return subComponentIds Subcomponent Ids.\n200:     function _calculateSubComponents(UnitType subcomponentsFromType, uint32[] memory unitIds) internal view virtual\n201:         returns (uint32[] memory subComponentIds)\n202:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L193-L202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n200:     function _calculateSubComponents(UnitType subcomponentsFromType, uint32[] memory unitIds) internal view virtual\n201:         returns (uint32[] memory subComponentIds)\n202:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L200-L202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n45:     function _parseData(bytes memory data) internal pure\n46:         returns (address to, address fallbackHandler, address paymentToken, address payable paymentReceiver,\n47:             uint256 payment, uint256 nonce, bytes memory payload)\n48:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L45-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n687:     function _trackServiceDonations(address donator, uint256[] memory serviceIds, uint256[] memory amounts, uint256 curEpoch) internal {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L687-L687"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n831:     function _calculateIDF(\n832:         uint256 treasuryRewards,\n833:         uint256 numNewOwners\n834:     ) internal view returns (uint256 idf) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L831-L834"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Consider merging sequential for loops",
      "description": "Merging multiple `for` loops within a function in Solidity can enhance efficiency and reduce gas costs, especially when they share a common iterating variable or perform related operations. By minimizing redundant iterations over the same data set, execution becomes more cost-effective. However, while merging can optimize gas usage and simplify logic, it may also increase code complexity. Therefore, careful balance between optimization and maintainability is essential, along with thorough testing to ensure the refactored code behaves as expected.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n273:             for (uint256 i = 0; i < payload.length; ++i) {\n274:                 payload[i] = data[i + 4];\n275:             }\n276: \n277:             // Decode the requireToPassMessage payload: homeMediator (L2), mediatorPayload (need decoding), requestGasLimit\n278:             (address homeMediator, bytes memory mediatorPayload, ) = abi.decode(payload, (address, bytes, uint256));\n279:             // Check that the home mediator matches the L2 bridge mediator address\n280:             if (homeMediator != bridgeMediatorL2) {\n281:                 revert WrongL2BridgeMediator(homeMediator, bridgeMediatorL2);\n282:             }\n283: \n284:             // Check the L2 initial selector\n285:             functionSig = bytes4(mediatorPayload);\n286:             if (functionSig != PROCESS_MESSAGE_FROM_FOREIGN) {\n287:                 revert WrongSelector(functionSig, chainId);\n288:             }\n289: \n290:             // Copy the data without a selector\n291:             bytes memory bridgePayload = new bytes(mediatorPayload.length - SELECTOR_DATA_LENGTH);\n292:             for (uint256 i = 0; i < bridgePayload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L273-L292"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n340:         for (uint256 i = 0; i < payload.length; ++i) {\n341:             payload[i] = data[i + 4];\n342:         }\n343: \n344:         // Prepare the decoding data sets\n345:         address[] memory targets;\n346:         bytes[] memory callDatas;\n347:         if (selector == SCHEDULE) {\n348:             targets = new address[](1);\n349:             callDatas = new bytes[](1);\n350:             // Decode the data in the schedule function\n351:             (targets[0], , callDatas[0], , , ) =\n352:                 abi.decode(payload, (address, uint256, bytes, bytes32, bytes32, uint256));\n353:         } else {\n354:             // Decode the data in the scheduleBatch function\n355:             (targets, , callDatas, , , ) =\n356:             abi.decode(payload, (address[], uint256[], bytes[], bytes32, bytes32, uint256));\n357:         }\n358: \n359:         // Traverse all the schedule targets and selectors extracted from calldatas\n360:         for (uint i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L340-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n211:         for (uint32 i = 0; i < numUnits; ++i) {\n212:             // Get subcomponents for each unit Id based on the subcomponentsFromType\n213:             components[i] = _getSubComponents(subcomponentsFromType, unitIds[i]);\n214:             numComponents[i] = uint32(components[i].length);\n215:             maxNumComponents += numComponents[i];\n216:         }\n217: \n218:         // Lists of components are sorted, take unique values in ascending order\n219:         uint32[] memory allComponents = new uint32[](maxNumComponents);\n220:         // Processed component counter\n221:         uint32[] memory processedComponents = new uint32[](numUnits);\n222:         // Minimal component Id\n223:         uint32 minComponent;\n224:         // Overall component counter\n225:         uint32 counter;\n226:         // Iterate until we process all components, at the maximum of the sum of all the components in all units\n227:         for (counter = 0; counter < maxNumComponents; ++counter) {\n228:             // Index of a minimal component\n229:             uint32 minIdxComponent;\n230:             // Amount of components identified as the next minimal component number\n231:             uint32 numComponentsCheck;\n232:             uint32 tryMinComponent = type(uint32).max;\n233:             // Assemble an array of all first components from each component array\n234:             for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L211-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n402:         for (uint256 i = 0; i < numProducts; ++i) {\n403:             // Product is always active if its supply is not zero, and inactive otherwise\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n405:                 positions[i] = true;\n406:                 ++numSelectedProducts;\n407:             }\n408:         }\n409: \n410:         // Form active or inactive products index array\n411:         productIds = new uint256[](numSelectedProducts);\n412:         uint256 numPos;\n413:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L402-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n448:         for (uint256 i = 0; i < numBonds; ++i) {\n449:             // Check if the bond belongs to the account\n450:             // If not and the address is zero, the bond was redeemed or never existed\n451:             if (mapUserBonds[i].account == account) {\n452:                 // Check if requested bond is not matured but owned by the account address\n453:                 if (!matured ||\n454:                     // Or if the requested bond is matured, i.e., the bond maturity timestamp passed\n455:                     block.timestamp >= mapUserBonds[i].maturity)\n456:                 {\n457:                     positions[i] = true;\n458:                     ++numAccountBonds;\n459:                     // The payout is always bigger than zero if the bond exists\n460:                     payout += mapUserBonds[i].payout;\n461:                 }\n462:             }\n463:         }\n464: \n465:         // Form pending bonds index array\n466:         bondIds = new uint256[](numAccountBonds);\n467:         uint256 numPos;\n468:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L448-L468"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L758-L728"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1104:         for (uint256 i = 0; i < 2; ++i) {\n1105:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1106:         }\n1107: \n1108:         // Check the input data\n1109:         uint256[] memory lastIds = new uint256[](2);\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1104-L1110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1174:         for (uint256 i = 0; i < 2; ++i) {\n1175:             registriesSupply[i] = IToken(registries[i]).totalSupply();\n1176:         }\n1177: \n1178:         // Check the input data\n1179:         uint256[] memory lastIds = new uint256[](2);\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1174-L1180"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Reduce gas usage by moving to Solidity 0.8.19 or later",
      "description": "See [this](https://blog.soliditylang.org/2023/02/22/solidity-0.8.19-release-announcement/#preventing-dead-code-in-runtime-bytecode) link for the full details",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IErrors.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IErrors.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IErrorsRegistries.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IErrorsRegistries.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n2: pragma solidity ^0.8.15;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IErrorsTokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IErrorsTokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L2-L2"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n2: pragma solidity ^0.8.18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L2-L2"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate",
      "description": "Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (**20000 gas**) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save **~42 gas per access** due to [not having to recalculate the key's keccak256 hash](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0) (Gkeccak256 - 30 gas) and that calculation's associated stack operations.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n112:     mapping(address => LockedBalance) public mapLockedBalances;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L112-L112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n119:     mapping(address => PointVoting[]) public mapUserPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n219:     mapping(address => uint256) public mapOwnerRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L219-L219"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n221:     mapping(address => uint256) public mapOwnerTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L221-L221"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n227:     mapping(address => bool) public mapNewOwners;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n86:     mapping(address => uint256) public mapTokenReserves;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n88:     mapping(address => bool) public mapEnabledTokens;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L88-L88"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Optimize names to save gas",
      "description": "`public`/`external` function names and `public` member variable names can be optimized to save gas. See [this](https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9) link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save **128 gas** each during deployment, and renaming functions to have lower method IDs will save **22 gas** per call, [per sorted position shifted](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92)",
      "gasSavings": 858,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit changeMinter(address) ==> changeMinter_fs5(address),0000f941\n// @audit mint(address,uint256) ==> mint_Qgo(address,uint256),00001784\n// @audit inflationRemainder() ==> inflationRemainder_Ox(),00000011\n// @audit burn(uint256) ==> burn_HH(uint256),0000fd45\n// @audit decreaseAllowance(address,uint256) ==> decreaseAllowance_A2G(address,uint256),0000153c\n// @audit increaseAllowance(address,uint256) ==> increaseAllowance_Hi1(address,uint256),000074de\n17: contract OLAS is ERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L17-L17"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit mint(address,uint256) ==> mint_Qgo(address,uint256),00001784\n// @audit burn(uint256) ==> burn_HH(uint256),0000fd45\n18: contract BridgedERC20 is ERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n// @audit deposit(uint256) ==> deposit_z3l(uint256),0000a5e2\n// @audit depositTo(address,uint256) ==> depositTo_Lfv(address,uint256),00003ec5\n24: contract FxERC20ChildTunnel is FxBaseChildTunnel {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n// @audit withdraw(uint256) ==> withdraw_6BK(uint256),0000b293\n// @audit withdrawTo(address,uint256) ==> withdrawTo_X4p(address,uint256),0000b994\n24: contract FxERC20RootTunnel is FxBaseRootTunnel {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n// @audit processMessageFromRoot(uint256,address,bytes) ==> processMessageFromRoot_Q1C(uint256,address,bytes),0000b5ca\n5: interface IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n// @audit changeRootGovernor(address) ==> changeRootGovernor_r7d(address),0000349c\n46: contract FxGovernorTunnel is IFxMessageProcessor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n// @audit messageSender() ==> messageSender_Q7v(),0000e628\n5: interface IAMB {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n// @audit changeForeignGovernor(address) ==> changeForeignGovernor_Bc1W(address),00005dbc\n// @audit processMessageFromForeign(bytes) ==> processMessageFromForeign_6gl(bytes),00003cf2\n46: contract HomeMediator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L46-L46"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/interfaces/IERC20.sol\n\n// @audit balanceOf(address) ==> balanceOf_qzn(address),000030d8\n// @audit totalSupply() ==> totalSupply_B6A(),00005a30\n// @audit allowance(address,address) ==> allowance_IRG(address,address),00004b51\n// @audit approve(address,uint256) ==> approve_v2d(address,uint256),00004a01\n// @audit transfer(address,uint256) ==> transfer_z1l(address,uint256),0000c956\n// @audit transferFrom(address,address,uint256) ==> transferFrom_78S(address,address,uint256),00008711\n// @audit mint(address,uint256) ==> mint_Qgo(address,uint256),00001784\n// @audit burn(uint256) ==> burn_HH(uint256),0000fd45\n5: interface IERC20 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/interfaces/IERC20.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n// @audit state(uint256) ==> state_L1N(uint256),000099af\n6: interface IGovernor {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L6-L6"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n// @audit changeGovernorCheckProposalId(uint256) ==> changeGovernorCheckProposalId_0A5(uint256),000048b1\n// @audit setTargetSelectorChainIds(address[],bytes4[],uint256[],bool[]) ==> setTargetSelectorChainIds_gCC(address[],bytes4[],uint256[],bool[]),0000fe7d\n// @audit setBridgeMediatorChainIds(address[],address[],uint256[]) ==> setBridgeMediatorChainIds_Od3(address[],address[],uint256[]),00005444\n// @audit pause() ==> pause_yiS(),00002a4b\n// @audit unpause() ==> unpause_88B(),000051b7\n// @audit checkAfterExecution(bytes32,bool) ==> checkAfterExecution_9m9(bytes32,bool),000073e2\n// @audit getTargetSelectorChainId(address,bytes4,uint256) ==> getTargetSelectorChainId_ydL(address,bytes4,uint256),00000943\n// @audit getBridgeMediatorChainId(address) ==> getBridgeMediatorChainId_0jg(address),00001aa9\n88: contract GuardCM {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L88-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n// @audit getLastUserPoint(address) ==> getLastUserPoint_FaO(address),00001367\n// @audit getNumUserPoints(address) ==> getNumUserPoints_x1J(address),000010c8\n// @audit getUserPoint(address,uint256) ==> getUserPoint_Ko9(address,uint256),0000d010\n// @audit checkpoint() ==> checkpoint_w89(),00005475\n// @audit depositFor(address,uint256) ==> depositFor_2tO(address,uint256),0000dc17\n// @audit createLock(uint256,uint256) ==> createLock_N4f(uint256,uint256),0000d4ad\n// @audit createLockFor(address,uint256,uint256) ==> createLockFor_Q7s(address,uint256,uint256),0000b720\n// @audit increaseAmount(uint256) ==> increaseAmount_j3x(uint256),0000841c\n// @audit increaseUnlockTime(uint256) ==> increaseUnlockTime_IbM(uint256),00000fe0\n// @audit withdraw() ==> withdraw_wdp(),0000af32\n// @audit lockedEnd(address) ==> lockedEnd_a5V(address),0000cd71\n// @audit balanceOfAt(address,uint256) ==> balanceOfAt_Kph(address,uint256),00008aaa\n// @audit totalSupplyAt(uint256) ==> totalSupplyAt_n5S(uint256),00000e4e\n// @audit totalSupplyLockedAtT(uint256) ==> totalSupplyLockedAtT_q47(uint256),0000ceb8\n// @audit totalSupplyLocked() ==> totalSupplyLocked_qK1(),000066cd\n86: contract veOLAS is IErrors, IVotes, IERC20, IERC165 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L86-L86"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit totalNumPoints() ==> totalNumPoints_J9f(),0000702f\n// @audit mapSupplyPoints(uint256) ==> mapSupplyPoints_G6D(uint256),00000e2a\n// @audit mapSlopeChanges(uint64) ==> mapSlopeChanges_y4a(uint64),00000dcf\n// @audit getLastUserPoint(address) ==> getLastUserPoint_FaO(address),00001367\n// @audit getNumUserPoints(address) ==> getNumUserPoints_x1J(address),000010c8\n// @audit getUserPoint(address,uint256) ==> getUserPoint_Ko9(address,uint256),0000d010\n// @audit getPastVotes(address,uint256) ==> getPastVotes_LaF(address,uint256),00004234\n// @audit balanceOf(address) ==> balanceOf_qzn(address),000030d8\n// @audit balanceOfAt(address,uint256) ==> balanceOfAt_Kph(address,uint256),00008aaa\n// @audit lockedEnd(address) ==> lockedEnd_a5V(address),0000cd71\n// @audit getVotes(address) ==> getVotes_o6o(address),0000ac88\n// @audit totalSupply() ==> totalSupply_B6A(),00005a30\n// @audit totalSupplyAt(uint256) ==> totalSupplyAt_n5S(uint256),00000e4e\n// @audit totalSupplyLockedAtT(uint256) ==> totalSupplyLockedAtT_q47(uint256),0000ceb8\n// @audit totalSupplyLocked() ==> totalSupplyLocked_qK1(),000066cd\n// @audit getPastTotalSupply(uint256) ==> getPastTotalSupply_5Nt(uint256),0000e587\n// @audit supportsInterface(bytes4) ==> supportsInterface_l2D(bytes4),0000709f\n// @audit allowance(address,address) ==> allowance_IRG(address,address),00004b51\n// @audit delegates(address) ==> delegates_c7I(address),0000fd4a\n13: interface IVEOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n// @audit totalNumPoints() ==> totalNumPoints_J9f(),0000702f\n// @audit mapSupplyPoints(uint256) ==> mapSupplyPoints_G6D(uint256),00000e2a\n// @audit mapSlopeChanges(uint64) ==> mapSlopeChanges_y4a(uint64),00000dcf\n// @audit getLastUserPoint(address) ==> getLastUserPoint_FaO(address),00001367\n// @audit getNumUserPoints(address) ==> getNumUserPoints_x1J(address),000010c8\n// @audit getUserPoint(address,uint256) ==> getUserPoint_Ko9(address,uint256),0000d010\n// @audit getVotes(address) ==> getVotes_o6o(address),0000ac88\n// @audit getPastVotes(address,uint256) ==> getPastVotes_LaF(address,uint256),00004234\n// @audit balanceOf(address) ==> balanceOf_qzn(address),000030d8\n// @audit balanceOfAt(address,uint256) ==> balanceOfAt_Kph(address,uint256),00008aaa\n// @audit lockedEnd(address) ==> lockedEnd_a5V(address),0000cd71\n// @audit totalSupply() ==> totalSupply_B6A(),00005a30\n// @audit totalSupplyAt(uint256) ==> totalSupplyAt_n5S(uint256),00000e4e\n// @audit totalSupplyLockedAtT(uint256) ==> totalSupplyLockedAtT_q47(uint256),0000ceb8\n// @audit totalSupplyLocked() ==> totalSupplyLocked_qK1(),000066cd\n// @audit getPastTotalSupply(uint256) ==> getPastTotalSupply_5Nt(uint256),0000e587\n// @audit supportsInterface(bytes4) ==> supportsInterface_l2D(bytes4),0000709f\n// @audit transfer(address,uint256) ==> transfer_z1l(address,uint256),0000c956\n// @audit approve(address,uint256) ==> approve_v2d(address,uint256),00004a01\n// @audit transferFrom(address,address,uint256) ==> transferFrom_78S(address,address,uint256),00008711\n// @audit allowance(address,address) ==> allowance_IRG(address,address),00004b51\n// @audit delegates(address) ==> delegates_c7I(address),0000fd4a\n// @audit delegate(address) ==> delegate_l8r(address),00006e08\n// @audit delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) ==> delegateBySig_Z7z(address,uint256,uint256,uint8,bytes32,bytes32),000082e1\n130: contract wveOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L130-L130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n// @audit calculateSubComponents(uint32[]) ==> calculateSubComponents_Sl2(uint32[]),0000df2e\n9: contract AgentRegistry is UnitRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit pause() ==> pause_yiS(),00002a4b\n// @audit unpause() ==> unpause_88B(),000051b7\n8: abstract contract GenericManager is IErrorsRegistries {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit changeManager(address) ==> changeManager_HUx(address),0000a41e\n// @audit exists(uint256) ==> exists_r1M(uint256),0000e2c6\n// @audit setBaseURI(string) ==> setBaseURI_7bZ(string),00008326\n// @audit tokenByIndex(uint256) ==> tokenByIndex_1fT(uint256),0000fbfa\n9: abstract contract GenericRegistry is IErrorsRegistries, ERC721 {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n// @audit create(address,bytes32,uint32[]) ==> create_okH(address,bytes32,uint32[]),00008d31\n// @audit updateHash(address,uint256,bytes32) ==> updateHash_E13(address,uint256,bytes32),0000d8e6\n// @audit getUnit(uint256) ==> getUnit_RUE(uint256),0000f97b\n// @audit getDependencies(uint256) ==> getDependencies_0vC(uint256),0000e511\n// @audit getUpdatedHashes(uint256) ==> getUpdatedHashes_uAP(uint256),0000c6a5\n// @audit getLocalSubComponents(uint256) ==> getLocalSubComponents_c7a(uint256),0000b0da\n8: abstract contract UnitRegistry is GenericRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L8-L8"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n// @audit create(address,bytes32,uint32[]) ==> create_okH(address,bytes32,uint32[]),00008d31\n// @audit updateHash(address,uint256,bytes32) ==> updateHash_E13(address,uint256,bytes32),0000d8e6\n// @audit getLocalSubComponents(uint256) ==> getLocalSubComponents_c7a(uint256),0000b0da\n// @audit calculateSubComponents(uint32[]) ==> calculateSubComponents_Sl2(uint32[]),0000df2e\n// @audit getUpdatedHashes(uint256) ==> getUpdatedHashes_uAP(uint256),0000c6a5\n// @audit totalSupply() ==> totalSupply_B6A(),00005a30\n5: interface IRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n// @audit createProxyWithNonce(address,bytes,uint256) ==> createProxyWithNonce_41C(address,bytes,uint256),0000c109\n5: interface IGnosisSafeProxyFactory {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n// @audit create(address[],uint256,bytes) ==> create_Uf12(address[],uint256,bytes),0000443d\n24: contract GnosisSafeMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n// @audit getOwners() ==> getOwners_Rlw(),00007f89\n// @audit getThreshold() ==> getThreshold_C5i(),00003889\n5: interface IGnosisSafe {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n// @audit create(address[],uint256,bytes) ==> create_Uf12(address[],uint256,bytes),0000443d\n50: contract GnosisSafeSameAddressMultisig {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit changeManagers(address,address) ==> changeManagers_FKK(address,address),000067db\n// @audit changeBondCalculator(address) ==> changeBondCalculator_XiO(address),0000d742\n// @audit create(address,uint256,uint256,uint256) ==> create_83f(address,uint256,uint256,uint256),00008118\n// @audit close(uint256[]) ==> close_anB(uint256[]),00001790\n// @audit deposit(uint256,uint256) ==> deposit_K8s(uint256,uint256),0000a5f4\n// @audit redeem(uint256[]) ==> redeem_H2K(uint256[]),0000038e\n// @audit getProducts(bool) ==> getProducts_ZiH(bool),0000be0f\n// @audit isActiveProduct(uint256) ==> isActiveProduct_t1f(uint256),000089c9\n// @audit getBonds(address,bool) ==> getBonds_f3Q(address,bool),0000781b\n// @audit getBondStatus(uint256) ==> getBondStatus_F44(uint256),00004876\n// @audit getCurrentPriceLP(address) ==> getCurrentPriceLP_4lN(address),0000aad2\n62: contract Depository is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L62-L62"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit changeManagers(address,address) ==> changeManagers_FKK(address,address),000067db\n// @audit claimOwnerIncentives(uint256[],uint256[]) ==> claimOwnerIncentives_XrZ(uint256[],uint256[]),00000601\n11: contract Dispenser is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit setDonatorsStatuses(address[],bool[]) ==> setDonatorsStatuses_y1V(address[],bool[]),00009feb\n// @audit isDonatorBlacklisted(address) ==> isDonatorBlacklisted_TuV(address),000070cb\n20: contract DonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n// @audit calculatePayoutOLAS(uint256,uint256) ==> calculatePayoutOLAS_7dW(uint256,uint256),0000d360\n// @audit getCurrentPriceLP(address) ==> getCurrentPriceLP_4lN(address),0000aad2\n20: contract GenericBondCalculator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n// @audit initializeTokenomics(address,address,address,address,address,uint256,address,address,address,address) ==> initializeTokenomics_hg(address,address,address,address,address,uint256,address,address,address,address),0000a686\n// @audit tokenomicsImplementation() ==> tokenomicsImplementation_I6E(),0000554c\n// @audit changeTokenomicsImplementation(address) ==> changeTokenomicsImplementation_8ig(address),000094fd\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit changeManagers(address,address,address) ==> changeManagers_9rh(address,address,address),00000915\n// @audit changeRegistries(address,address,address) ==> changeRegistries_reM(address,address,address),00009b19\n// @audit changeDonatorBlacklist(address) ==> changeDonatorBlacklist_22x(address),0000b8d2\n// @audit changeTokenomicsParameters(uint256,uint256,uint256,uint256,uint256) ==> changeTokenomicsParameters_kai(uint256,uint256,uint256,uint256,uint256),0000c7fe\n// @audit changeIncentiveFractions(uint256,uint256,uint256,uint256,uint256) ==> changeIncentiveFractions_69r(uint256,uint256,uint256,uint256,uint256),000056da\n// @audit reserveAmountForBondProgram(uint256) ==> reserveAmountForBondProgram_y6U(uint256),0000d62c\n// @audit refundFromBondProgram(uint256) ==> refundFromBondProgram_ffT(uint256),0000485f\n// @audit trackServiceDonations(address,uint256[],uint256[],uint256) ==> trackServiceDonations_4n1V(address,uint256[],uint256[],uint256),0000cecd\n// @audit checkpoint() ==> checkpoint_w89(),00005475\n// @audit accountOwnerIncentives(address,uint256[],uint256[]) ==> accountOwnerIncentives_nr4(address,uint256[],uint256[]),0000e8ee\n// @audit getOwnerIncentives(address,uint256[],uint256[]) ==> getOwnerIncentives_7ep(address,uint256[],uint256[]),0000a5ee\n// @audit getInflationPerEpoch() ==> getInflationPerEpoch_FeQ(),000041ae\n// @audit getUnitPoint(uint256,uint256) ==> getUnitPoint_1dt(uint256,uint256),0000fda3\n// @audit getIDF(uint256) ==> getIDF_bfx(uint256),000082ab\n// @audit getLastIDF() ==> getLastIDF_B6N(),0000b7ab\n118: contract Tokenomics is TokenomicsConstants, IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L118-L118"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n// @audit getSupplyCapForYear(uint256) ==> getSupplyCapForYear_VbN(uint256),00009e9b\n// @audit getInflationForYear(uint256) ==> getInflationForYear_zge(uint256),000083d1\n9: abstract contract TokenomicsConstants {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n// @audit changeOwner(address) ==> changeOwner_I6k(address),00008de0\n// @audit changeManagers(address,address,address) ==> changeManagers_9rh(address,address,address),00000915\n// @audit changeMinAcceptedETH(uint256) ==> changeMinAcceptedETH_Ufj(uint256),00009d77\n// @audit depositServiceDonationsETH(uint256[],uint256[]) ==> depositServiceDonationsETH_H3c(uint256[],uint256[]),0000c8d2\n// @audit withdraw(address,uint256,address) ==> withdraw_o4t(address,uint256,address),00006350\n// @audit withdrawToAccount(address,uint256,uint256) ==> withdrawToAccount_8tB(address,uint256,uint256),00007d13\n// @audit rebalanceTreasury(uint256) ==> rebalanceTreasury_d4Q(uint256),0000af72\n// @audit drainServiceSlashedFunds() ==> drainServiceSlashedFunds_M3G(),0000bcdf\n// @audit enableToken(address) ==> enableToken_GeX(address),00007237\n// @audit disableToken(address) ==> disableToken_A2v(address),000029ec\n// @audit isEnabled(address) ==> isEnabled_NzM(address),000088e1\n// @audit pause() ==> pause_yiS(),00002a4b\n// @audit unpause() ==> unpause_88B(),000051b7\n39: contract Treasury is IErrorsTokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IDonatorBlacklist.sol\n\n// @audit isDonatorBlacklisted(address) ==> isDonatorBlacklisted_TuV(address),000070cb\n5: interface IDonatorBlacklist {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IDonatorBlacklist.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IGenericBondCalculator.sol\n\n// @audit calculatePayoutOLAS(uint256,uint256) ==> calculatePayoutOLAS_7dW(uint256,uint256),0000d360\n// @audit getCurrentPriceLP(address) ==> getCurrentPriceLP_4lN(address),0000aad2\n5: interface IGenericBondCalculator {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IGenericBondCalculator.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IOLAS.sol\n\n// @audit mint(address,uint256) ==> mint_Qgo(address,uint256),00001784\n// @audit timeLaunch() ==> timeLaunch_HgX(),00004d54\n4: interface IOLAS {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IOLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n// @audit exists(uint256) ==> exists_r1M(uint256),0000e2c6\n// @audit slashedFunds() ==> slashedFunds_Vib(),0000621d\n// @audit drain() ==> drain_ZaQ(),00000402\n5: interface IServiceRegistry {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IToken.sol\n\n// @audit balanceOf(address) ==> balanceOf_qzn(address),000030d8\n// @audit ownerOf(uint256) ==> ownerOf_skz(uint256),0000686c\n// @audit totalSupply() ==> totalSupply_B6A(),00005a30\n// @audit transfer(address,uint256) ==> transfer_z1l(address,uint256),0000c956\n// @audit allowance(address,address) ==> allowance_IRG(address,address),00004b51\n// @audit approve(address,uint256) ==> approve_v2d(address,uint256),00004a01\n// @audit transferFrom(address,address,uint256) ==> transferFrom_78S(address,address,uint256),00008711\n5: interface IToken {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IToken.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITokenomics.sol\n\n// @audit effectiveBond() ==> effectiveBond_Cnw(),00001759\n// @audit checkpoint() ==> checkpoint_w89(),00005475\n// @audit trackServiceDonations(address,uint256[],uint256[],uint256) ==> trackServiceDonations_4n1V(address,uint256[],uint256[],uint256),0000cecd\n// @audit reserveAmountForBondProgram(uint256) ==> reserveAmountForBondProgram_y6U(uint256),0000d62c\n// @audit refundFromBondProgram(uint256) ==> refundFromBondProgram_ffT(uint256),0000485f\n// @audit accountOwnerIncentives(address,uint256[],uint256[]) ==> accountOwnerIncentives_nr4(address,uint256[],uint256[]),0000e8ee\n// @audit getLastIDF() ==> getLastIDF_B6N(),0000b7ab\n// @audit serviceRegistry() ==> serviceRegistry_VN(),0000f310\n5: interface ITokenomics {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITokenomics.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/ITreasury.sol\n\n// @audit depositServiceDonationsETH(uint256[],uint256[]) ==> depositServiceDonationsETH_H3c(uint256[],uint256[]),0000c8d2\n// @audit isEnabled(address) ==> isEnabled_NzM(address),000088e1\n// @audit withdrawToAccount(address,uint256,uint256) ==> withdrawToAccount_8tB(address,uint256,uint256),00007d13\n// @audit rebalanceTreasury(uint256) ==> rebalanceTreasury_d4Q(uint256),0000af72\n5: interface ITreasury {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/ITreasury.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n// @audit totalSupply() ==> totalSupply_B6A(),00005a30\n// @audit token0() ==> token0_Jme(),00009d31\n// @audit token1() ==> token1_h7i(),00001e7d\n// @audit getReserves() ==> getReserves_j97(),00006651\n5: interface IUniswapV2Pair {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L5-L5"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IVotingEscrow.sol\n\n// @audit getVotes(address) ==> getVotes_o6o(address),0000ac88\n5: interface IVotingEscrow {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IVotingEscrow.sol#L5-L5"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Not using the named return variables anywhere in the function is confusing",
      "description": "Consider changing the variable to be an unnamed one, since the variable is never assigned, nor is it returned by name. If the optimizer is not turned on, leaving the code as it is will also waste gas for the stack variable.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n// @audit numDependencies\n// @audit dependencies\n160:     function getDependencies(uint256 unitId) external view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n// @audit numHashes\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n// @audit priceLP\n491:     function getCurrentPriceLP(address token) external view returns (uint256 priceLP) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L491-L491"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Constructors can be marked `payable`",
      "description": "Payable functions cost less gas to execute, since the compiler does not have to add extra checks to ensure that a payment wasn't provided.A constructor can safely be marked as payable, since only the deployer would be able to pass funds, and the project itself would not pass any funds.",
      "gasSavings": 483,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/GovernorOLAS.sol\n\n16:     constructor(\n17:         IVotes governanceToken,\n18:         TimelockController timelock,\n19:         uint256 initialVotingDelay,\n20:         uint256 initialVotingPeriod,\n21:         uint256 initialProposalThreshold,\n22:         uint256 quorumFraction\n23:     )\n24:         Governor(\"Governor OLAS\")\n25:         GovernorSettings(initialVotingDelay, initialVotingPeriod, initialProposalThreshold)\n26:         GovernorVotes(governanceToken)\n27:         GovernorVotesQuorumFraction(quorumFraction)\n28:         GovernorTimelockControl(timelock)\n29:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/GovernorOLAS.sol#L16-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n35:     constructor() ERC20(\"Autonolas\", \"OLAS\", 18) {\n36:         owner = msg.sender;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L35-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/Timelock.sol\n\n10:     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)\n11:         TimelockController(minDelay, proposers, executors, msg.sender)\n12:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/Timelock.sol#L10-L12"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n25:         owner = msg.sender;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L25"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n37:     constructor(address _fxChild, address _childToken, address _rootToken) FxBaseChildTunnel(_fxChild) {\n38:         // Check for zero addresses\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L37-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n38:     constructor(address _checkpointManager, address _fxRoot, address _childToken, address _rootToken)\n39:         FxBaseRootTunnel(_checkpointManager, _fxRoot)\n40:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L38-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n62:     constructor(address _fxChild, address _rootGovernor) {\n63:         // Check fo zero addresses\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L62-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n62:     constructor(address _AMBContractProxyHome, address _foreignGovernor) {\n63:         // Check fo zero addresses\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L62-L63"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n138:     constructor(\n139:         address _timelock,\n140:         address _multisig,\n141:         address _governor\n142:     ) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L138-L142"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n132:     constructor(address _token, string memory _name, string memory _symbol)\n133:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L132-L133"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n145:     constructor(address _ve, address _token) {\n146:         // Check for the zero address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L145-L146"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n20:     constructor(string memory _name, string memory _symbol, string memory _baseURI, address _componentRegistry)\n21:         UnitRegistry(UnitType.Agent)\n22:         ERC721(_name, _symbol)\n23:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L20-L23"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n16:     constructor(string memory _name, string memory _symbol, string memory _baseURI)\n17:         UnitRegistry(UnitType.Component)\n18:         ERC721(_name, _symbol)\n19:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L16-L19"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n15:     constructor(address _componentRegistry, address _agentRegistry) {\n16:         componentRegistry = _componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L15-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n35:     constructor(UnitType _unitType) {\n36:         unitType = _unitType;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L35-L36"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n37:     constructor (address payable _gnosisSafe, address _gnosisSafeProxyFactory) {\n38:         gnosisSafe = _gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L37-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n60:     constructor(bytes32 _proxyHash) {\n61:         if (_proxyHash == bytes32(0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L60-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n106:     constructor(address _olas, address _tokenomics, address _treasury, address _bondCalculator)\n107:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L106-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n30:     constructor(address _tokenomics, address _treasury)\n31:     {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L30-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n30:     constructor() {\n31:         owner = msg.sender;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L30-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n29:     constructor(address _olas, address _tokenomics) {\n30:         // Check for at least one zero contract address\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L29-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n232:     constructor()\n233:         TokenomicsConstants()\n234:     {}\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L232-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n33:     constructor(address tokenomics, bytes memory tokenomicsData) {\n34:         // Check for the zero address, since the delegatecall works even with the zero one\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L33-L34"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Using `private` rather than `public` for constants, saves gas",
      "description": "If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that [returns a tuple](https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178) of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n24:     uint256 public constant tenYearSupplyCap = 1_000_000_000e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n26:     uint256 public constant maxMintCapFraction = 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n103:     bytes4 public constant PROCESS_MESSAGE_FROM_FOREIGN = bytes4(keccak256(bytes(\"processMessageFromForeign(bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n105:     bytes4 public constant SEND_MESSAGE_TO_CHILD = bytes4(keccak256(bytes(\"sendMessageToChild(address,bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n111:     uint256 public constant MIN_SCHEDULE_DATA_LENGTH = 260;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n113:     uint256 public constant SELECTOR_DATA_LENGTH = 4;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n115:     uint256 public constant MIN_GNOSIS_PAYLOAD_LENGTH = 292;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n117:     uint256 public constant MIN_POLYGON_PAYLOAD_LENGTH = 164;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n105:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n136:     string public constant name = \"Voting Escrow OLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n138:     string public constant symbol = \"veOLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L138-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n140:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n13:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n10:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n33:     string public constant CID_PREFIX = \"f01701220\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n26:     bytes4 public constant GNOSIS_SAFE_SETUP_SELECTOR = 0xb63e800d;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n28:     uint256 public constant DEFAULT_DATA_LENGTH = 144;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n75:     uint256 public constant MIN_VESTING = 1 days;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n77:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n11:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n14:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n16:     uint256 public constant ONE_YEAR = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n18:     uint256 public constant MIN_EPOCH_LENGTH = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n20:     uint256 public constant MIN_PARAM_VALUE = 1e14;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n28:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Remove or replace unused state variables",
      "description": "Saves a storage slot. If the variable is assigned a non-zero value, saves Gsset (**20000 gas**). If it's assigned a zero value, saves Gsreset (**2900 gas**). If the variable remains unassigned, there is no gas savings unless the variable is `public`, in which case the compiler-generated non-payable getter deployment cost is saved. If the state variable is overriding an interface's public function, mark the variable as `constant` or `immutable` so that it does not use a storage slot",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n217:     mapping(uint256 => uint256) public mapServiceAmounts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L217-L217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n219:     mapping(address => uint256) public mapOwnerRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L219-L219"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n221:     mapping(address => uint256) public mapOwnerTopUps;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L221-L221"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Avoid updating storage when the value hasn't changed to save gas",
      "description": "If the old value is equal to the new value, not re-storing the value will avoid a Gsreset (**2900 gas**), potentially at the expense of a Gcoldsload (**2100 gas**) or a Gwarmaccess (**100 gas**)",
      "gasSavings": 8800,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n170:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n171:     function getUpdatedHashes(uint256 unitId) external view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n143:     function changeManagers(address _tokenomics, address _treasury) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L143-L143"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n163:     function changeBondCalculator(address _bondCalculator) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L163-L163"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n64:     function changeManagers(address _tokenomics, address _treasury) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L64-L64"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n423:     function changeManagers(address _treasury, address _depository, address _dispenser) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L423-L423"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n450:     function changeRegistries(address _componentRegistry, address _agentRegistry, address _serviceRegistry) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L450-L450"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n474:     function changeDonatorBlacklist(address _donatorBlacklist) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L474-L474"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n497:     function changeTokenomicsParameters(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L497-L497"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n562:     function changeIncentiveFractions(\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n156:     function changeManagers(address _tokenomics, address _depository, address _dispenser) external {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L156-L156"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use shift Right instead of division if possible to save gas",
      "description": " ",
      "gasSavings": 20,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n565:             uint256 mid = (minPointNumber + maxPointNumber + 1) / 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L565-L565"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use shift Left instead of multiplication if possible to save gas",
      "description": " ",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n101:     uint256 internal constant MAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n103:     int128 internal constant IMAXTIME = 4 * 365 * 86400;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L103-L103"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead",
      "description": "> When using elements that are smaller than 32 bytes, your contract's gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nEach operation involving a `uint8` costs an extra [** 22 - 28 gas **](https://gist.github.com/IllIllI000/9388d20c70f9a4632eb3ca7836f54977) (depending on whether the other operand is also a variable of type `uint8`) as compared to ones involving `uint256`, due to the compiler having to clear the higher bits of the memory word before operating on the `uint8`, as well as the associated stack operations of doing so. Use a larger size then downcast where needed",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n//@audit `_decimals` is `uint8`\n24:     constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol, _decimals) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `value` is `uint96`\n127:             uint96 value;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L127-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit `payloadLength` is `uint32`\n128:             uint32 payloadLength;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `value` is `uint96`\n127:             uint96 value;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L127-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit `payloadLength` is `uint32`\n128:             uint32 payloadLength;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit `payloadLength` is `uint32`\n214:             uint32 payloadLength;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `curSupply` is `uint128`\n177:         uint128 curSupply\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L177-L177"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `oldDSlope` is `int128`\n181:         int128 oldDSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L181-L181"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `newDSlope` is `int128`\n182:         int128 newDSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L182-L182"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `lastCheckpoint` is `uint64`\n217:         uint64 lastCheckpoint = lastPoint.ts;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L217-L217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `tStep` is `uint64`\n231:             uint64 tStep = (lastCheckpoint / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `dSlope` is `int128`\n239:                 int128 dSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L239-L239"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `ts` is `uint64`\n593:     function _balanceOfLocked(address account, uint64 ts) internal view returns (uint256 vBalance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L593-L593"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `ts` is `uint64`\n690:     function _supplyLockedAt(PointVoting memory lastPoint, uint64 ts) internal view returns (uint256 vSupply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L690-L690"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `tStep` is `uint64`\n692:         uint64 tStep = (lastPoint.ts / WEEK) * WEEK;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L692-L692"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `dSlope` is `int128`\n698:             int128 dSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L698-L698"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit `v` is `uint8`\n800:     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L800-L800"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `ts` is `uint64`\n26:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `slopeChange` is `int128`\n26:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `ts` is `uint64`\n170:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `slopeChange` is `int128`\n170:     function mapSlopeChanges(uint64 ts) external view returns (int128 slopeChange) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L170-L170"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n//@audit `` is `uint8`\n328:     function delegateBySig(address, uint256, uint256, uint8, bytes32, bytes32) external\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L328-L328"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `` is `uint32`\n31:     function _checkDependencies(uint32[] memory dependencies, uint32) internal virtual override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `componentTotalSupply` is `uint32`\n38:         uint32 componentTotalSupply = uint32(IRegistry(componentRegistry).totalSupply());\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `lastId` is `uint32`\n39:         uint32 lastId;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n//@audit `unitId` is `uint32`\n54:     function _getSubComponents(UnitType subcomponentsFromType, uint32 unitId) internal view virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L54-L54"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `maxComponentId` is `uint32`\n27:     function _checkDependencies(uint32[] memory dependencies, uint32 maxComponentId) internal virtual override {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `lastId` is `uint32`\n28:         uint32 lastId;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n//@audit `componentId` is `uint32`\n41:     function _getSubComponents(UnitType, uint32 componentId) internal view virtual override\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `maxUnitId` is `uint32`\n42:     function _checkDependencies(uint32[] memory dependencies, uint32 maxUnitId) internal virtual;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L42-L42"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is `uint32`\n193:     function _getSubComponents(UnitType subcomponentsFromType, uint32 unitId) internal view virtual\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L193-L193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `numUnits` is `uint32`\n203:         uint32 numUnits = uint32(unitIds.length);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L203-L203"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `maxNumComponents` is `uint32`\n210:         uint32 maxNumComponents;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L210-L210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `i` is `uint32`\n211:         for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `minComponent` is `uint32`\n223:         uint32 minComponent;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L223-L223"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `counter` is `uint32`\n225:         uint32 counter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L225-L225"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `minIdxComponent` is `uint32`\n229:             uint32 minIdxComponent;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L229-L229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `numComponentsCheck` is `uint32`\n231:             uint32 numComponentsCheck;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `tryMinComponent` is `uint32`\n232:             uint32 tryMinComponent = type(uint32).max;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `i` is `uint32`\n234:             for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L234-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `i` is `uint32`\n262:         for (uint32 i = 0; i < counter; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `amount` is `uint96`\n726:                     uint96 amount = uint96(amounts[i] / numServiceUnits);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L726-L726"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n//@audit `reserve0` is `uint112`\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n//@audit `reserve1` is `uint112`\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IUniswapV2Pair.sol\n\n//@audit `blockTimestampLast` is `uint32`\n9:     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IUniswapV2Pair.sol#L9-L9"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "The use of a logical AND in place of double if is slightly less gas efficient in instances where there isn't a corresponding else statement for the given if statement",
      "description": "Using a double if statement instead of logical AND (&&) can provide similar short-circuiting behavior whereas double if is slightly more efficient.",
      "gasSavings": 165,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n519:             if (chainId != 100 && chainId != 137 && chainId != 10200 && chainId != 80001) {\n520:                 revert L2ChainIdNotSupported(chainId);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L519-L520"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n188:             if (oldLocked.endTime > block.timestamp && oldLocked.amount > 0) {\n189:                 uOld.slope = int128(oldLocked.amount) / IMAXTIME;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L188-L189"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n192:             if (newLocked.endTime > block.timestamp && newLocked.amount > 0) {\n193:                 uNew.slope = int128(newLocked.amount) / IMAXTIME;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L192-L193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n306:             if (newLocked.endTime > block.timestamp && newLocked.endTime > oldLocked.endTime) {\n307:                 newDSlope -= uNew.slope; // old slope disappeared at this point\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L306-L307"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n215:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n216:             balance = IVEOLAS(ve).getPastVotes(account, blockNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L215-L216"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n235:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n236:             balance = IVEOLAS(ve).balanceOfAt(account, blockNumber);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L235-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n750:                         if (topUpEligible && incentiveFlags[unitType + 2]) {\n751:                             mapUnitIncentives[unitType][serviceUnitIds[j]].pendingRelativeTopUp += amount;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L750-L751"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n801:         if (bList != address(0) && IDonatorBlacklist(bList).isDonatorBlacklisted(donator)) {\n802:             revert DonatorBlacklisted(donator);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L801-L802"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1139:                 _finalizeIncentivesForUnitId(lastEpoch, unitTypes[i], unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1138-L1139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n1207:                 // Get the overall amount of unit rewards for the component's last epoch\n1208:                 // reward = (pendingRelativeReward * rewardUnitFraction) / 100\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1206-L1209"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n402:         if (accountRewards > 0 && amountETHFromServices >= accountRewards) {\n403:             amountETHFromServices -= accountRewards;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L402-L403"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "State variables only set in the constructor should be declared `immutable`",
      "description": "Avoids a Gsset(** 20000 gas**) in the constructor, and replaces the first access in each transaction(Gcoldsload - ** 2100 gas **) and each access thereafter(Gwarmacces - ** 100 gas **) with a`PUSH32`(** 3 gas **).\n\nWhile`string`s are not value types, and therefore cannot be`immutable` / `constant` if not hard - coded outside of the constructor, the same behavior can be achieved by making the current contract `abstract` with `virtual` functions for the`string` accessors, and having a child contract override the functions with the hard - coded implementation - specific values.",
      "gasSavings": 4194,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n135:         name = _name;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L135-L135"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n136:         symbol = _symbol;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L136-L136"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Stack variable used as a cheaper cache for a state variable is only used once",
      "description": "If the variable is only accessed once, it's cheaper to use the state variable directly that one time, and save the **3 gas** the extra stack assignment would spend. However, if it used as a parameter in an event emit, then caching it will help reduce gas by at least ***10 gas***",
      "gasSavings": 9,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n739:         PointVoting memory lastPoint = mapSupplyPoints[totalNumPoints];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L739-L739"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1130:         uint256 curEpoch = epochCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1130-L1130"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1200:         uint256 curEpoch = epochCounter;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1200-L1200"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Cache state variables outside of loop to avoid reading storage on every iteration",
      "description": "Reading from storage should always try to be avoided within loops.In the following instances, we are able to cache state variables outside of the loop to save a Gwarmaccess(100 gas) per loop iteration.\n\nNote: Due to stack too deep errors, we will not be able to cache all the state variables read within the loops.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit `tokenomics` is a state variable, try to cache it outside the loop\n262:                 ITokenomics(tokenomics).refundFromBondProgram(supply);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is a state variable, try to cache it outside the loop\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L708-L708"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `veOLASThreshold` is a state variable, try to cache it outside the loop\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L709-L709"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `ve` is a state variable, try to cache it outside the loop\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L709-L709"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `veOLASThreshold` is a state variable, try to cache it outside the loop\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L710-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `ve` is a state variable, try to cache it outside the loop\n710:                     IVotingEscrow(ve).getVotes(donator) >= veOLASThreshold) ? true : false;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L710-L710"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is a state variable, try to cache it outside the loop\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is a state variable, try to cache it outside the loop\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit `serviceRegistry` is a state variable, try to cache it outside the loop\n810:             if (!IServiceRegistry(serviceRegistry).exists(serviceIds[i])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L810-L810"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Using `storage` instead of `memory` for structs/arrays saves gas",
      "description": "When fetching data from a storage location, assigning the data to a `memory` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (**2100 gas**) for *each* field of the struct/array. If the fields are read from the new memory variable, they incur an additional `MLOAD` rather than a cheap stack read. Instead of declearing the variable with the `memory` keyword, declaring the variable with the `storage` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a `memory` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires `memory`, or if the array/struct is being read from another `memory` array/struct",
      "gasSavings": 12600,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n655:             PointVoting memory pointNext = mapSupplyPoints[minPointNumber + 1];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L655-L655"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n33:             uint96[10] memory supplyCaps = [\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n70:             uint88[10] memory inflationAmounts = [\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L70-L70"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "`>=`/`<=` costs less gas than `>`/`<`",
      "description": "The compiler uses opcodes `GT` and `ISZERO` for solidity code that uses `>`, but only requires `LT` for `>=`, [which saves **3 gas**](https://gist.github.com/IllIllI000/3dc79d25acccfa16dee4e83ffdc6ffde)",
      "gasSavings": 405,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n105:         if (numYears > 9) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n147:             if (value > address(this).balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n120:         if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n147:             if (value > address(this).balance) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n231:             if (payloadLength < SELECTOR_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n267:             if (data.length < MIN_GNOSIS_PAYLOAD_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L267-L267"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n312:             if (data.length < MIN_POLYGON_PAYLOAD_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L312-L312"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n410:                 if (data.length < SELECTOR_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L410-L410"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n421:                     if (data.length < MIN_SCHEDULE_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L421-L421"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n147:         if (lastPointNumber > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L147-L147"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n188:             if (oldLocked.endTime > block.timestamp && oldLocked.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L188-L188"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n188:             if (oldLocked.endTime > block.timestamp && oldLocked.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L188-L188"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n192:             if (newLocked.endTime > block.timestamp && newLocked.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L192-L192"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n192:             if (newLocked.endTime > block.timestamp && newLocked.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L192-L192"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n201:             if (newLocked.endTime > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L201-L201"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n211:         if (curNumPoint > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n222:         if (block.timestamp > lastPoint.ts) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L222-L222"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n240:                 if (tStep > block.timestamp) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L240-L240"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n247:                 if (lastPoint.bias < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L247-L247"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n251:                 if (lastPoint.slope < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L251-L251"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n282:             if (lastPoint.slope < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L282-L282"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n285:             if (lastPoint.bias < 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L285-L285"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n297:             if (oldLocked.endTime > block.timestamp) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L297-L297"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n306:             if (newLocked.endTime > block.timestamp && newLocked.endTime > oldLocked.endTime) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L306-L306"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n306:             if (newLocked.endTime > block.timestamp && newLocked.endTime > oldLocked.endTime) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L306-L306"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n352:         if (unlockTime > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L352-L352"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n362:         if (amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L362-L362"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n387:         if (lockedBalance.endTime < (block.timestamp + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L387-L387"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n392:         if (amount > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L392-L392"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n437:         if (lockedBalance.amount > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L437-L437"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n441:         if (unlockTime < (block.timestamp + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L441-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n445:         if (unlockTime > block.timestamp + MAXTIME) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L445-L445"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n449:         if (amount > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L449-L449"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n469:         if (lockedBalance.endTime < (block.timestamp + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L469-L469"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n474:         if (amount > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L474-L474"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n494:         if (lockedBalance.endTime < (block.timestamp + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L494-L494"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n498:         if (unlockTime < (lockedBalance.endTime + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L498-L498"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n502:         if (unlockTime > block.timestamp + MAXTIME) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L502-L502"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n512:         if (lockedBalance.endTime > block.timestamp) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L512-L512"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n562:             if ((minPointNumber + 1) > maxPointNumber) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n574:             if (point.blockNumber < (blockNumber + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L574-L574"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n595:         if (pointNumber > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L595-L595"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n598:             if (uPoint.bias > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L598-L598"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n626:         if (uPoint.blockNumber < (blockNumber + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L626-L626"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n645:         if (blockNumber > block.number) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L645-L645"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n654:         if (minPointNumber < totalNumPoints) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L654-L654"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n663:         if (dBlock > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L663-L663"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n681:         if (uPoint.bias > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L681-L681"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n699:             if (tStep > ts) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L699-L699"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n712:         if (lastPoint.bias > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L712-L712"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n730:         if (sPoint.blockNumber < (blockNumber + 1)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L730-L730"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n196:         if (userNumPoints > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L196-L196"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n215:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n235:         if (uPoint.blockNumber > 0 && blockNumber >= uPoint.blockNumber) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L235-L235"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n41:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > componentTotalSupply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n41:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > componentTotalSupply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L41-L41"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n30:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > maxComponentId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n30:             if (dependencies[iDep] < (lastId + 1) || dependencies[iDep] > maxComponentId) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n73:         return unitId > 0 && unitId < (totalSupply + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n73:         return unitId > 0 && unitId < (totalSupply + 1);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L73-L73"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n99:         if (unitId > totalSupply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n53:         if (_locked > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n237:                     if (minComponent < components[i][processedComponents[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n239:                         if (components[i][processedComponents[i]] < tryMinComponent) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L239-L239"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n252:             if (numComponentsCheck > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L252-L252"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n50:         if (dataLength > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n52:             if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L52-L52"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n76:             if (dataLength > DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L76-L76"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n93:         if (dataLength < DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n110:         if (dataLength > DEFAULT_DATA_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L110-L110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n195:         if (priceLP > type(uint160).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L195-L195"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n205:         if (supply > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L205-L205"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n210:         if (vesting < MIN_VESTING) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L210-L210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n216:         if (maturity > type(uint32).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L216-L216"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n260:             if (supply > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L260-L260"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n311:         if (maturity > type(uint32).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L311-L311"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n323:         if (payout > supply) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L323-L323"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n425:         status = (mapBondProducts[productId].supply > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L425-L425"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n483:         if (payout > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L483-L483"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n93:         if (_locked > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L93-L93"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n103:         if ((reward + topUp) > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n59:         if (totalTokenValue > type(uint192).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L59-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n74:         if (totalSupply > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L74-L74"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n296:         if (uint32(_epochLen) < MIN_EPOCH_LENGTH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L296-L296"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n301:         if (uint32(_epochLen) > ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L301-L301"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n511:         if (uint72(_devsPerCapital) > MIN_PARAM_VALUE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L511-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n519:         if (uint72(_codePerDev) > MIN_PARAM_VALUE) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L519-L519"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n529:         if (_epsilonRate > 0 && _epsilonRate <= 17e18) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L529-L529"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n543:         if (uint96(_veOLASThreshold) > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L543-L543"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n576:         if (_rewardComponentFraction + _rewardAgentFraction > 100) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L576-L576"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n581:         if (_maxBondFraction + _topUpComponentFraction + _topUpAgentFraction > 100) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L581-L581"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n639:         if (eBond > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L639-L639"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n656:         if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L656-L656"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n669:         if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L669-L669"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n694:         incentiveFlags[0] = (mapEpochTokenomics[curEpoch].unitPoints[0].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L694-L694"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n695:         incentiveFlags[1] = (mapEpochTokenomics[curEpoch].unitPoints[1].rewardUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L695-L695"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n696:         incentiveFlags[2] = (mapEpochTokenomics[curEpoch].unitPoints[0].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L696-L696"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n697:         incentiveFlags[3] = (mapEpochTokenomics[curEpoch].unitPoints[1].topUpUnitFraction > 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L697-L697"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n734:                         } else if (lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L734-L734"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n857:         if (fKD > epsilonRate) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L857-L857"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n902:         if (diffNumSeconds < curEpochLen || diffNumSeconds > ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L902-L902"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n902:         if (diffNumSeconds < curEpochLen || diffNumSeconds > ONE_YEAR) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L902-L902"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n928:         if (numYears > currentYear) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L928-L928"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n963:         if (incentives[4] > curMaxBond) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L963-L963"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n989:             if (nextEpochLen > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L989-L989"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n996:             if (nextVeOLASThreshold > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L996-L996"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1012:         if (numYears > currentYear) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1012-L1012"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1028:         } else if (tokenomicsParametersUpdated > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1028-L1028"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1041:         if (incentives[0] > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1041-L1041"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1112:             if (unitTypes[i] > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1112-L1112"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1117:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1117-L1117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1138-L1138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1138:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1138-L1138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1182:             if (unitTypes[i] > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1182-L1182"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1187:             if (unitIds[i] <= lastIds[unitTypes[i]] || unitIds[i] > registriesSupply[unitTypes[i]]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1187-L1187"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1206-L1206"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1206:             if (lastEpoch > 0 && lastEpoch < curEpoch) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1206-L1206"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1210:                 if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1210-L1210"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1217:                 if (totalIncentives > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1217-L1217"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n32:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n68:         if (numYears < 10) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L68-L68"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n121:         if (msg.value < minAcceptedETH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L121-L121"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n128:         if (amount + ETHFromServices > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n194:         if (_minAcceptedETH > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L194-L194"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n228:         if (IToken(token).allowance(account, address(this)) < tokenAmount) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L228-L228"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n259:         if (_locked > 1) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L259-L259"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n265:         if (msg.value < minAcceptedETH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L265-L265"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n291:         if (donationETH + ETHOwned > type(uint96).max) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L291-L291"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n402:         if (accountRewards > 0 && amountETHFromServices >= accountRewards) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L402-L402"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n413:         if (accountTopUps > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L413-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n441:         if (treasuryRewards > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L441-L441"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n477:         if (slashedFunds < minAcceptedETH) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L477-L477"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n515:             if (mapTokenReserves[token] > 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L515-L515"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Ternary unnecessary",
      "description": "`z = (x == y) ? true : false` => `z = (x == y)`",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n709:                 topUpEligible = (IVotingEscrow(ve).getVotes(serviceOwner) >= veOLASThreshold  ||\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L709-L709"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use assembly to validate `msg.sender`",
      "description": "We can use assembly to efficiently validate msg.sender with the least amount of opcodes necessary. For more details check the following report [Here](https://code4rena.com/reports/2023-05-juicebox#g-06-use-assembly-to-validate-msgsender)",
      "gasSavings": 708,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n44:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L44-L44"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n59:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L59-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n77:         if (msg.sender != minter) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n32:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n50:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L50-L50"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n61:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L61-L61"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n84:         if (msg.sender != address(this)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L84-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n109:         if(msg.sender != fxChild) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L109-L109"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n84:         if (msg.sender != address(this)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L84-L84"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n107:         if (msg.sender != AMBContractProxyHome) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L107-L107"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n155:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L155-L155"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n171:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L171-L171"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n448:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L448-L448"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n501:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L501-L501"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n540:         if (msg.sender == owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L540-L540"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n543:         } else if (msg.sender == multisig) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L543-L543"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n543:         } else if (msg.sender == multisig) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L543-L543"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n562:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L562-L562"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n22:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n38:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericManager.sol\n\n49:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericManager.sol#L49-L49"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n39:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L39-L39"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n55:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n80:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L80-L80"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n59:         if (manager != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L59-L59"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n125:         if (manager != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n125:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n145:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L145-L145"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n165:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L165-L165"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n185:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L185-L185"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n246:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L246-L246"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n368:             if (mapUserBonds[bondIds[i]].account != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L368-L368"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n48:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L48-L48"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Dispenser.sol\n\n66:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Dispenser.sol#L66-L66"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n38:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L38-L38"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n58:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L58-L58"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n386:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L386-L386"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n406:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L406-L406"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n425:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L425-L425"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n452:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L452-L452"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n476:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L476-L476"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n506:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L506-L506"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n571:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L571-L571"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n611:         if (depository != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L611-L611"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n632:         if (depository != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L632-L632"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n795:         if (treasury != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L795-L795"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1089:         if (dispenser != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1089-L1089"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n139:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n158:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L158-L158"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n184:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L184-L184"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n214:         if (depository != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n315:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L315-L315"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n396:         if (dispenser != msg.sender) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L396-L396"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n435:         if (msg.sender != tokenomics) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L435-L435"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n468:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L468-L468"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n489:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L489-L489"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n509:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L509-L509"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n533:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L533-L533"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n544:         if (msg.sender != owner) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L544-L544"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Can make the variable outside the loop to save gas",
      "description": "Creating variables inside the loop consum more gas compared to declaring them outside and just reaffecting values to them inside the loop.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit variable `target` is created inside a loop.\n126:             address target;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit variable `value` is created inside a loop.\n127:             uint96 value;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L127-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit variable `payloadLength` is created inside a loop.\n128:             uint32 payloadLength;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit variable `payload` is created inside a loop.\n152:             bytes memory payload = new bytes(payloadLength);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L152-L152"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit variable `j` is created inside a loop.\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L153-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n//@audit variable `success` is created inside a loop.\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit variable `target` is created inside a loop.\n126:             address target;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L126-L126"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit variable `value` is created inside a loop.\n127:             uint96 value;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L127-L127"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit variable `payloadLength` is created inside a loop.\n128:             uint32 payloadLength;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L128-L128"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit variable `payload` is created inside a loop.\n152:             bytes memory payload = new bytes(payloadLength);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L152-L152"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit variable `j` is created inside a loop.\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L153-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n//@audit variable `success` is created inside a loop.\n160:             (bool success, ) = target.call{value: value}(payload);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L160-L160"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `target` is created inside a loop.\n213:             address target;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L213-L213"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `payloadLength` is created inside a loop.\n214:             uint32 payloadLength;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L214-L214"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `payload` is created inside a loop.\n236:             bytes memory payload = new bytes(payloadLength);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L236-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `j` is created inside a loop.\n237:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `bridgeMediatorL2ChainId` is created inside a loop.\n362:             uint256 bridgeMediatorL2ChainId = mapBridgeMediatorL1L2ChainIds[targets[i]];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L362-L362"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `bridgeMediatorL2` is created inside a loop.\n364:             address bridgeMediatorL2 = address(uint160(bridgeMediatorL2ChainId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L364-L364"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `chainId` is created inside a loop.\n370:                 uint256 chainId = bridgeMediatorL2ChainId >> 160;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L370-L370"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `targetSelectorChainId` is created inside a loop.\n476:             uint256 targetSelectorChainId = uint256(uint160(targets[i]));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L476-L476"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `chainId` is created inside a loop.\n518:             uint256 chainId = chainIds[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L518-L518"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n//@audit variable `bridgeMediatorL2ChainId` is created inside a loop.\n525:             uint256 bridgeMediatorL2ChainId = uint256(uint160(bridgeMediatorL2s[i]));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L525-L525"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit variable `dSlope` is created inside a loop.\n239:                 int128 dSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L239-L239"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit variable `mid` is created inside a loop.\n565:             uint256 mid = (minPointNumber + maxPointNumber + 1) / 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L565-L565"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n//@audit variable `dSlope` is created inside a loop.\n698:             int128 dSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L698-L698"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit variable `minIdxComponent` is created inside a loop.\n229:             uint32 minIdxComponent;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L229-L229"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit variable `numComponentsCheck` is created inside a loop.\n231:             uint32 numComponentsCheck;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L231-L231"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit variable `tryMinComponent` is created inside a loop.\n232:             uint32 tryMinComponent = type(uint32).max;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit variable `i` is created inside a loop.\n234:             for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L234-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit variable `productId` is created inside a loop.\n256:             uint256 productId = productIds[i];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L256-L256"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit variable `supply` is created inside a loop.\n258:             uint256 supply = mapBondProducts[productId].supply;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L258-L258"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit variable `token` is created inside a loop.\n263:                 address token = mapBondProducts[productId].token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L263-L263"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit variable `pay` is created inside a loop.\n359:             uint256 pay = mapUserBonds[bondIds[i]].payout;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L359-L359"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit variable `matured` is created inside a loop.\n360:             bool matured = block.timestamp >= mapUserBonds[bondIds[i]].maturity;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n//@audit variable `productId` is created inside a loop.\n376:             uint256 productId = mapUserBonds[bondIds[i]].productId;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L376-L376"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `topUpEligible` is created inside a loop.\n706:             bool topUpEligible;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L706-L706"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `serviceOwner` is created inside a loop.\n708:                 address serviceOwner = IToken(serviceRegistry).ownerOf(serviceIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L708-L708"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `unitType` is created inside a loop.\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L714-L714"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `numServiceUnits` is created inside a loop.\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `serviceUnitIds` is created inside a loop.\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `numServiceUnits` is created inside a loop.\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `serviceUnitIds` is created inside a loop.\n716:                 (uint256 numServiceUnits, uint32[] memory serviceUnitIds) = IServiceRegistry(serviceRegistry).\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L716-L716"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `amount` is created inside a loop.\n726:                     uint96 amount = uint96(amounts[i] / numServiceUnits);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L726-L726"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `amount` is created inside a loop.\n726:                     uint96 amount = uint96(amounts[i] / numServiceUnits);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L726-L726"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `j` is created inside a loop.\n728:                     for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L728-L728"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `j` is created inside a loop.\n728:                     for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L728-L728"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `lastEpoch` is created inside a loop.\n730:                         uint256 lastEpoch = mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L730-L730"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `lastEpoch` is created inside a loop.\n730:                         uint256 lastEpoch = mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L730-L730"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `lastEpoch` is created inside a loop.\n730:                         uint256 lastEpoch = mapUnitIncentives[unitType][serviceUnitIds[j]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L730-L730"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `j` is created inside a loop.\n758:                 for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L758-L758"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `j` is created inside a loop.\n758:                 for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L758-L758"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `unitOwner` is created inside a loop.\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L765-L765"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `unitOwner` is created inside a loop.\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L765-L765"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `unitOwner` is created inside a loop.\n765:                         address unitOwner = IToken(registries[unitType]).ownerOf(serviceUnitIds[j]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L765-L765"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `unitOwner` is created inside a loop.\n1123:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1123-L1123"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `lastEpoch` is created inside a loop.\n1134:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1134-L1134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `unitOwner` is created inside a loop.\n1193:             address unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1193-L1193"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `lastEpoch` is created inside a loop.\n1204:             uint256 lastEpoch = mapUnitIncentives[unitTypes[i]][unitIds[i]].lastEpoch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1204-L1204"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `totalIncentives` is created inside a loop.\n1209:                 uint256 totalIncentives = mapUnitIncentives[unitTypes[i]][unitIds[i]].pendingRelativeReward;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1209-L1209"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n//@audit variable `sumUnitIncentives` is created inside a loop.\n1222:                     uint256 sumUnitIncentives = uint256(mapEpochTokenomics[lastEpoch].unitPoints[unitTypes[i]].sumUnitTopUpsOLAS) * 100;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1222-L1222"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Consider activating via-ir for deploying",
      "description": "The Solidity compiler's Intermediate Representation (IR) based code generator, which can be activated using --via-ir on the command line or {\"\"viaIR\"\": true} in the options, serves a dual purpose. Firstly, it boosts the transparency and audibility of code generation, which enhances developers' comprehension and control over the contract's final bytecode. Secondly, it enables more sophisticated optimization passes that span multiple functions, thereby potentially leading to more efficient bytecode.\nIt's important to note that using the IR- based code generator may lengthen compile times due to the extra optimization steps.Therefore, it's advised to test your contract with and without this option enabled to measure the performance and gas cost implications.If the IR- based code generator significantly enhances your contract's performance or reduces gas costs, consider using the --via-ir flag during deployment.This way, you can leverage more advanced compiler optimizations without hindering your development workflow.",
      "gasSavings": 250,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: hardhat.config.ts\n\n//@audit /2023-12-autonolas/governance/lib/fx-portal/hardhat.config.ts\n1: \n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//hardhat.config.ts#L1-L1"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "`++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)",
      "description": "*Saves 5 gas per loop*",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n78:         unitId++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L78-L78"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n244:                         numComponentsCheck++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L244-L244"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n254:                 processedComponents[minIdxComponent]++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L254-L254"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n762:                         mapEpochTokenomics[curEpoch].unitPoints[unitType].numNewUnits++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L762-L762"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n768:                             mapEpochTokenomics[curEpoch].epochPoint.numNewOwners++;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L768-L768"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Unnecessary casting as variable is already of the same type",
      "description": " ",
      "gasSavings": 22,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n//@audit `unitId` is getting converted from `uint256` to `uint256`\n185:         subComponentIds = mapSubComponents[uint256(unitId)];\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L185-L185"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Using mappings instead of arrays to avoid length checks save gas",
      "description": "Just by using a mapping, we get a gas saving of 2102 gas. When you read the value of an index of an array, solidity adds bytecode that checks that you are reading from a valid index (i.e an index strictly less than the length of the array) else it reverts with a panic error (Panic(0x32) to be precise). This prevents from reading unallocated or worse, allocated storage/memory locations.\nDue to the way mappings are(simply a key => value pair), no check like that exists and we are able to read from the a storage slot directly.It’s important to note that when using mappings in this manner, your code should ensure that you are not reading an out of bound index of your canonical array.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n119:     mapping(address => PointVoting[]) public mapUserPoints;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L119-L119"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n29:     mapping(uint256 => bytes32[]) public mapUnitIdHashes;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n31:     mapping(uint256 => uint32[]) public mapSubComponents;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L31-L31"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use `do while` loops instead of `for` loops",
      "description": "A `do while` loop will cost less gas since the condition is not being checked for the first iteration, Check my example on [github](https://github.com/he110-1/gasOptimization/blob/main/forToDoWhileOptimizationProof.sol). Actually, `do while` alwayse cast less gas compared to `For` check my second example [github](https://github.com/he110-1/gasOptimization/blob/main/forToDoWhileOptimizationProof2.sol)",
      "gasSavings": 6171,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n108:             for (uint256 i = 0; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n125:         for (uint256 i = 0; i < dataLength;) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L153-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n125:         for (uint256 i = 0; i < dataLength;) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L125-L125"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L153-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n212:         for (uint256 i = 0; i < data.length;) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L212-L212"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n237:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n273:             for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L273-L273"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n292:             for (uint256 i = 0; i < bridgePayload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L292-L292"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n318:             for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L318-L318"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n340:         for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L340-L340"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n360:         for (uint i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L458-L458"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L511-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n232:             for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n561:         for (uint256 i = 0; i < 128; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L561-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n693:         for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L693-L693"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n40:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n29:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n98:             for (uint256 i = 0; i < numSubComponents; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n211:         for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n227:         for (counter = 0; counter < maxNumComponents; ++counter) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n234:             for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L234-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n236:                 for (; processedComponents[i] < numComponents[i]; ++processedComponents[i]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L236-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n262:         for (uint32 i = 0; i < counter; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n79:                 for (uint256 i = 0; i < payloadLength; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n113:             for (uint256 i = 0; i < payloadLength; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n139:         for (uint256 i = 0; i < numOwners; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L255-L255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n274:         for (uint256 i = 0; i < numClosedProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L274-L274"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L357-L357"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n402:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L402-L402"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n413:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L413-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n448:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L448-L448"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n468:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L468-L468"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n702:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L702"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L714-L714"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n728:                     for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L728-L728"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n758:                 for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L758-L758"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n808:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L808-L808"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n978:             for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L978-L978"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1104:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1104-L1104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1110-L1110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1132-L1132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1174:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1174-L1174"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1180-L1180"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1202-L1202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n55:             for (uint256 i = 0; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n92:             for (uint256 i = 1; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n276:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L276-L276"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Avoid transferring amounts of zero in order to save gas",
      "description": "Skipping the external call when nothing will be transferred, will save at least **100 gas**",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n79:         bool success = IERC20(childToken).transfer(to, amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L79-L79"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Simple checks for zero `uint` can be done using assembly to save gas",
      "description": " ",
      "gasSavings": 180,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n92:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n88:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L88-L88"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n176:         if (proposalId == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L176-L176"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n470:             if (chainIds[i] == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L470-L470"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n379:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L379-L379"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n383:         if (lockedBalance.amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L383-L383"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n427:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L427-L427"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n461:         if (amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L461-L461"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n465:         if (lockedBalance.amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L465-L465"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n490:         if (lockedBalance.amount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L490-L490"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n551:             if (maxPointNumber == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L551-L551"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n33:         if (dependencies.length == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n85:         if (bytes(bURI).length == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n190:         if (priceLP == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L190-L190"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n200:         if (supply == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L200-L200"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n295:         if (tokenAmount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L295-L295"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n304:         if (supply == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L304-L304"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n340:         if (supply == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L340-L340"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n363:             if (pay == 0 || !matured) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L363-L363"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n384:         if (payout == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L384-L384"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n404:             if ((active && mapBondProducts[i].supply > 0) || (!active && mapBondProducts[i].supply == 0)) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L404-L404"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n720:                 if (numServiceUnits == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L720-L720"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n732:                         if (lastEpoch == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L732-L732"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1063:         if (incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1])) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1063-L1063"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1255:         if (idf == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1255-L1255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1265:         if (idf == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1265-L1265"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n40:         if (tokenomicsData.length == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n189:         if (_minAcceptedETH == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L189-L189"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n277:             if (amounts[i] == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L277-L277"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n325:         if (tokenAmount == 0) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L325-L325"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "`++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops",
      "description": "The `unchecked` keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves **30-40 gas [per loop](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked)**",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n108:             for (uint256 i = 0; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L153-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n153:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L153-L153"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n237:             for (uint256 j = 0; j < payloadLength; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L237-L237"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n273:             for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L273-L273"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n292:             for (uint256 i = 0; i < bridgePayload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L292-L292"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n318:             for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L318-L318"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n340:         for (uint256 i = 0; i < payload.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L340-L340"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n360:         for (uint i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L360-L360"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n458:         for (uint256 i = 0; i < targets.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L458-L458"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n511:         for (uint256 i = 0; i < chainIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L511-L511"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n232:             for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n561:         for (uint256 i = 0; i < 128; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L561-L561"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n693:         for (uint256 i = 0; i < 255; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L693-L693"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n40:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L40-L40"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n29:         for (uint256 iDep = 0; iDep < dependencies.length; ++iDep) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n98:             for (uint256 i = 0; i < numSubComponents; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L98-L98"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n211:         for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L211-L211"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n227:         for (counter = 0; counter < maxNumComponents; ++counter) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L227-L227"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n234:             for (uint32 i = 0; i < numUnits; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L234-L234"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n236:                 for (; processedComponents[i] < numComponents[i]; ++processedComponents[i]) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L236-L236"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n262:         for (uint32 i = 0; i < counter; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L262-L262"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n79:                 for (uint256 i = 0; i < payloadLength; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L79-L79"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n113:             for (uint256 i = 0; i < payloadLength; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n139:         for (uint256 i = 0; i < numOwners; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n255:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L255-L255"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n274:         for (uint256 i = 0; i < numClosedProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L274-L274"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n357:         for (uint256 i = 0; i < bondIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L357-L357"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n402:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L402-L402"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n413:         for (uint256 i = 0; i < numProducts; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L413-L413"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n448:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L448-L448"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n468:         for (uint256 i = 0; i < numBonds; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L468-L468"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/DonatorBlacklist.sol\n\n67:         for (uint256 i = 0; i < accounts.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/DonatorBlacklist.sol#L67-L67"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n702:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L702-L702"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n714:             for (uint256 unitType = 0; unitType < 2; ++unitType) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L714-L714"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n728:                     for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L728-L728"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n758:                 for (uint256 j = 0; j < numServiceUnits; ++j) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L758-L758"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n808:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L808-L808"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n978:             for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L978-L978"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1104:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1104-L1104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1110:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1110-L1110"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1132:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1132-L1132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1174:         for (uint256 i = 0; i < 2; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1174-L1174"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1180:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1180-L1180"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Tokenomics.sol\n\n1202:         for (uint256 i = 0; i < unitIds.length; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Tokenomics.sol#L1202-L1202"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n55:             for (uint256 i = 0; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n92:             for (uint256 i = 1; i < numYears; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L92-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n276:         for (uint256 i = 0; i < numServices; ++i) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L276-L276"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Do not cache constants to save gas",
      "description": " ",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n103:         uint256 supplyCap = tenYearSupplyCap;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L103-L103"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Using `private` for constants saves gas",
      "description": "If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that [returns a tuple](https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178) of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n22:     uint256 public constant oneYear = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n24:     uint256 public constant tenYearSupplyCap = 1_000_000_000e18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n26:     uint256 public constant maxMintCapFraction = 2;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n28:     uint256 public immutable timeLaunch;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n29:     address public immutable childToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L29-L29"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n31:     address public immutable rootToken;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L31-L31"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n55:     address public immutable fxChild;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 36;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n55:     address public immutable AMBContractProxyHome;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L55-L55"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n97:     bytes4 public constant SCHEDULE = bytes4(keccak256(bytes(\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L97-L97"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n99:     bytes4 public constant SCHEDULE_BATCH = bytes4(keccak256(bytes(\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L99-L99"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n101:     bytes4 public constant REQUIRE_TO_PASS_MESSAGE = bytes4(keccak256(bytes(\"requireToPassMessage(address,bytes,uint256)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L101-L101"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n103:     bytes4 public constant PROCESS_MESSAGE_FROM_FOREIGN = bytes4(keccak256(bytes(\"processMessageFromForeign(bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L103-L103"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n105:     bytes4 public constant SEND_MESSAGE_TO_CHILD = bytes4(keccak256(bytes(\"sendMessageToChild(address,bytes)\")));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n111:     uint256 public constant MIN_SCHEDULE_DATA_LENGTH = 260;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L111-L111"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n113:     uint256 public constant SELECTOR_DATA_LENGTH = 4;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L113-L113"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n115:     uint256 public constant MIN_GNOSIS_PAYLOAD_LENGTH = 292;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L115-L115"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n117:     uint256 public constant MIN_POLYGON_PAYLOAD_LENGTH = 164;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L117-L117"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n120:     address public immutable owner;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L120-L120"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n122:     address public immutable multisig;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L122-L122"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n105:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L105-L105"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n108:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L108-L108"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n132:     address public immutable ve;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L132-L132"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n134:     address public immutable token;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L134-L134"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n136:     string public constant name = \"Voting Escrow OLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L136-L136"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n138:     string public constant symbol = \"veOLAS\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L138-L138"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/wveOLAS.sol\n\n140:     uint8 public constant decimals = 18;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/wveOLAS.sol#L140-L140"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/AgentRegistry.sol\n\n13:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/AgentRegistry.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/ComponentRegistry.sol\n\n10:     string public constant VERSION = \"1.0.0\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/ComponentRegistry.sol#L10-L10"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n33:     string public constant CID_PREFIX = \"f01701220\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L33-L33"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n11:     address public immutable componentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/RegistriesManager.sol\n\n13:     address public immutable agentRegistry;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/RegistriesManager.sol#L13-L13"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n27:     UnitType public immutable unitType;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L27-L27"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n26:     bytes4 public constant GNOSIS_SAFE_SETUP_SELECTOR = 0xb63e800d;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L26-L26"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n28:     uint256 public constant DEFAULT_DATA_LENGTH = 144;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n30:     address payable public immutable gnosisSafe;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L30-L30"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeMultisig.sol\n\n32:     address public immutable gnosisSafeProxyFactory;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeMultisig.sol#L32-L32"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n53:     uint256 public constant DEFAULT_DATA_LENGTH = 20;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L53-L53"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol\n\n56:     bytes32 public immutable proxyHash;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/multisigs/GnosisSafeSameAddressMultisig.sol#L56-L56"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n75:     uint256 public constant MIN_VESTING = 1 days;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L75-L75"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n77:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L77-L77"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n89:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L89-L89"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n22:     address public immutable olas;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L22-L22"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/GenericBondCalculator.sol\n\n24:     address public immutable tokenomics;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/GenericBondCalculator.sol#L24-L24"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n11:     string public constant VERSION = \"1.0.1\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L11-L11"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n14:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L14-L14"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n16:     uint256 public constant ONE_YEAR = 1 days * 365;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L16-L16"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n18:     uint256 public constant MIN_EPOCH_LENGTH = 1 weeks;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L18-L18"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsConstants.sol\n\n20:     uint256 public constant MIN_PARAM_VALUE = 1e14;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsConstants.sol#L20-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/TokenomicsProxy.sol\n\n28:     bytes32 public constant PROXY_TOKENOMICS = 0xbd5523e7c3b6a94aa0e3b24d1120addc2f95c7029e097b466b2bedc8d4b4362f;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/TokenomicsProxy.sol#L28-L28"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n56:     address public constant ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L56-L56"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use `s.x = s.x + y` instead of `s.x += y` for memory structs",
      "description": "Using the `s.x = s.x + y` instead of `s.x += y` for memory structs can save **100 gas**. The same applies to `-=`, `*=`, etc.",
      "gasSavings": 900,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n245:                 lastPoint.bias -= lastPoint.slope * int128(int64(tStep - lastCheckpoint));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L245-L245"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n246:                 lastPoint.slope += dSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L246-L246"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n280:             lastPoint.slope += (uNew.slope - uOld.slope);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L280-L280"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n281:             lastPoint.bias += (uNew.bias - uOld.bias);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L281-L281"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n350:             lockedBalance.amount += uint128(amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L350-L350"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n597:             uPoint.bias -= uPoint.slope * int128(int64(ts) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L597-L597"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n680:         uPoint.bias -= uPoint.slope * int128(int64(uint64(blockTime)) - int64(uPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L680-L680"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n704:             lastPoint.bias -= lastPoint.slope * int128(int64(tStep) - int64(lastPoint.ts));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L704-L704"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n708:             lastPoint.slope += dSlope;\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L708-L708"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Redundant state variable getters",
      "description": "Getters for public state variables are automatically generated so there is no need to code them manually and waste gas.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n719:     function totalSupply() public view override returns (uint256) {\n720:         return supply;\n721:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L719-L721"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Using `constant`s instead of `enum` can save gas",
      "description": "`Enum` is expensive and it is [more efficient to use constants](https://www.codehawks.com/finding/clm84992q02j9w9ruebun36d9) instead. An illustrative example of this approach can be found in the [ReentrancyGuard.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/181d518609a9f006fcb97af63e6952e603cf100e/contracts/utils/ReentrancyGuard.sol#L34-L35).",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/multisigs/GuardCM.sol\n\n11: enum ProposalState {\n12:     Pending,\n13:     Active,\n14:     Canceled,\n15:     Defeated,\n16:     Succeeded,\n17:     Queued,\n18:     Expired,\n19:     Executed\n20: }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/multisigs/GuardCM.sol#L11-L20"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n87:     enum DepositType {\n88:         DEPOSIT_FOR_TYPE,\n89:         CREATE_LOCK_TYPE,\n90:         INCREASE_LOCK_AMOUNT,\n91:         INCREASE_UNLOCK_TIME\n92:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L87-L92"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/UnitRegistry.sol\n\n12:     enum UnitType {\n13:         Component,\n14:         Agent\n15:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/UnitRegistry.sol#L12-L15"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/interfaces/IRegistry.sol\n\n6:     enum UnitType {\n7:         Component,\n8:         Agent\n9:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/interfaces/IRegistry.sol#L6-L9"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/interfaces/IServiceRegistry.sol\n\n6:     enum UnitType {\n7:         Component,\n8:         Agent\n9:     }\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/interfaces/IServiceRegistry.sol#L6-L9"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Gas savings can be achieved by changing the model for assigning value to the structure ***123 gas***",
      "description": "Change this `structName a = structName({item1: val1,item2: val2}); ==> structName a; a.item1 = val1; a.item2 = val2;`",
      "gasSavings": 615,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n139:         mapSupplyPoints[0] = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L139-L139"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n215:             lastPoint = PointVoting(0, 0, uint64(block.timestamp), uint64(block.number), 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L215-L215"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/veOLAS.sol\n\n517:         mapLockedBalances[msg.sender] = LockedBalance(0, 0);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/veOLAS.sol#L517-L517"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n232:         mapBondProducts[productId] = Product(uint160(priceLP), uint32(vesting), token, uint96(supply));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L232-L232"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Depository.sol\n\n333:         mapUserBonds[bondId] = Bond(msg.sender, uint96(payout), uint32(maturity), uint32(productId));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Depository.sol#L333-L333"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "address(this) should be cached",
      "description": "Cacheing saves gas when compared to repeating the calculation at each point it is used in the contract.The instance below represents the second+ time of calling address(this) in a specific function",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20ChildTunnel.sol\n\n104:             revert TransferFailed(childToken, msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20ChildTunnel.sol#L104-L104"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxERC20RootTunnel.sol\n\n100:             revert TransferFailed(rootToken, msg.sender, address(this), amount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxERC20RootTunnel.sol#L100-L100"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n85:             revert SelfCallOnly(msg.sender, address(this));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/FxGovernorTunnel.sol\n\n148:                 revert InsufficientBalance(value, address(this).balance);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/FxGovernorTunnel.sol#L148-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n85:             revert SelfCallOnly(msg.sender, address(this));\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L85-L85"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/HomeMediator.sol\n\n148:                 revert InsufficientBalance(value, address(this).balance);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/HomeMediator.sol#L148-L148"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n228:         if (IToken(token).allowance(account, address(this)) < tokenAmount) {\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L228-L228"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: tokenomics/contracts/Treasury.sol\n\n321:             revert TransferFailed(token, address(this), to, tokenAmount);\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//tokenomics/contracts/Treasury.sol#L321-L321"
          ]
        }
      ]
    },
    {
      "severity": "Gas",
      "title": "Use `solady` library where possible to save gas",
      "description": "[Solady](https://github.com/Vectorized/solady) is a Solidity library inspired by [Solmate](https://github.com/rari-capital/solmate), optimized heavily for gas optimizations and battle tested by [hundreds of developers](https://www.alchemy.com/dapps/solady). Consider implementing solady contracts where possible to reduce runtime gas fees.",
      "gasSavings": 0,
      "category": null,
      "instances": [
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/OLAS.sol\n\n4: import \"../lib/solmate/src/tokens/ERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/OLAS.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: governance/contracts/bridges/BridgedERC20.sol\n\n4: import {ERC20} from \"../../lib/solmate/src/tokens/ERC20.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//governance/contracts/bridges/BridgedERC20.sol#L4-L4"
          ]
        },
        {
          "content": "\n\n```solidity\n\nFile: registries/contracts/GenericRegistry.sol\n\n4: import \"../lib/solmate/src/tokens/ERC721.sol\";\n\n\n```\n",
          "loc": [
            "https://github.com/code-423n4/2023-12-autonolas/blob/main//registries/contracts/GenericRegistry.sol#L4-L4"
          ]
        }
      ]
    }
  ],
  "createdAt": "2023-12-21T20:49:23.933Z",
  "updatedAt": "2023-12-21T20:49:24.663Z"
}