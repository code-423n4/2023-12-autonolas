Clarification: False positive
Treasury.depositTokenForOLAS(address,uint256,address,uint256) (contracts/Treasury.sol#105-136) uses arbitrary from in transferFrom: IERC20(token).transferFrom(account,address(this),tokenAmount) (contracts/Treasury.sol#129)
Reference: https://github.com/trailofbits/slither/wiki/Detector-Documentation#arbitrary-send-erc20
=> Verified

Clarification: False positive
ITokenomics is re-used:
	- ITokenomics (contracts/interfaces/ITokenomics.sol#5-48)
	- ITokenomics (contracts/test/ReentrancyAttacker.sol#5-19)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused
=> Verified

Clarification: Low risk. Not hard to fix.
Depository.redeem(uint256[]) (contracts/Depository.sol#155-191) ignores return value by IERC20(olas).transfer(msg.sender,payout) (contracts/Depository.sol#190)
Treasury.depositTokenForOLAS(address,uint256,address,uint256) (contracts/Treasury.sol#105-136) ignores return value by IERC20(token).transferFrom(account,address(this),tokenAmount) (contracts/Treasury.sol#129)
Treasury.withdraw(address,uint256,address) (contracts/Treasury.sol#178-220) ignores return value by IERC20(token).transfer(to,tokenAmount) (contracts/Treasury.sol#218)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
=> IERC20(olas).transfer() does not need to be checked, since it either fails or returns true
=> Others are fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/1c4ac57a7f5aa1cd017101f5bcb8d3c4e342b680

Clarification:  Tests contract in https://github.com/DeltaDex-Protocol/statistics_solidity/blob/main/contracts/dependencies/prb-math/PRBMath.sol
Overall outside the scope of the audit
We will avoid mentioning it if we switch to the original library: https://github.com/paulrberg/prb-math 
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse = (3 * denominator) ^ 2 (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#460)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse *= 2 - denominator * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#464)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse *= 2 - denominator * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#465)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse *= 2 - denominator * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#466)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse *= 2 - denominator * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#467)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse *= 2 - denominator * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#468)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- denominator = denominator / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#445)
	- inverse *= 2 - denominator * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#469)
PRBMath.mulDiv(uint256,uint256,uint256) (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#394-478) performs a multiplication on the result of a division:
	- prod0 = prod0 / lpotdod (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#448)
	- result = prod0 * inverse (node_modules/@partylikeits1983/statistics_solidity/contracts/dependencies/prb-math/PRBMath.sol#475)
=> Fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/1c4ac57a7f5aa1cd017101f5bcb8d3c4e342b680

Clarification: Needs to be fixed.
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address) (contracts/Tokenomics.sol#228-307) performs a multiplication on the result of a division:
	- _inflationPerSecond = 22_113_000_0e17 / zeroYearSecondsLeft (contracts/Tokenomics.sol#267)
	- _maxBond = _inflationPerSecond * _epochLen * _maxBondFraction / 100 (contracts/Tokenomics.sol#304)
=> Left division as is, extended comment is in https://github.com/valory-xyz/autonolas-tokenomics/commit/bb6a692b072cd91e6740d8f7081bf1753a81f1bb:
Precision is lost for at most 6 insignificant digits (or 1e-12) of OLAS per year, but it allows to avoid complex calculations.

Clarification: False positive. The code works as intended.
https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/integer-division/
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- numYears = (block.timestamp - timeLaunch) / oneYear (contracts/Tokenomics.sol#767) i.e 0, 1, 2 ...
	- yearEndTime = timeLaunch + numYears * oneYear (contracts/Tokenomics.sol#774) t + 0 * 365*24*60*60, t + 1 * 365*24*60*60
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- curInflationPerSecond = getInflationForYear(numYears) / oneYear (contracts/Tokenomics.sol#778)
	- inflationPerEpoch += (block.timestamp - yearEndTime) * curInflationPerSecond (contracts/Tokenomics.sol#780)
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- numYears = (block.timestamp + curEpochLen - timeLaunch) / oneYear (contracts/Tokenomics.sol#812)
	- yearEndTime_scope_1 = timeLaunch + numYears * oneYear (contracts/Tokenomics.sol#818)
=> By design, the correct number of years is floored from the number of seconds divided by the number of seconds in a year

Clarification: Needs to be fixed.
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- curInflationPerSecond = getInflationForYear(numYears) / oneYear (contracts/Tokenomics.sol#778)
	- maxBond = uint96(curInflationPerSecond * curEpochLen * tp.epochPoint.maxBondFraction) / 100 (contracts/Tokenomics.sol#782)
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- curInflationPerSecond_scope_0 = getInflationForYear(numYears) / oneYear (contracts/Tokenomics.sol#822)
	- curMaxBond += ((block.timestamp + curEpochLen - yearEndTime_scope_1) * curInflationPerSecond_scope_0 * tp.epochPoint.maxBondFraction) / 100 (contracts/Tokenomics.sol#824)
- Left as is, extended comment is in https://github.com/valory-xyz/autonolas-tokenomics/commit/bb6a692b072cd91e6740d8f7081bf1753a81f1bb:
Precision is lost for at most 6 insignificant digits (or 1e-12) of OLAS per year, but it allows to avoid complex calculations.
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- codeUnits = (tp.unitPoints[1].unitWeight * tp.unitPoints[0].numNewUnits + tp.unitPoints[0].unitWeight * tp.unitPoints[1].numNewUnits) / sumWeights (contracts/Tokenomics.sol#845-846)
	- fp2 = PRBMathSD59x18.fromInt(int256(codeUnits * tp.epochPoint.devsPerCapital)) (contracts/Tokenomics.sol#853)
=> Fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/416eb7dd585f8a1e1daadd3a7e3e8d995336fc0d

Clarification: False positive.
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- fp1 = PRBMathSD59x18.fromInt(int256(incentives[1])) / 1e18 (contracts/Tokenomics.sol#851)
	- fp1 = fp1.mul(fp2) (contracts/Tokenomics.sol#855)
By logic:
    // fKD = codeUnits * devsPerCapital * treasuryRewards + codeUnits * newOwners;
    // Convert all the necessary values to fixed-point numbers considering OLAS decimals (18 by default)
    // Convert treasuryRewards and convert to ETH
    int256 fp1 = PRBMathSD59x18.fromInt(int256(incentives[1])) / 1e18;
    // Example: incentives[1] = 5e17 wei == 0.5 eth
    // PRBMathSD59x18.fromInt(int256(incentives[1])) =>  5e17 * 1e18 Floating point representation of a number "5e17.0"
    // 5e17 * 1e18 / 1e18 Floating point representation of a number "0.5". What we want
    // Convert (codeUnits * devsPerCapital)
    int256 fp2 = PRBMathSD59x18.fromInt(int256(codeUnits * tp.epochPoint.devsPerCapital));
    // fp1 == codeUnits * devsPerCapital * treasuryRewards
    fp1 = fp1.mul(fp2);
=> Refactored in https://github.com/valory-xyz/autonolas-tokenomics/commit/416eb7dd585f8a1e1daadd3a7e3e8d995336fc0d

Clarification: Needs to be fixed.
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) performs a multiplication on the result of a division:
	- codeUnits = (tp.unitPoints[1].unitWeight * tp.unitPoints[0].numNewUnits + tp.unitPoints[0].unitWeight * tp.unitPoints[1].numNewUnits) / sumWeights (contracts/Tokenomics.sol#845-846)
	- fp2 = PRBMathSD59x18.fromInt(int256(codeUnits * tp.epochPoint.numNewOwners)) (contracts/Tokenomics.sol#857)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
=> Fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/416eb7dd585f8a1e1daadd3a7e3e8d995336fc0d

Clarification: Probably false positive. 
Depository.close(uint256) (contracts/Depository.sol#274-294) uses a dangerous strict equality:
	- mapBondProducts[productId].expiry == 0 (contracts/Depository.sol#281)
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) uses a dangerous strict equality:
	- incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1]) (contracts/Tokenomics.sol#889)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
=> Verified, false positive

Clarification: False positive. Treasury is trusted contracts and rebalanceTreasury does not have a re-entry point.
Reentrancy in Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913):
	External calls:
	- incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1]) (contracts/Tokenomics.sol#889)
	State variables written after the call(s):
	- epochCounter = uint32(eCounter) (contracts/Tokenomics.sol#894)
	- nextPoint.unitPoints[i].topUpUnitFraction = tp.unitPoints[i].topUpUnitFraction (contracts/Tokenomics.sol#903)
	- nextPoint.unitPoints[i].rewardUnitFraction = tp.unitPoints[i].rewardUnitFraction (contracts/Tokenomics.sol#904)
	- nextPoint.unitPoints[i].unitWeight = tp.unitPoints[i].unitWeight (contracts/Tokenomics.sol#905)
	- nextPoint.epochPoint.rewardTreasuryFraction = tp.epochPoint.rewardTreasuryFraction (contracts/Tokenomics.sol#907)
	- nextPoint.epochPoint.maxBondFraction = tp.epochPoint.maxBondFraction (contracts/Tokenomics.sol#908)
	- nextPoint.epochPoint.devsPerCapital = tp.epochPoint.devsPerCapital (contracts/Tokenomics.sol#909)
	- nextPoint.epochPoint.idf = idf (contracts/Tokenomics.sol#910)
=> Verified

Clarification: False positive. _locked is reentrancy guard.
Reentrancy in Dispenser.claimOwnerIncentives(uint256[],uint256[]) (contracts/Dispenser.sol#31-48):
	External calls:
	- (reward,topUp) = ITokenomics(tokenomics).accountOwnerIncentives(msg.sender,unitTypes,unitIds) (contracts/Dispenser.sol#41)
	- success = ITreasury(treasury).withdrawToAccount(msg.sender,reward,topUp) (contracts/Dispenser.sol#44)
	State variables written after the call(s):
	- _locked = 1 (contracts/Dispenser.sol#47)
=> Verified

Clarification: False positive. Tokenomics is trusted contracts and refundFromBondProgram does not have a re-entry point.
Reentrancy in Depository.close(uint256) (contracts/Depository.sol#274-294):
	External calls:
	- ITokenomics(tokenomics).refundFromBondProgram(supply) (contracts/Depository.sol#288)
	State variables written after the call(s):
	- delete mapBondProducts[productId] (contracts/Depository.sol#291)
=> Verified

Clarification: False positive. Special test contract for simulation of a reentrancy attack. 
Reentrancy in ReentrancyAttacker.receive() (contracts/test/ReentrancyAttacker.sol#36-52):
	External calls:
	- ITokenomics(dispenser).claimOwnerIncentives(unitTypes,unitIds) (contracts/test/ReentrancyAttacker.sol#42)
	State variables written after the call(s):
	- attackOnClaimOwnerIncentives = false (contracts/test/ReentrancyAttacker.sol#50)
=> Verified

Clarification: False positive. Tokenomics is trusted contracts and refundFromBondProgram does not have a re-entry point.
Reentrancy in Depository.redeem(uint256[]) (contracts/Depository.sol#155-191):
	External calls:
	- ITokenomics(tokenomics).refundFromBondProgram(supply) (contracts/Depository.sol#181)
	State variables written after the call(s):
	- delete mapBondProducts[productId] (contracts/Depository.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
=> Verified

Clarification: Please pay attention. Usually this is "false positive" 
Tokenomics._trackServiceDonations(uint256[],uint256[],uint256).topUpEligible (contracts/Tokenomics.sol#623) is a local variable never initialized
Depository.getPendingBonds(address).numAccountBonds (contracts/Depository.sol#198) is a local variable never initialized
Depository.getActiveProducts().numPos (contracts/Depository.sol#319) is a local variable never initialized
Depository.getActiveProducts().numActive (contracts/Depository.sol#309) is a local variable never initialized
Depository.getPendingBonds(address).numPos (contracts/Depository.sol#213) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
=> Verified, false positive


Clarification: Good point and should be corrected.
Tokenomics.reserveAmountForBondProgram(uint256) (contracts/Tokenomics.sol#530-545) should emit an event for: 
	- effectiveBond = uint96(eBond) (contracts/Tokenomics.sol#542) 
Tokenomics.refundFromBondProgram(uint256) (contracts/Tokenomics.sol#549-557) should emit an event for: 
	- effectiveBond = uint96(eBond) (contracts/Tokenomics.sol#556) 
Treasury.rebalanceTreasury(uint256) (contracts/Treasury.sol#311-340) should emit an event for: 
	- ETHOwned = uint96(amountETHOwned) (contracts/Treasury.sol#333) 
	- ETHFromServices = uint96(amountETHFromServices) (contracts/Treasury.sol#334) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic
=> Fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/1c4ac57a7f5aa1cd017101f5bcb8d3c4e342b680

Clarification: Low risk. The fix is optional. 
Depository.constructor(address,address,address,address)._bondCalculator (contracts/Depository.sol#86) lacks a zero-check on :
		- bondCalculator = _bondCalculator (contracts/Depository.sol#90)
GenericBondCalculator.constructor(address,address)._olas (contracts/GenericBondCalculator.sol#20) lacks a zero-check on :
		- olas = _olas (contracts/GenericBondCalculator.sol#21)
GenericBondCalculator.constructor(address,address)._tokenomics (contracts/GenericBondCalculator.sol#20) lacks a zero-check on :
		- tokenomics = _tokenomics (contracts/GenericBondCalculator.sol#22)
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address)._ve (contracts/Tokenomics.sol#233) lacks a zero-check on :
		- ve = _ve (contracts/Tokenomics.sol#250)
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address)._componentRegistry (contracts/Tokenomics.sol#235) lacks a zero-check on :
		- componentRegistry = _componentRegistry (contracts/Tokenomics.sol#252)
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address)._agentRegistry (contracts/Tokenomics.sol#236) lacks a zero-check on :
		- agentRegistry = _agentRegistry (contracts/Tokenomics.sol#253)
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address)._serviceRegistry (contracts/Tokenomics.sol#237) lacks a zero-check on :
		- serviceRegistry = _serviceRegistry (contracts/Tokenomics.sol#254)
=> Left as is, as it is related to the initialization only

Clarification: False positive. donatorBlacklist can be zero address by design.
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address)._donatorBlacklist (contracts/Tokenomics.sol#238) lacks a zero-check on :
		- donatorBlacklist = _donatorBlacklist (contracts/Tokenomics.sol#255)
Tokenomics.changeDonatorBlacklist(address)._donatorBlacklist (contracts/Tokenomics.sol#516) lacks a zero-check on :
		- donatorBlacklist = _donatorBlacklist (contracts/Tokenomics.sol#522)
=> Verified

Clarification: Can be fix.
TokenomicsProxy.constructor(address,bytes).tokenomics (contracts/TokenomicsProxy.sol#16) lacks a zero-check on :
		- (success) = tokenomics.delegatecall(tokenomicsData) (contracts/TokenomicsProxy.sol#21)
Treasury.withdraw(address,uint256,address).to (contracts/Treasury.sol#178) lacks a zero-check on :
		- (success,None) = to.call{value: tokenAmount}() (contracts/Treasury.sol#194)
=> Fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/1c4ac57a7f5aa1cd017101f5bcb8d3c4e342b680

Clarification: False positive. account(msg. sender for Dispenser) always can't be zero. 
Treasury.withdrawToAccount(address,uint256,uint256).account (contracts/Treasury.sol#230) lacks a zero-check on :
		- (success,None) = account.call{value: accountRewards}() (contracts/Treasury.sol#248)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
=> Verified

Clarification: The code follows the business logic, so it fits the design.
Depository.redeem(uint256[]) (contracts/Depository.sol#155-191) has external calls inside a loop: ITokenomics(tokenomics).refundFromBondProgram(supply) (contracts/Depository.sol#181)
Tokenomics.trackServiceDonations(address,uint256[],uint256[]) (contracts/Tokenomics.sol#689-722) has external calls inside a loop: ! IServiceTokenomics(serviceRegistry).exists(serviceIds[i]) (contracts/Tokenomics.sol#708)
Tokenomics.accountOwnerIncentives(address,uint256[],uint256[]) (contracts/Tokenomics.sol#966-1024) has external calls inside a loop: unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]) (contracts/Tokenomics.sol#992)
Tokenomics.getOwnerIncentives(address,uint256[],uint256[]) (contracts/Tokenomics.sol#1033-1102) has external calls inside a loop: unitOwner = IToken(registries[unitTypes[i]]).ownerOf(unitIds[i]) (contracts/Tokenomics.sol#1054)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
=> Verified

Clarification: Very low (practically zero) risk.
The risk is minimal since a potential attack must meet the following conditions:
- Re-entrancy possible only for owner! This makes further logic meaningless.
        if (msg.sender != owner) {
            revert OwnerOnly(msg.sender, owner);
        }
- Owner allowed malicious (ITreasury(treasury).isEnabled(token)) token (Uniswapv2 pair) with re-entrancy function kLast() 
reserveAmountForBondProgram does not have a re-entry point.
Reentrancy in Depository.create(address,uint256,uint256,uint256) (contracts/Depository.sol#237-269):
	External calls:
	- ! ITreasury(treasury).isEnabled(token) || ! IGenericBondCalculator(bondCalculator).checkLP(token) (contracts/Depository.sol#249)
	- ! ITokenomics(tokenomics).reserveAmountForBondProgram(supply) (contracts/Depository.sol#254)
	State variables written after the call(s):
	- mapBondProducts[productId] = Product(priceLP,token,uint96(supply),uint32(expiry),0) (contracts/Depository.sol#266)
	- productCounter = uint32(productId + 1) (contracts/Depository.sol#267)
Notes: It makes practical sense to opt out of this check. 
In any case, we will have to manual check that this is the correct LP-pair contract.
It's easy to fake the existence of a function kLast()
Ref: function checkLP(address token) external returns (bool success)
=> Fixed in https://github.com/valory-xyz/autonolas-tokenomics/commit/1c4ac57a7f5aa1cd017101f5bcb8d3c4e342b680

Clarification: False positive if bList is trusted contract or needing reentrancy guard. Better add a guard for any blacklisted contract.
trackServiceDonations -> IDonatorBlacklist(bList).isDonatorBlacklisted(donator)
IDonatorBlacklist(bList).isDonatorBlacklisted(donator) - does not have a re-entry point if we used a trusted contract. 
If we use untrusted (for example: external blacklist providers) contract then please add a reentrancy guard.
Reentrancy in Treasury.depositServiceDonationsETH(uint256[],uint256[]) (contracts/Treasury.sol#141-171):
	External calls:
	- donationETH = ITokenomics(tokenomics).trackServiceDonations(msg.sender,serviceIds,amounts) (contracts/Treasury.sol#166)
	State variables written after the call(s):
	- ETHFromServices = uint96(donationETH) (contracts/Treasury.sol#168)
=> Verified

Clarification: Probably false positive
Depository.deposit(uint256,uint256) (contracts/Depository.sol#111-150) uses timestamp for comparisons
	Dangerous comparisons:
	- expiry < block.timestamp (contracts/Depository.sol#122)
Depository.redeem(uint256[]) (contracts/Depository.sol#155-191) uses timestamp for comparisons
	Dangerous comparisons:
	- matured = (block.timestamp >= mapUserBonds[bondIds[i]].maturity) && (pay > 0) (contracts/Depository.sol#159)
	- mapBondProducts[productId].expiry > 0 (contracts/Depository.sol#177)
	- supply > 0 (contracts/Depository.sol#180)
Depository.getBondStatus(uint256) (contracts/Depository.sol#226-229) uses timestamp for comparisons
	Dangerous comparisons:
	- matured = (block.timestamp >= mapUserBonds[bondId].maturity) && payout > 0 (contracts/Depository.sol#228)
Depository.create(address,uint256,uint256,uint256) (contracts/Depository.sol#237-269) uses timestamp for comparisons
	Dangerous comparisons:
	- expiry > type()(uint32).max (contracts/Depository.sol#260)
Depository.close(uint256) (contracts/Depository.sol#274-294) uses timestamp for comparisons
	Dangerous comparisons:
	- mapBondProducts[productId].expiry == 0 (contracts/Depository.sol#281)
	- supply > 0 (contracts/Depository.sol#287)
Depository.isActiveProduct(uint256) (contracts/Depository.sol#299-301) uses timestamp for comparisons
	Dangerous comparisons:
	- status = (mapBondProducts[productId].supply > 0 && mapBondProducts[productId].expiry > block.timestamp) (contracts/Depository.sol#300)
Depository.getActiveProducts() (contracts/Depository.sol#305-327) uses timestamp for comparisons
	Dangerous comparisons:
	- mapBondProducts[i].supply > 0 && mapBondProducts[i].expiry > block.timestamp (contracts/Depository.sol#311)
Tokenomics.initializeTokenomics(address,address,address,address,address,uint32,address,address,address,address) (contracts/Tokenomics.sol#228-307) uses timestamp for comparisons
	Dangerous comparisons:
	- (block.timestamp + 1) > (_timeLaunch + oneYear) (contracts/Tokenomics.sol#260)
Tokenomics._adjustMaxBond(uint256) (contracts/Tokenomics.sol#335-356) uses timestamp for comparisons
	Dangerous comparisons:
	- curMaxBond > nextMaxBond (contracts/Tokenomics.sol#339)
	- curEffectiveBond > delta (contracts/Tokenomics.sol#343)
Tokenomics.changeTokenomicsParameters(uint32,uint64,uint32,uint96) (contracts/Tokenomics.sol#362-427) uses timestamp for comparisons
	Dangerous comparisons:
	- numYears > currentYear (contracts/Tokenomics.sol#404)
Tokenomics.reserveAmountForBondProgram(uint256) (contracts/Tokenomics.sol#530-545) uses timestamp for comparisons
	Dangerous comparisons:
	- (eBond + 1) > amount (contracts/Tokenomics.sol#538)
Tokenomics.checkpoint() (contracts/Tokenomics.sol#727-913) uses timestamp for comparisons
	Dangerous comparisons:
	- diffNumSeconds < curEpochLen (contracts/Tokenomics.sol#742)
	- numYears > currentYear (contracts/Tokenomics.sol#770)
	- incentives[4] > curMaxBond (contracts/Tokenomics.sol#803)
	- numYears > currentYear (contracts/Tokenomics.sol#814)
	- incentives[0] > 0 (contracts/Tokenomics.sol#840)
	- fKD > epsilonRate (contracts/Tokenomics.sol#866)
	- incentives[1] == 0 || ITreasury(treasury).rebalanceTreasury(incentives[1]) (contracts/Tokenomics.sol#889)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
=> Verified, false positives

Clarification: False positive. void contructor by design.
Void constructor called in Depository.constructor(address,address,address,address) (contracts/Depository.sol#86-91):
	- GenericTokenomics() (contracts/Depository.sol#87)
Void constructor called in Dispenser.constructor(address,address) (contracts/Dispenser.sol#17-21):
	- GenericTokenomics() (contracts/Dispenser.sol#18)
Void constructor called in Tokenomics.constructor() (contracts/Tokenomics.sol#210-213):
	- TokenomicsConstants() (contracts/Tokenomics.sol#211)
Void constructor called in Tokenomics.constructor() (contracts/Tokenomics.sol#210-213):
	- GenericTokenomics() (contracts/Tokenomics.sol#212)
Void constructor called in Treasury.constructor(address,address,address,address) (contracts/Treasury.sol#84-89):
	- GenericTokenomics() (contracts/Treasury.sol#85)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#void-constructor
=> Refactored, no GenericTokenomics contract anymore; TokenomicsConstants is void by design.

Clarification: False positive. Different version by design.
Different versions of Solidity are used:
	- Version used: ['=0.6.6', '>=0.5.0', '>=0.6.0', '>=0.6.2', '^0.6.6']:
	- Version used: ['=0.5.16', '>=0.4.22<0.6', '>=0.5.0']
	- Version used: ['>=0.5.0', '>=0.6.0', '>=0.6.2', '>=0.8.4', '^0.8.0', '^0.8.17']
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
=> Verified

Clarification: Please double check. Gas optimization notes.
That means that delete voterStructs[voterId] on that first voter will again just be an extra 5,000 gas. No refund will be given because the value was already zero. (c)
Ref: https://ethereum.stackexchange.com/questions/15573/why-does-delete-increase-overall-gas-cost
Depository.redeem(uint256[]) (contracts/Depository.sol#155-191) has costly operations inside a loop:
	- delete mapUserBonds[bondIds[i]] (contracts/Depository.sol#173)
Depository.redeem(uint256[]) (contracts/Depository.sol#155-191) has costly operations inside a loop:
	- delete mapBondProducts[productId] (contracts/Depository.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
=> Verified, the delete operation is called only once

Clarification: Ignore it.
Pragma version^0.8.17 (contracts/Depository.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.16
...
Pragma version^0.8.17 (contracts/test/ReentrancyAttacker.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.16
solc-0.8.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
=> Verified

Clarification: False positive. Low level calls by design
Low level call in TokenomicsProxy.constructor(address,bytes) (contracts/TokenomicsProxy.sol#16-25):
	- (success) = tokenomics.delegatecall(tokenomicsData) (contracts/TokenomicsProxy.sol#21)
Low level call in Treasury.withdraw(address,uint256,address) (contracts/Treasury.sol#178-220):
	- (success,None) = to.call{value: tokenAmount}() (contracts/Treasury.sol#194)
Low level call in Treasury.withdrawToAccount(address,uint256,uint256) (contracts/Treasury.sol#230-262):
	- (success,None) = account.call{value: accountRewards}() (contracts/Treasury.sol#248)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
=> Verified

Clarification: Ignore it.
Depository (contracts/Depository.sol#31-335) should inherit from IDepository (contracts/test/AttackDeposit.sol#7-10)
DonatorBlacklist (contracts/DonatorBlacklist.sol#20-84) should inherit from IDonatorBlacklist (contracts/interfaces/IDonatorBlacklist.sol#5-10)
GenericBondCalculator (contracts/GenericBondCalculator.sol#11-83) should inherit from IGenericBondCalculator (contracts/interfaces/IGenericBondCalculator.sol#5-22)
MockVE (contracts/test/MockVE.sol#5-45) should inherit from IVotingEscrow (contracts/interfaces/IVotingEscrow.sol#5-20)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance
=> Verified

Clarification: Please pay attention.
Variable Tokenomics._finalizeIncentivesForUnitId(uint256,uint256,uint256).sumUnitIncentives_scope_0 (contracts/Tokenomics.sol#589) is too similar to Tokenomics.getOwnerIncentives(address,uint256[],uint256[]).sumUnitIncentives_scope_1 (contracts/Tokenomics.sol#1091)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
=> Verified, false positive. The variables are located in different functions and scopes. Somehow other same-named variables were not identified





